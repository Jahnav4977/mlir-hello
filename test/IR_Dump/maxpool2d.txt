// -----// IR Dump After {anonymous}::MxToTosaLowerPass () //----- //
module {
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %1 = tosa.transpose %arg0, %0 : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %2 = tosa.max_pool2d %1 {kernel = array<i64: 2, 2>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>) -> tensor<3x9x9x3xf32>
    %3 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %4 = tosa.transpose %2, %3 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    %cast = tensor.cast %4 : tensor<3x3x9x9xf32> to tensor<3x3x9x9xf32>
    return %cast : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToArith (tosa-to-arith) //----- //
module {
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %cst = arith.constant dense<[0, 2, 3, 1]> : tensor<4xi32>
    %0 = tosa.transpose %arg0, %cst : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %1 = tosa.max_pool2d %0 {kernel = array<i64: 2, 2>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>) -> tensor<3x9x9x3xf32>
    %cst_0 = arith.constant dense<[0, 3, 1, 2]> : tensor<4xi32>
    %2 = tosa.transpose %1, %cst_0 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    return %2 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToTensor (tosa-to-tensor) //----- //
module {
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %cst = arith.constant dense<[0, 2, 3, 1]> : tensor<4xi32>
    %0 = tosa.transpose %arg0, %cst : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %1 = tosa.max_pool2d %0 {kernel = array<i64: 2, 2>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>) -> tensor<3x9x9x3xf32>
    %cst_0 = arith.constant dense<[0, 3, 1, 2]> : tensor<4xi32>
    %2 = tosa.transpose %1, %cst_0 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    return %2 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToLinalgNamed (tosa-to-linalg-named) //----- //
func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant dense<[0, 2, 3, 1]> : tensor<4xi32>
  %0 = tensor.empty() : tensor<3x10x10x3xf32>
  %transposed = linalg.transpose ins(%arg0 : tensor<3x3x10x10xf32>) outs(%0 : tensor<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
  %cst_0 = arith.constant -3.40282347E+38 : f32
  %1 = tensor.empty() : tensor<3x9x9x3xf32>
  %2 = linalg.fill ins(%cst_0 : f32) outs(%1 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %3 = tensor.empty() : tensor<2x2xf32>
  %4 = linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%transposed, %3 : tensor<3x10x10x3xf32>, tensor<2x2xf32>) outs(%2 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %cst_1 = arith.constant dense<[0, 3, 1, 2]> : tensor<4xi32>
  %5 = tensor.empty() : tensor<3x3x9x9xf32>
  %transposed_2 = linalg.transpose ins(%4 : tensor<3x9x9x3xf32>) outs(%5 : tensor<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
  return %transposed_2 : tensor<3x3x9x9xf32>
}

// -----// IR Dump After TosaToLinalg (tosa-to-linalg) //----- //
func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant dense<[0, 2, 3, 1]> : tensor<4xi32>
  %0 = tensor.empty() : tensor<3x10x10x3xf32>
  %transposed = linalg.transpose ins(%arg0 : tensor<3x3x10x10xf32>) outs(%0 : tensor<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
  %cst_0 = arith.constant -3.40282347E+38 : f32
  %1 = tensor.empty() : tensor<3x9x9x3xf32>
  %2 = linalg.fill ins(%cst_0 : f32) outs(%1 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %3 = tensor.empty() : tensor<2x2xf32>
  %4 = linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%transposed, %3 : tensor<3x10x10x3xf32>, tensor<2x2xf32>) outs(%2 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %cst_1 = arith.constant dense<[0, 3, 1, 2]> : tensor<4xi32>
  %5 = tensor.empty() : tensor<3x3x9x9xf32>
  %transposed_2 = linalg.transpose ins(%4 : tensor<3x9x9x3xf32>) outs(%5 : tensor<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
  return %transposed_2 : tensor<3x3x9x9xf32>
}

// -----// IR Dump After OneShotBufferize (one-shot-bufferize) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_memref %arg0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %1 = memref.get_global @__constant_4xi32 : memref<4xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    linalg.transpose ins(%0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc : memref<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<2x2xf32>
    linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%alloc, %alloc_1 : memref<3x10x10x3xf32>, memref<2x2xf32>) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %2 = memref.get_global @__constant_4xi32_0 : memref<4xi32>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    linalg.transpose ins(%alloc_0 : memref<3x9x9x3xf32>) outs(%alloc_2 : memref<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
    %3 = bufferization.to_tensor %alloc_2 : memref<3x3x9x9xf32>
    return %3 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After FuncBufferize (func-bufferize) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
    %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %2 = memref.get_global @__constant_4xi32 : memref<4xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    linalg.transpose ins(%1 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc : memref<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<2x2xf32>
    linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%alloc, %alloc_1 : memref<3x10x10x3xf32>, memref<2x2xf32>) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %3 = memref.get_global @__constant_4xi32_0 : memref<4xi32>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    linalg.transpose ins(%alloc_0 : memref<3x9x9x3xf32>) outs(%alloc_2 : memref<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
    %4 = bufferization.to_tensor %alloc_2 : memref<3x3x9x9xf32>
    %5 = bufferization.to_memref %4 : memref<3x3x9x9xf32>
    return %5 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertLinalgToAffineLoopsPass (convert-linalg-to-affine-loops) //----- //
func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant -3.40282347E+38 : f32
  %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
  %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 10 {
      affine.for %arg3 = 0 to 10 {
        affine.for %arg4 = 0 to 3 {
          %2 = affine.load %1[%arg1, %arg4, %arg2, %arg3] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
          affine.store %2, %alloc[%arg1, %arg2, %arg3, %arg4] : memref<3x10x10x3xf32>
        }
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 9 {
      affine.for %arg3 = 0 to 9 {
        affine.for %arg4 = 0 to 3 {
          affine.store %cst, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
        }
      }
    }
  }
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 9 {
      affine.for %arg3 = 0 to 9 {
        affine.for %arg4 = 0 to 3 {
          affine.for %arg5 = 0 to 2 {
            affine.for %arg6 = 0 to 2 {
              %2 = affine.apply affine_map<(d0, d1) -> (d0 + d1)>(%arg2, %arg5)
              %3 = affine.apply affine_map<(d0, d1) -> (d0 + d1)>(%arg3, %arg6)
              %4 = affine.load %alloc[%arg1, %2, %3, %arg4] : memref<3x10x10x3xf32>
              %5 = affine.load %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
              %6 = arith.maximumf %5, %4 : f32
              affine.store %6, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
            }
          }
        }
      }
    }
  }
  %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 3 {
      affine.for %arg3 = 0 to 9 {
        affine.for %arg4 = 0 to 9 {
          %2 = affine.load %alloc_0[%arg1, %arg3, %arg4, %arg2] : memref<3x9x9x3xf32>
          affine.store %2, %alloc_1[%arg1, %arg2, %arg3, %arg4] : memref<3x3x9x9xf32>
        }
      }
    }
  }
  return %alloc_1 : memref<3x3x9x9xf32>
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant -3.40282347E+38 : f32
  %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
  %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  scf.for %arg1 = %c0 to %c3 step %c1 {
    %c0_11 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_12 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c10 step %c1_12 {
      %c0_13 = arith.constant 0 : index
      %c10_14 = arith.constant 10 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_13 to %c10_14 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c3_17 = arith.constant 3 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c3_17 step %c1_18 {
          %2 = memref.load %1[%arg1, %arg4, %arg2, %arg3] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
          memref.store %2, %alloc[%arg1, %arg2, %arg3, %arg4] : memref<3x10x10x3xf32>
        }
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
  %c0_1 = arith.constant 0 : index
  %c3_2 = arith.constant 3 : index
  %c1_3 = arith.constant 1 : index
  scf.for %arg1 = %c0_1 to %c3_2 step %c1_3 {
    %c0_11 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_12 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c9 step %c1_12 {
      %c0_13 = arith.constant 0 : index
      %c9_14 = arith.constant 9 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_13 to %c9_14 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c3_17 = arith.constant 3 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c3_17 step %c1_18 {
          memref.store %cst, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
        }
      }
    }
  }
  %c0_4 = arith.constant 0 : index
  %c3_5 = arith.constant 3 : index
  %c1_6 = arith.constant 1 : index
  scf.for %arg1 = %c0_4 to %c3_5 step %c1_6 {
    %c0_11 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_12 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c9 step %c1_12 {
      %c0_13 = arith.constant 0 : index
      %c9_14 = arith.constant 9 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_13 to %c9_14 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c3_17 = arith.constant 3 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c3_17 step %c1_18 {
          %c0_19 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_20 = arith.constant 1 : index
          scf.for %arg5 = %c0_19 to %c2 step %c1_20 {
            %c0_21 = arith.constant 0 : index
            %c2_22 = arith.constant 2 : index
            %c1_23 = arith.constant 1 : index
            scf.for %arg6 = %c0_21 to %c2_22 step %c1_23 {
              %2 = arith.addi %arg2, %arg5 : index
              %3 = arith.addi %arg3, %arg6 : index
              %4 = memref.load %alloc[%arg1, %2, %3, %arg4] : memref<3x10x10x3xf32>
              %5 = memref.load %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
              %6 = arith.maximumf %5, %4 : f32
              memref.store %6, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
            }
          }
        }
      }
    }
  }
  %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
  %c0_8 = arith.constant 0 : index
  %c3_9 = arith.constant 3 : index
  %c1_10 = arith.constant 1 : index
  scf.for %arg1 = %c0_8 to %c3_9 step %c1_10 {
    %c0_11 = arith.constant 0 : index
    %c3_12 = arith.constant 3 : index
    %c1_13 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c3_12 step %c1_13 {
      %c0_14 = arith.constant 0 : index
      %c9 = arith.constant 9 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_14 to %c9 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c9_17 = arith.constant 9 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c9_17 step %c1_18 {
          %2 = memref.load %alloc_0[%arg1, %arg3, %arg4, %arg2] : memref<3x9x9x3xf32>
          memref.store %2, %alloc_7[%arg1, %arg2, %arg3, %arg4] : memref<3x3x9x9xf32>
        }
      }
    }
  }
  return %alloc_7 : memref<3x3x9x9xf32>
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
    %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%2: index):  // 2 preds: ^bb0, ^bb11
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    %c0_0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_1 = arith.constant 1 : index
    cf.br ^bb3(%c0_0 : index)
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb10
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    %c0_2 = arith.constant 0 : index
    %c10_3 = arith.constant 10 : index
    %c1_4 = arith.constant 1 : index
    cf.br ^bb5(%c0_2 : index)
  ^bb5(%6: index):  // 2 preds: ^bb4, ^bb9
    %7 = arith.cmpi slt, %6, %c10_3 : index
    cf.cond_br %7, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    %c0_5 = arith.constant 0 : index
    %c3_6 = arith.constant 3 : index
    %c1_7 = arith.constant 1 : index
    cf.br ^bb7(%c0_5 : index)
  ^bb7(%8: index):  // 2 preds: ^bb6, ^bb8
    %9 = arith.cmpi slt, %8, %c3_6 : index
    cf.cond_br %9, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %10 = memref.load %1[%2, %8, %4, %6] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    memref.store %10, %alloc[%2, %4, %6, %8] : memref<3x10x10x3xf32>
    %11 = arith.addi %8, %c1_7 : index
    cf.br ^bb7(%11 : index)
  ^bb9:  // pred: ^bb7
    %12 = arith.addi %6, %c1_4 : index
    cf.br ^bb5(%12 : index)
  ^bb10:  // pred: ^bb5
    %13 = arith.addi %4, %c1_1 : index
    cf.br ^bb3(%13 : index)
  ^bb11:  // pred: ^bb3
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb12:  // pred: ^bb1
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    %c0_9 = arith.constant 0 : index
    %c3_10 = arith.constant 3 : index
    %c1_11 = arith.constant 1 : index
    cf.br ^bb13(%c0_9 : index)
  ^bb13(%15: index):  // 2 preds: ^bb12, ^bb23
    %16 = arith.cmpi slt, %15, %c3_10 : index
    cf.cond_br %16, ^bb14, ^bb24
  ^bb14:  // pred: ^bb13
    %c0_12 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_13 = arith.constant 1 : index
    cf.br ^bb15(%c0_12 : index)
  ^bb15(%17: index):  // 2 preds: ^bb14, ^bb22
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb16, ^bb23
  ^bb16:  // pred: ^bb15
    %c0_14 = arith.constant 0 : index
    %c9_15 = arith.constant 9 : index
    %c1_16 = arith.constant 1 : index
    cf.br ^bb17(%c0_14 : index)
  ^bb17(%19: index):  // 2 preds: ^bb16, ^bb21
    %20 = arith.cmpi slt, %19, %c9_15 : index
    cf.cond_br %20, ^bb18, ^bb22
  ^bb18:  // pred: ^bb17
    %c0_17 = arith.constant 0 : index
    %c3_18 = arith.constant 3 : index
    %c1_19 = arith.constant 1 : index
    cf.br ^bb19(%c0_17 : index)
  ^bb19(%21: index):  // 2 preds: ^bb18, ^bb20
    %22 = arith.cmpi slt, %21, %c3_18 : index
    cf.cond_br %22, ^bb20, ^bb21
  ^bb20:  // pred: ^bb19
    memref.store %cst, %alloc_8[%15, %17, %19, %21] : memref<3x9x9x3xf32>
    %23 = arith.addi %21, %c1_19 : index
    cf.br ^bb19(%23 : index)
  ^bb21:  // pred: ^bb19
    %24 = arith.addi %19, %c1_16 : index
    cf.br ^bb17(%24 : index)
  ^bb22:  // pred: ^bb17
    %25 = arith.addi %17, %c1_13 : index
    cf.br ^bb15(%25 : index)
  ^bb23:  // pred: ^bb15
    %26 = arith.addi %15, %c1_11 : index
    cf.br ^bb13(%26 : index)
  ^bb24:  // pred: ^bb13
    %c0_20 = arith.constant 0 : index
    %c3_21 = arith.constant 3 : index
    %c1_22 = arith.constant 1 : index
    cf.br ^bb25(%c0_20 : index)
  ^bb25(%27: index):  // 2 preds: ^bb24, ^bb41
    %28 = arith.cmpi slt, %27, %c3_21 : index
    cf.cond_br %28, ^bb26, ^bb42
  ^bb26:  // pred: ^bb25
    %c0_23 = arith.constant 0 : index
    %c9_24 = arith.constant 9 : index
    %c1_25 = arith.constant 1 : index
    cf.br ^bb27(%c0_23 : index)
  ^bb27(%29: index):  // 2 preds: ^bb26, ^bb40
    %30 = arith.cmpi slt, %29, %c9_24 : index
    cf.cond_br %30, ^bb28, ^bb41
  ^bb28:  // pred: ^bb27
    %c0_26 = arith.constant 0 : index
    %c9_27 = arith.constant 9 : index
    %c1_28 = arith.constant 1 : index
    cf.br ^bb29(%c0_26 : index)
  ^bb29(%31: index):  // 2 preds: ^bb28, ^bb39
    %32 = arith.cmpi slt, %31, %c9_27 : index
    cf.cond_br %32, ^bb30, ^bb40
  ^bb30:  // pred: ^bb29
    %c0_29 = arith.constant 0 : index
    %c3_30 = arith.constant 3 : index
    %c1_31 = arith.constant 1 : index
    cf.br ^bb31(%c0_29 : index)
  ^bb31(%33: index):  // 2 preds: ^bb30, ^bb38
    %34 = arith.cmpi slt, %33, %c3_30 : index
    cf.cond_br %34, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    %c0_32 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1_33 = arith.constant 1 : index
    cf.br ^bb33(%c0_32 : index)
  ^bb33(%35: index):  // 2 preds: ^bb32, ^bb37
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    %c0_34 = arith.constant 0 : index
    %c2_35 = arith.constant 2 : index
    %c1_36 = arith.constant 1 : index
    cf.br ^bb35(%c0_34 : index)
  ^bb35(%37: index):  // 2 preds: ^bb34, ^bb36
    %38 = arith.cmpi slt, %37, %c2_35 : index
    cf.cond_br %38, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %39 = arith.addi %29, %35 : index
    %40 = arith.addi %31, %37 : index
    %41 = memref.load %alloc[%27, %39, %40, %33] : memref<3x10x10x3xf32>
    %42 = memref.load %alloc_8[%27, %29, %31, %33] : memref<3x9x9x3xf32>
    %43 = arith.maximumf %42, %41 : f32
    memref.store %43, %alloc_8[%27, %29, %31, %33] : memref<3x9x9x3xf32>
    %44 = arith.addi %37, %c1_36 : index
    cf.br ^bb35(%44 : index)
  ^bb37:  // pred: ^bb35
    %45 = arith.addi %35, %c1_33 : index
    cf.br ^bb33(%45 : index)
  ^bb38:  // pred: ^bb33
    %46 = arith.addi %33, %c1_31 : index
    cf.br ^bb31(%46 : index)
  ^bb39:  // pred: ^bb31
    %47 = arith.addi %31, %c1_28 : index
    cf.br ^bb29(%47 : index)
  ^bb40:  // pred: ^bb29
    %48 = arith.addi %29, %c1_25 : index
    cf.br ^bb27(%48 : index)
  ^bb41:  // pred: ^bb27
    %49 = arith.addi %27, %c1_22 : index
    cf.br ^bb25(%49 : index)
  ^bb42:  // pred: ^bb25
    %alloc_37 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %c0_38 = arith.constant 0 : index
    %c3_39 = arith.constant 3 : index
    %c1_40 = arith.constant 1 : index
    cf.br ^bb43(%c0_38 : index)
  ^bb43(%50: index):  // 2 preds: ^bb42, ^bb53
    %51 = arith.cmpi slt, %50, %c3_39 : index
    cf.cond_br %51, ^bb44, ^bb54
  ^bb44:  // pred: ^bb43
    %c0_41 = arith.constant 0 : index
    %c3_42 = arith.constant 3 : index
    %c1_43 = arith.constant 1 : index
    cf.br ^bb45(%c0_41 : index)
  ^bb45(%52: index):  // 2 preds: ^bb44, ^bb52
    %53 = arith.cmpi slt, %52, %c3_42 : index
    cf.cond_br %53, ^bb46, ^bb53
  ^bb46:  // pred: ^bb45
    %c0_44 = arith.constant 0 : index
    %c9_45 = arith.constant 9 : index
    %c1_46 = arith.constant 1 : index
    cf.br ^bb47(%c0_44 : index)
  ^bb47(%54: index):  // 2 preds: ^bb46, ^bb51
    %55 = arith.cmpi slt, %54, %c9_45 : index
    cf.cond_br %55, ^bb48, ^bb52
  ^bb48:  // pred: ^bb47
    %c0_47 = arith.constant 0 : index
    %c9_48 = arith.constant 9 : index
    %c1_49 = arith.constant 1 : index
    cf.br ^bb49(%c0_47 : index)
  ^bb49(%56: index):  // 2 preds: ^bb48, ^bb50
    %57 = arith.cmpi slt, %56, %c9_48 : index
    cf.cond_br %57, ^bb50, ^bb51
  ^bb50:  // pred: ^bb49
    %58 = memref.load %alloc_8[%50, %54, %56, %52] : memref<3x9x9x3xf32>
    memref.store %58, %alloc_37[%50, %52, %54, %56] : memref<3x3x9x9xf32>
    %59 = arith.addi %56, %c1_49 : index
    cf.br ^bb49(%59 : index)
  ^bb51:  // pred: ^bb49
    %60 = arith.addi %54, %c1_46 : index
    cf.br ^bb47(%60 : index)
  ^bb52:  // pred: ^bb47
    %61 = arith.addi %52, %c1_43 : index
    cf.br ^bb45(%61 : index)
  ^bb53:  // pred: ^bb45
    %62 = arith.addi %50, %c1_40 : index
    cf.br ^bb43(%62 : index)
  ^bb54:  // pred: ^bb43
    return %alloc_37 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertMathToLLVMPass (convert-math-to-llvm) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ArithToLLVMConversionPass (convert-arith-to-llvm) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(2 : index) : i64
    %1 = llvm.mlir.constant(9 : index) : i64
    %2 = llvm.mlir.constant(10 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(3 : index) : i64
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = builtin.unrealized_conversion_cast %5 : i64 to index
    %7 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%6 : index)
  ^bb1(%8: index):  // 2 preds: ^bb0, ^bb8
    %9 = builtin.unrealized_conversion_cast %8 : index to i64
    %10 = llvm.icmp "slt" %9, %4 : i64
    cf.cond_br %10, ^bb2(%6 : index), ^bb9
  ^bb2(%11: index):  // 2 preds: ^bb1, ^bb7
    %12 = builtin.unrealized_conversion_cast %11 : index to i64
    %13 = llvm.icmp "slt" %12, %2 : i64
    cf.cond_br %13, ^bb3(%6 : index), ^bb8
  ^bb3(%14: index):  // 2 preds: ^bb2, ^bb6
    %15 = builtin.unrealized_conversion_cast %14 : index to i64
    %16 = llvm.icmp "slt" %15, %2 : i64
    cf.cond_br %16, ^bb4(%6 : index), ^bb7
  ^bb4(%17: index):  // 2 preds: ^bb3, ^bb5
    %18 = builtin.unrealized_conversion_cast %17 : index to i64
    %19 = llvm.icmp "slt" %18, %4 : i64
    cf.cond_br %19, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %20 = memref.load %arg0[%8, %17, %11, %14] : memref<3x3x10x10xf32>
    memref.store %20, %alloc[%8, %11, %14, %17] : memref<3x10x10x3xf32>
    %21 = llvm.add %18, %3 : i64
    %22 = builtin.unrealized_conversion_cast %21 : i64 to index
    cf.br ^bb4(%22 : index)
  ^bb6:  // pred: ^bb4
    %23 = llvm.add %15, %3 : i64
    %24 = builtin.unrealized_conversion_cast %23 : i64 to index
    cf.br ^bb3(%24 : index)
  ^bb7:  // pred: ^bb3
    %25 = llvm.add %12, %3 : i64
    %26 = builtin.unrealized_conversion_cast %25 : i64 to index
    cf.br ^bb2(%26 : index)
  ^bb8:  // pred: ^bb2
    %27 = llvm.add %9, %3 : i64
    %28 = builtin.unrealized_conversion_cast %27 : i64 to index
    cf.br ^bb1(%28 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%6 : index)
  ^bb10(%29: index):  // 2 preds: ^bb9, ^bb17
    %30 = builtin.unrealized_conversion_cast %29 : index to i64
    %31 = llvm.icmp "slt" %30, %4 : i64
    cf.cond_br %31, ^bb11(%6 : index), ^bb18(%6 : index)
  ^bb11(%32: index):  // 2 preds: ^bb10, ^bb16
    %33 = builtin.unrealized_conversion_cast %32 : index to i64
    %34 = llvm.icmp "slt" %33, %1 : i64
    cf.cond_br %34, ^bb12(%6 : index), ^bb17
  ^bb12(%35: index):  // 2 preds: ^bb11, ^bb15
    %36 = builtin.unrealized_conversion_cast %35 : index to i64
    %37 = llvm.icmp "slt" %36, %1 : i64
    cf.cond_br %37, ^bb13(%6 : index), ^bb16
  ^bb13(%38: index):  // 2 preds: ^bb12, ^bb14
    %39 = builtin.unrealized_conversion_cast %38 : index to i64
    %40 = llvm.icmp "slt" %39, %4 : i64
    cf.cond_br %40, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %7, %alloc_0[%29, %32, %35, %38] : memref<3x9x9x3xf32>
    %41 = llvm.add %39, %3 : i64
    %42 = builtin.unrealized_conversion_cast %41 : i64 to index
    cf.br ^bb13(%42 : index)
  ^bb15:  // pred: ^bb13
    %43 = llvm.add %36, %3 : i64
    %44 = builtin.unrealized_conversion_cast %43 : i64 to index
    cf.br ^bb12(%44 : index)
  ^bb16:  // pred: ^bb12
    %45 = llvm.add %33, %3 : i64
    %46 = builtin.unrealized_conversion_cast %45 : i64 to index
    cf.br ^bb11(%46 : index)
  ^bb17:  // pred: ^bb11
    %47 = llvm.add %30, %3 : i64
    %48 = builtin.unrealized_conversion_cast %47 : i64 to index
    cf.br ^bb10(%48 : index)
  ^bb18(%49: index):  // 2 preds: ^bb10, ^bb29
    %50 = builtin.unrealized_conversion_cast %49 : index to i64
    %51 = llvm.icmp "slt" %50, %4 : i64
    cf.cond_br %51, ^bb19(%6 : index), ^bb30
  ^bb19(%52: index):  // 2 preds: ^bb18, ^bb28
    %53 = builtin.unrealized_conversion_cast %52 : index to i64
    %54 = llvm.icmp "slt" %53, %1 : i64
    cf.cond_br %54, ^bb20(%6 : index), ^bb29
  ^bb20(%55: index):  // 2 preds: ^bb19, ^bb27
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = llvm.icmp "slt" %56, %1 : i64
    cf.cond_br %57, ^bb21(%6 : index), ^bb28
  ^bb21(%58: index):  // 2 preds: ^bb20, ^bb26
    %59 = builtin.unrealized_conversion_cast %58 : index to i64
    %60 = llvm.icmp "slt" %59, %4 : i64
    cf.cond_br %60, ^bb22(%6 : index), ^bb27
  ^bb22(%61: index):  // 2 preds: ^bb21, ^bb25
    %62 = builtin.unrealized_conversion_cast %61 : index to i64
    %63 = llvm.icmp "slt" %62, %0 : i64
    cf.cond_br %63, ^bb23(%6 : index), ^bb26
  ^bb23(%64: index):  // 2 preds: ^bb22, ^bb24
    %65 = builtin.unrealized_conversion_cast %64 : index to i64
    %66 = llvm.icmp "slt" %65, %0 : i64
    cf.cond_br %66, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %67 = llvm.add %53, %62 : i64
    %68 = builtin.unrealized_conversion_cast %67 : i64 to index
    %69 = llvm.add %56, %65 : i64
    %70 = builtin.unrealized_conversion_cast %69 : i64 to index
    %71 = memref.load %alloc[%49, %68, %70, %58] : memref<3x10x10x3xf32>
    %72 = memref.load %alloc_0[%49, %52, %55, %58] : memref<3x9x9x3xf32>
    %73 = llvm.intr.maximum(%72, %71)  : (f32, f32) -> f32
    memref.store %73, %alloc_0[%49, %52, %55, %58] : memref<3x9x9x3xf32>
    %74 = llvm.add %65, %3 : i64
    %75 = builtin.unrealized_conversion_cast %74 : i64 to index
    cf.br ^bb23(%75 : index)
  ^bb25:  // pred: ^bb23
    %76 = llvm.add %62, %3 : i64
    %77 = builtin.unrealized_conversion_cast %76 : i64 to index
    cf.br ^bb22(%77 : index)
  ^bb26:  // pred: ^bb22
    %78 = llvm.add %59, %3 : i64
    %79 = builtin.unrealized_conversion_cast %78 : i64 to index
    cf.br ^bb21(%79 : index)
  ^bb27:  // pred: ^bb21
    %80 = llvm.add %56, %3 : i64
    %81 = builtin.unrealized_conversion_cast %80 : i64 to index
    cf.br ^bb20(%81 : index)
  ^bb28:  // pred: ^bb20
    %82 = llvm.add %53, %3 : i64
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    cf.br ^bb19(%83 : index)
  ^bb29:  // pred: ^bb19
    %84 = llvm.add %50, %3 : i64
    %85 = builtin.unrealized_conversion_cast %84 : i64 to index
    cf.br ^bb18(%85 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%6 : index)
  ^bb31(%86: index):  // 2 preds: ^bb30, ^bb38
    %87 = builtin.unrealized_conversion_cast %86 : index to i64
    %88 = llvm.icmp "slt" %87, %4 : i64
    cf.cond_br %88, ^bb32(%6 : index), ^bb39
  ^bb32(%89: index):  // 2 preds: ^bb31, ^bb37
    %90 = builtin.unrealized_conversion_cast %89 : index to i64
    %91 = llvm.icmp "slt" %90, %4 : i64
    cf.cond_br %91, ^bb33(%6 : index), ^bb38
  ^bb33(%92: index):  // 2 preds: ^bb32, ^bb36
    %93 = builtin.unrealized_conversion_cast %92 : index to i64
    %94 = llvm.icmp "slt" %93, %1 : i64
    cf.cond_br %94, ^bb34(%6 : index), ^bb37
  ^bb34(%95: index):  // 2 preds: ^bb33, ^bb35
    %96 = builtin.unrealized_conversion_cast %95 : index to i64
    %97 = llvm.icmp "slt" %96, %1 : i64
    cf.cond_br %97, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %98 = memref.load %alloc_0[%86, %92, %95, %89] : memref<3x9x9x3xf32>
    memref.store %98, %alloc_1[%86, %89, %92, %95] : memref<3x3x9x9xf32>
    %99 = llvm.add %96, %3 : i64
    %100 = builtin.unrealized_conversion_cast %99 : i64 to index
    cf.br ^bb34(%100 : index)
  ^bb36:  // pred: ^bb34
    %101 = llvm.add %93, %3 : i64
    %102 = builtin.unrealized_conversion_cast %101 : i64 to index
    cf.br ^bb33(%102 : index)
  ^bb37:  // pred: ^bb33
    %103 = llvm.add %90, %3 : i64
    %104 = builtin.unrealized_conversion_cast %103 : i64 to index
    cf.br ^bb32(%104 : index)
  ^bb38:  // pred: ^bb32
    %105 = llvm.add %87, %3 : i64
    %106 = builtin.unrealized_conversion_cast %105 : i64 to index
    cf.br ^bb31(%106 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %13 = llvm.mlir.constant(2 : index) : i64
    %14 = llvm.mlir.constant(9 : index) : i64
    %15 = llvm.mlir.constant(10 : index) : i64
    %16 = llvm.mlir.constant(1 : index) : i64
    %17 = llvm.mlir.constant(3 : index) : i64
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = builtin.unrealized_conversion_cast %18 : i64 to index
    %20 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    llvm.br ^bb1(%18 : i64)
  ^bb1(%21: i64):  // 2 preds: ^bb0, ^bb8
    %22 = builtin.unrealized_conversion_cast %21 : i64 to index
    %23 = builtin.unrealized_conversion_cast %22 : index to i64
    %24 = llvm.icmp "slt" %23, %17 : i64
    llvm.cond_br %24, ^bb2(%18 : i64), ^bb9
  ^bb2(%25: i64):  // 2 preds: ^bb1, ^bb7
    %26 = builtin.unrealized_conversion_cast %25 : i64 to index
    %27 = builtin.unrealized_conversion_cast %26 : index to i64
    %28 = llvm.icmp "slt" %27, %15 : i64
    llvm.cond_br %28, ^bb3(%18 : i64), ^bb8
  ^bb3(%29: i64):  // 2 preds: ^bb2, ^bb6
    %30 = builtin.unrealized_conversion_cast %29 : i64 to index
    %31 = builtin.unrealized_conversion_cast %30 : index to i64
    %32 = llvm.icmp "slt" %31, %15 : i64
    llvm.cond_br %32, ^bb4(%18 : i64), ^bb7
  ^bb4(%33: i64):  // 2 preds: ^bb3, ^bb5
    %34 = builtin.unrealized_conversion_cast %33 : i64 to index
    %35 = builtin.unrealized_conversion_cast %34 : index to i64
    %36 = llvm.icmp "slt" %35, %17 : i64
    llvm.cond_br %36, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %37 = memref.load %12[%22, %34, %26, %30] : memref<3x3x10x10xf32>
    memref.store %37, %alloc[%22, %26, %30, %34] : memref<3x10x10x3xf32>
    %38 = llvm.add %35, %16 : i64
    %39 = builtin.unrealized_conversion_cast %38 : i64 to index
    llvm.br ^bb4(%38 : i64)
  ^bb6:  // pred: ^bb4
    %40 = llvm.add %31, %16 : i64
    %41 = builtin.unrealized_conversion_cast %40 : i64 to index
    llvm.br ^bb3(%40 : i64)
  ^bb7:  // pred: ^bb3
    %42 = llvm.add %27, %16 : i64
    %43 = builtin.unrealized_conversion_cast %42 : i64 to index
    llvm.br ^bb2(%42 : i64)
  ^bb8:  // pred: ^bb2
    %44 = llvm.add %23, %16 : i64
    %45 = builtin.unrealized_conversion_cast %44 : i64 to index
    llvm.br ^bb1(%44 : i64)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    llvm.br ^bb10(%18 : i64)
  ^bb10(%46: i64):  // 2 preds: ^bb9, ^bb17
    %47 = builtin.unrealized_conversion_cast %46 : i64 to index
    %48 = builtin.unrealized_conversion_cast %47 : index to i64
    %49 = llvm.icmp "slt" %48, %17 : i64
    llvm.cond_br %49, ^bb11(%18 : i64), ^bb18(%18 : i64)
  ^bb11(%50: i64):  // 2 preds: ^bb10, ^bb16
    %51 = builtin.unrealized_conversion_cast %50 : i64 to index
    %52 = builtin.unrealized_conversion_cast %51 : index to i64
    %53 = llvm.icmp "slt" %52, %14 : i64
    llvm.cond_br %53, ^bb12(%18 : i64), ^bb17
  ^bb12(%54: i64):  // 2 preds: ^bb11, ^bb15
    %55 = builtin.unrealized_conversion_cast %54 : i64 to index
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = llvm.icmp "slt" %56, %14 : i64
    llvm.cond_br %57, ^bb13(%18 : i64), ^bb16
  ^bb13(%58: i64):  // 2 preds: ^bb12, ^bb14
    %59 = builtin.unrealized_conversion_cast %58 : i64 to index
    %60 = builtin.unrealized_conversion_cast %59 : index to i64
    %61 = llvm.icmp "slt" %60, %17 : i64
    llvm.cond_br %61, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %20, %alloc_0[%47, %51, %55, %59] : memref<3x9x9x3xf32>
    %62 = llvm.add %60, %16 : i64
    %63 = builtin.unrealized_conversion_cast %62 : i64 to index
    llvm.br ^bb13(%62 : i64)
  ^bb15:  // pred: ^bb13
    %64 = llvm.add %56, %16 : i64
    %65 = builtin.unrealized_conversion_cast %64 : i64 to index
    llvm.br ^bb12(%64 : i64)
  ^bb16:  // pred: ^bb12
    %66 = llvm.add %52, %16 : i64
    %67 = builtin.unrealized_conversion_cast %66 : i64 to index
    llvm.br ^bb11(%66 : i64)
  ^bb17:  // pred: ^bb11
    %68 = llvm.add %48, %16 : i64
    %69 = builtin.unrealized_conversion_cast %68 : i64 to index
    llvm.br ^bb10(%68 : i64)
  ^bb18(%70: i64):  // 2 preds: ^bb10, ^bb29
    %71 = builtin.unrealized_conversion_cast %70 : i64 to index
    %72 = builtin.unrealized_conversion_cast %71 : index to i64
    %73 = llvm.icmp "slt" %72, %17 : i64
    llvm.cond_br %73, ^bb19(%18 : i64), ^bb30
  ^bb19(%74: i64):  // 2 preds: ^bb18, ^bb28
    %75 = builtin.unrealized_conversion_cast %74 : i64 to index
    %76 = builtin.unrealized_conversion_cast %75 : index to i64
    %77 = llvm.icmp "slt" %76, %14 : i64
    llvm.cond_br %77, ^bb20(%18 : i64), ^bb29
  ^bb20(%78: i64):  // 2 preds: ^bb19, ^bb27
    %79 = builtin.unrealized_conversion_cast %78 : i64 to index
    %80 = builtin.unrealized_conversion_cast %79 : index to i64
    %81 = llvm.icmp "slt" %80, %14 : i64
    llvm.cond_br %81, ^bb21(%18 : i64), ^bb28
  ^bb21(%82: i64):  // 2 preds: ^bb20, ^bb26
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    %84 = builtin.unrealized_conversion_cast %83 : index to i64
    %85 = llvm.icmp "slt" %84, %17 : i64
    llvm.cond_br %85, ^bb22(%18 : i64), ^bb27
  ^bb22(%86: i64):  // 2 preds: ^bb21, ^bb25
    %87 = builtin.unrealized_conversion_cast %86 : i64 to index
    %88 = builtin.unrealized_conversion_cast %87 : index to i64
    %89 = llvm.icmp "slt" %88, %13 : i64
    llvm.cond_br %89, ^bb23(%18 : i64), ^bb26
  ^bb23(%90: i64):  // 2 preds: ^bb22, ^bb24
    %91 = builtin.unrealized_conversion_cast %90 : i64 to index
    %92 = builtin.unrealized_conversion_cast %91 : index to i64
    %93 = llvm.icmp "slt" %92, %13 : i64
    llvm.cond_br %93, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %94 = llvm.add %76, %88 : i64
    %95 = builtin.unrealized_conversion_cast %94 : i64 to index
    %96 = llvm.add %80, %92 : i64
    %97 = builtin.unrealized_conversion_cast %96 : i64 to index
    %98 = memref.load %alloc[%71, %95, %97, %83] : memref<3x10x10x3xf32>
    %99 = memref.load %alloc_0[%71, %75, %79, %83] : memref<3x9x9x3xf32>
    %100 = llvm.intr.maximum(%99, %98)  : (f32, f32) -> f32
    memref.store %100, %alloc_0[%71, %75, %79, %83] : memref<3x9x9x3xf32>
    %101 = llvm.add %92, %16 : i64
    %102 = builtin.unrealized_conversion_cast %101 : i64 to index
    llvm.br ^bb23(%101 : i64)
  ^bb25:  // pred: ^bb23
    %103 = llvm.add %88, %16 : i64
    %104 = builtin.unrealized_conversion_cast %103 : i64 to index
    llvm.br ^bb22(%103 : i64)
  ^bb26:  // pred: ^bb22
    %105 = llvm.add %84, %16 : i64
    %106 = builtin.unrealized_conversion_cast %105 : i64 to index
    llvm.br ^bb21(%105 : i64)
  ^bb27:  // pred: ^bb21
    %107 = llvm.add %80, %16 : i64
    %108 = builtin.unrealized_conversion_cast %107 : i64 to index
    llvm.br ^bb20(%107 : i64)
  ^bb28:  // pred: ^bb20
    %109 = llvm.add %76, %16 : i64
    %110 = builtin.unrealized_conversion_cast %109 : i64 to index
    llvm.br ^bb19(%109 : i64)
  ^bb29:  // pred: ^bb19
    %111 = llvm.add %72, %16 : i64
    %112 = builtin.unrealized_conversion_cast %111 : i64 to index
    llvm.br ^bb18(%111 : i64)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %113 = builtin.unrealized_conversion_cast %alloc_1 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb31(%18 : i64)
  ^bb31(%114: i64):  // 2 preds: ^bb30, ^bb38
    %115 = builtin.unrealized_conversion_cast %114 : i64 to index
    %116 = builtin.unrealized_conversion_cast %115 : index to i64
    %117 = llvm.icmp "slt" %116, %17 : i64
    llvm.cond_br %117, ^bb32(%18 : i64), ^bb39
  ^bb32(%118: i64):  // 2 preds: ^bb31, ^bb37
    %119 = builtin.unrealized_conversion_cast %118 : i64 to index
    %120 = builtin.unrealized_conversion_cast %119 : index to i64
    %121 = llvm.icmp "slt" %120, %17 : i64
    llvm.cond_br %121, ^bb33(%18 : i64), ^bb38
  ^bb33(%122: i64):  // 2 preds: ^bb32, ^bb36
    %123 = builtin.unrealized_conversion_cast %122 : i64 to index
    %124 = builtin.unrealized_conversion_cast %123 : index to i64
    %125 = llvm.icmp "slt" %124, %14 : i64
    llvm.cond_br %125, ^bb34(%18 : i64), ^bb37
  ^bb34(%126: i64):  // 2 preds: ^bb33, ^bb35
    %127 = builtin.unrealized_conversion_cast %126 : i64 to index
    %128 = builtin.unrealized_conversion_cast %127 : index to i64
    %129 = llvm.icmp "slt" %128, %14 : i64
    llvm.cond_br %129, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %130 = memref.load %alloc_0[%115, %123, %127, %119] : memref<3x9x9x3xf32>
    memref.store %130, %alloc_1[%115, %119, %123, %127] : memref<3x3x9x9xf32>
    %131 = llvm.add %128, %16 : i64
    %132 = builtin.unrealized_conversion_cast %131 : i64 to index
    llvm.br ^bb34(%131 : i64)
  ^bb36:  // pred: ^bb34
    %133 = llvm.add %124, %16 : i64
    %134 = builtin.unrealized_conversion_cast %133 : i64 to index
    llvm.br ^bb33(%133 : i64)
  ^bb37:  // pred: ^bb33
    %135 = llvm.add %120, %16 : i64
    %136 = builtin.unrealized_conversion_cast %135 : i64 to index
    llvm.br ^bb32(%135 : i64)
  ^bb38:  // pred: ^bb32
    %137 = llvm.add %116, %16 : i64
    %138 = builtin.unrealized_conversion_cast %137 : i64 to index
    llvm.br ^bb31(%137 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %113 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After ConvertControlFlowToLLVMPass (convert-cf-to-llvm) //----- //
module {
  memref.global "private" constant @__constant_4xi32_0 : memref<4xi32> = dense<[0, 3, 1, 2]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_4xi32 : memref<4xi32> = dense<[0, 2, 3, 1]> {alignment = 64 : i64}
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %13 = llvm.mlir.constant(2 : index) : i64
    %14 = llvm.mlir.constant(9 : index) : i64
    %15 = llvm.mlir.constant(10 : index) : i64
    %16 = llvm.mlir.constant(1 : index) : i64
    %17 = llvm.mlir.constant(3 : index) : i64
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = builtin.unrealized_conversion_cast %18 : i64 to index
    %20 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    llvm.br ^bb1(%18 : i64)
  ^bb1(%21: i64):  // 2 preds: ^bb0, ^bb8
    %22 = builtin.unrealized_conversion_cast %21 : i64 to index
    %23 = builtin.unrealized_conversion_cast %22 : index to i64
    %24 = llvm.icmp "slt" %23, %17 : i64
    llvm.cond_br %24, ^bb2(%18 : i64), ^bb9
  ^bb2(%25: i64):  // 2 preds: ^bb1, ^bb7
    %26 = builtin.unrealized_conversion_cast %25 : i64 to index
    %27 = builtin.unrealized_conversion_cast %26 : index to i64
    %28 = llvm.icmp "slt" %27, %15 : i64
    llvm.cond_br %28, ^bb3(%18 : i64), ^bb8
  ^bb3(%29: i64):  // 2 preds: ^bb2, ^bb6
    %30 = builtin.unrealized_conversion_cast %29 : i64 to index
    %31 = builtin.unrealized_conversion_cast %30 : index to i64
    %32 = llvm.icmp "slt" %31, %15 : i64
    llvm.cond_br %32, ^bb4(%18 : i64), ^bb7
  ^bb4(%33: i64):  // 2 preds: ^bb3, ^bb5
    %34 = builtin.unrealized_conversion_cast %33 : i64 to index
    %35 = builtin.unrealized_conversion_cast %34 : index to i64
    %36 = llvm.icmp "slt" %35, %17 : i64
    llvm.cond_br %36, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %37 = memref.load %12[%22, %34, %26, %30] : memref<3x3x10x10xf32>
    memref.store %37, %alloc[%22, %26, %30, %34] : memref<3x10x10x3xf32>
    %38 = llvm.add %35, %16 : i64
    %39 = builtin.unrealized_conversion_cast %38 : i64 to index
    llvm.br ^bb4(%38 : i64)
  ^bb6:  // pred: ^bb4
    %40 = llvm.add %31, %16 : i64
    %41 = builtin.unrealized_conversion_cast %40 : i64 to index
    llvm.br ^bb3(%40 : i64)
  ^bb7:  // pred: ^bb3
    %42 = llvm.add %27, %16 : i64
    %43 = builtin.unrealized_conversion_cast %42 : i64 to index
    llvm.br ^bb2(%42 : i64)
  ^bb8:  // pred: ^bb2
    %44 = llvm.add %23, %16 : i64
    %45 = builtin.unrealized_conversion_cast %44 : i64 to index
    llvm.br ^bb1(%44 : i64)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    llvm.br ^bb10(%18 : i64)
  ^bb10(%46: i64):  // 2 preds: ^bb9, ^bb17
    %47 = builtin.unrealized_conversion_cast %46 : i64 to index
    %48 = builtin.unrealized_conversion_cast %47 : index to i64
    %49 = llvm.icmp "slt" %48, %17 : i64
    llvm.cond_br %49, ^bb11(%18 : i64), ^bb18(%18 : i64)
  ^bb11(%50: i64):  // 2 preds: ^bb10, ^bb16
    %51 = builtin.unrealized_conversion_cast %50 : i64 to index
    %52 = builtin.unrealized_conversion_cast %51 : index to i64
    %53 = llvm.icmp "slt" %52, %14 : i64
    llvm.cond_br %53, ^bb12(%18 : i64), ^bb17
  ^bb12(%54: i64):  // 2 preds: ^bb11, ^bb15
    %55 = builtin.unrealized_conversion_cast %54 : i64 to index
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = llvm.icmp "slt" %56, %14 : i64
    llvm.cond_br %57, ^bb13(%18 : i64), ^bb16
  ^bb13(%58: i64):  // 2 preds: ^bb12, ^bb14
    %59 = builtin.unrealized_conversion_cast %58 : i64 to index
    %60 = builtin.unrealized_conversion_cast %59 : index to i64
    %61 = llvm.icmp "slt" %60, %17 : i64
    llvm.cond_br %61, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %20, %alloc_0[%47, %51, %55, %59] : memref<3x9x9x3xf32>
    %62 = llvm.add %60, %16 : i64
    %63 = builtin.unrealized_conversion_cast %62 : i64 to index
    llvm.br ^bb13(%62 : i64)
  ^bb15:  // pred: ^bb13
    %64 = llvm.add %56, %16 : i64
    %65 = builtin.unrealized_conversion_cast %64 : i64 to index
    llvm.br ^bb12(%64 : i64)
  ^bb16:  // pred: ^bb12
    %66 = llvm.add %52, %16 : i64
    %67 = builtin.unrealized_conversion_cast %66 : i64 to index
    llvm.br ^bb11(%66 : i64)
  ^bb17:  // pred: ^bb11
    %68 = llvm.add %48, %16 : i64
    %69 = builtin.unrealized_conversion_cast %68 : i64 to index
    llvm.br ^bb10(%68 : i64)
  ^bb18(%70: i64):  // 2 preds: ^bb10, ^bb29
    %71 = builtin.unrealized_conversion_cast %70 : i64 to index
    %72 = builtin.unrealized_conversion_cast %71 : index to i64
    %73 = llvm.icmp "slt" %72, %17 : i64
    llvm.cond_br %73, ^bb19(%18 : i64), ^bb30
  ^bb19(%74: i64):  // 2 preds: ^bb18, ^bb28
    %75 = builtin.unrealized_conversion_cast %74 : i64 to index
    %76 = builtin.unrealized_conversion_cast %75 : index to i64
    %77 = llvm.icmp "slt" %76, %14 : i64
    llvm.cond_br %77, ^bb20(%18 : i64), ^bb29
  ^bb20(%78: i64):  // 2 preds: ^bb19, ^bb27
    %79 = builtin.unrealized_conversion_cast %78 : i64 to index
    %80 = builtin.unrealized_conversion_cast %79 : index to i64
    %81 = llvm.icmp "slt" %80, %14 : i64
    llvm.cond_br %81, ^bb21(%18 : i64), ^bb28
  ^bb21(%82: i64):  // 2 preds: ^bb20, ^bb26
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    %84 = builtin.unrealized_conversion_cast %83 : index to i64
    %85 = llvm.icmp "slt" %84, %17 : i64
    llvm.cond_br %85, ^bb22(%18 : i64), ^bb27
  ^bb22(%86: i64):  // 2 preds: ^bb21, ^bb25
    %87 = builtin.unrealized_conversion_cast %86 : i64 to index
    %88 = builtin.unrealized_conversion_cast %87 : index to i64
    %89 = llvm.icmp "slt" %88, %13 : i64
    llvm.cond_br %89, ^bb23(%18 : i64), ^bb26
  ^bb23(%90: i64):  // 2 preds: ^bb22, ^bb24
    %91 = builtin.unrealized_conversion_cast %90 : i64 to index
    %92 = builtin.unrealized_conversion_cast %91 : index to i64
    %93 = llvm.icmp "slt" %92, %13 : i64
    llvm.cond_br %93, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %94 = llvm.add %76, %88 : i64
    %95 = builtin.unrealized_conversion_cast %94 : i64 to index
    %96 = llvm.add %80, %92 : i64
    %97 = builtin.unrealized_conversion_cast %96 : i64 to index
    %98 = memref.load %alloc[%71, %95, %97, %83] : memref<3x10x10x3xf32>
    %99 = memref.load %alloc_0[%71, %75, %79, %83] : memref<3x9x9x3xf32>
    %100 = llvm.intr.maximum(%99, %98)  : (f32, f32) -> f32
    memref.store %100, %alloc_0[%71, %75, %79, %83] : memref<3x9x9x3xf32>
    %101 = llvm.add %92, %16 : i64
    %102 = builtin.unrealized_conversion_cast %101 : i64 to index
    llvm.br ^bb23(%101 : i64)
  ^bb25:  // pred: ^bb23
    %103 = llvm.add %88, %16 : i64
    %104 = builtin.unrealized_conversion_cast %103 : i64 to index
    llvm.br ^bb22(%103 : i64)
  ^bb26:  // pred: ^bb22
    %105 = llvm.add %84, %16 : i64
    %106 = builtin.unrealized_conversion_cast %105 : i64 to index
    llvm.br ^bb21(%105 : i64)
  ^bb27:  // pred: ^bb21
    %107 = llvm.add %80, %16 : i64
    %108 = builtin.unrealized_conversion_cast %107 : i64 to index
    llvm.br ^bb20(%107 : i64)
  ^bb28:  // pred: ^bb20
    %109 = llvm.add %76, %16 : i64
    %110 = builtin.unrealized_conversion_cast %109 : i64 to index
    llvm.br ^bb19(%109 : i64)
  ^bb29:  // pred: ^bb19
    %111 = llvm.add %72, %16 : i64
    %112 = builtin.unrealized_conversion_cast %111 : i64 to index
    llvm.br ^bb18(%111 : i64)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %113 = builtin.unrealized_conversion_cast %alloc_1 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb31(%18 : i64)
  ^bb31(%114: i64):  // 2 preds: ^bb30, ^bb38
    %115 = builtin.unrealized_conversion_cast %114 : i64 to index
    %116 = builtin.unrealized_conversion_cast %115 : index to i64
    %117 = llvm.icmp "slt" %116, %17 : i64
    llvm.cond_br %117, ^bb32(%18 : i64), ^bb39
  ^bb32(%118: i64):  // 2 preds: ^bb31, ^bb37
    %119 = builtin.unrealized_conversion_cast %118 : i64 to index
    %120 = builtin.unrealized_conversion_cast %119 : index to i64
    %121 = llvm.icmp "slt" %120, %17 : i64
    llvm.cond_br %121, ^bb33(%18 : i64), ^bb38
  ^bb33(%122: i64):  // 2 preds: ^bb32, ^bb36
    %123 = builtin.unrealized_conversion_cast %122 : i64 to index
    %124 = builtin.unrealized_conversion_cast %123 : index to i64
    %125 = llvm.icmp "slt" %124, %14 : i64
    llvm.cond_br %125, ^bb34(%18 : i64), ^bb37
  ^bb34(%126: i64):  // 2 preds: ^bb33, ^bb35
    %127 = builtin.unrealized_conversion_cast %126 : i64 to index
    %128 = builtin.unrealized_conversion_cast %127 : index to i64
    %129 = llvm.icmp "slt" %128, %14 : i64
    llvm.cond_br %129, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %130 = memref.load %alloc_0[%115, %123, %127, %119] : memref<3x9x9x3xf32>
    memref.store %130, %alloc_1[%115, %119, %123, %127] : memref<3x3x9x9xf32>
    %131 = llvm.add %128, %16 : i64
    %132 = builtin.unrealized_conversion_cast %131 : i64 to index
    llvm.br ^bb34(%131 : i64)
  ^bb36:  // pred: ^bb34
    %133 = llvm.add %124, %16 : i64
    %134 = builtin.unrealized_conversion_cast %133 : i64 to index
    llvm.br ^bb33(%133 : i64)
  ^bb37:  // pred: ^bb33
    %135 = llvm.add %120, %16 : i64
    %136 = builtin.unrealized_conversion_cast %135 : i64 to index
    llvm.br ^bb32(%135 : i64)
  ^bb38:  // pred: ^bb32
    %137 = llvm.add %116, %16 : i64
    %138 = builtin.unrealized_conversion_cast %137 : i64 to index
    llvm.br ^bb31(%137 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %113 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_4xi32_0(dense<[0, 3, 1, 2]> : tensor<4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<4 x i32>
  llvm.mlir.global private constant @__constant_4xi32(dense<[0, 2, 3, 1]> : tensor<4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<4 x i32>
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %13 = llvm.mlir.constant(2 : index) : i64
    %14 = llvm.mlir.constant(9 : index) : i64
    %15 = llvm.mlir.constant(10 : index) : i64
    %16 = llvm.mlir.constant(1 : index) : i64
    %17 = llvm.mlir.constant(3 : index) : i64
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = builtin.unrealized_conversion_cast %18 : i64 to index
    %20 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %21 = llvm.mlir.constant(3 : index) : i64
    %22 = llvm.mlir.constant(10 : index) : i64
    %23 = llvm.mlir.constant(10 : index) : i64
    %24 = llvm.mlir.constant(3 : index) : i64
    %25 = llvm.mlir.constant(1 : index) : i64
    %26 = llvm.mlir.constant(30 : index) : i64
    %27 = llvm.mlir.constant(300 : index) : i64
    %28 = llvm.mlir.constant(900 : index) : i64
    %29 = llvm.mlir.zero : !llvm.ptr
    %30 = llvm.getelementptr %29[%28] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %31 = llvm.ptrtoint %30 : !llvm.ptr to i64
    %32 = llvm.mlir.constant(64 : index) : i64
    %33 = llvm.add %31, %32 : i64
    %34 = llvm.call @malloc(%33) : (i64) -> !llvm.ptr
    %35 = llvm.ptrtoint %34 : !llvm.ptr to i64
    %36 = llvm.mlir.constant(1 : index) : i64
    %37 = llvm.sub %32, %36 : i64
    %38 = llvm.add %35, %37 : i64
    %39 = llvm.urem %38, %32  : i64
    %40 = llvm.sub %38, %39 : i64
    %41 = llvm.inttoptr %40 : i64 to !llvm.ptr
    %42 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %43 = llvm.insertvalue %34, %42[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.insertvalue %41, %43[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.mlir.constant(0 : index) : i64
    %46 = llvm.insertvalue %45, %44[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %21, %46[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %22, %47[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %23, %48[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %24, %49[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %27, %50[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.insertvalue %26, %51[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %53 = llvm.insertvalue %24, %52[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %54 = llvm.insertvalue %25, %53[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%18 : i64)
  ^bb1(%55: i64):  // 2 preds: ^bb0, ^bb8
    %56 = builtin.unrealized_conversion_cast %55 : i64 to index
    %57 = builtin.unrealized_conversion_cast %56 : index to i64
    %58 = llvm.icmp "slt" %57, %17 : i64
    llvm.cond_br %58, ^bb2(%18 : i64), ^bb9
  ^bb2(%59: i64):  // 2 preds: ^bb1, ^bb7
    %60 = builtin.unrealized_conversion_cast %59 : i64 to index
    %61 = builtin.unrealized_conversion_cast %60 : index to i64
    %62 = llvm.icmp "slt" %61, %15 : i64
    llvm.cond_br %62, ^bb3(%18 : i64), ^bb8
  ^bb3(%63: i64):  // 2 preds: ^bb2, ^bb6
    %64 = builtin.unrealized_conversion_cast %63 : i64 to index
    %65 = builtin.unrealized_conversion_cast %64 : index to i64
    %66 = llvm.icmp "slt" %65, %15 : i64
    llvm.cond_br %66, ^bb4(%18 : i64), ^bb7
  ^bb4(%67: i64):  // 2 preds: ^bb3, ^bb5
    %68 = builtin.unrealized_conversion_cast %67 : i64 to index
    %69 = builtin.unrealized_conversion_cast %68 : index to i64
    %70 = llvm.icmp "slt" %69, %17 : i64
    llvm.cond_br %70, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %71 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %72 = llvm.mlir.constant(300 : index) : i64
    %73 = llvm.mul %55, %72 : i64
    %74 = llvm.mlir.constant(100 : index) : i64
    %75 = llvm.mul %67, %74 : i64
    %76 = llvm.add %73, %75 : i64
    %77 = llvm.mlir.constant(10 : index) : i64
    %78 = llvm.mul %59, %77 : i64
    %79 = llvm.add %76, %78 : i64
    %80 = llvm.add %79, %63 : i64
    %81 = llvm.getelementptr %71[%80] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %82 = llvm.load %81 : !llvm.ptr -> f32
    %83 = llvm.extractvalue %54[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %84 = llvm.mlir.constant(300 : index) : i64
    %85 = llvm.mul %55, %84 : i64
    %86 = llvm.mlir.constant(30 : index) : i64
    %87 = llvm.mul %59, %86 : i64
    %88 = llvm.add %85, %87 : i64
    %89 = llvm.mlir.constant(3 : index) : i64
    %90 = llvm.mul %63, %89 : i64
    %91 = llvm.add %88, %90 : i64
    %92 = llvm.add %91, %67 : i64
    %93 = llvm.getelementptr %83[%92] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %82, %93 : f32, !llvm.ptr
    %94 = llvm.add %69, %16 : i64
    %95 = builtin.unrealized_conversion_cast %94 : i64 to index
    llvm.br ^bb4(%94 : i64)
  ^bb6:  // pred: ^bb4
    %96 = llvm.add %65, %16 : i64
    %97 = builtin.unrealized_conversion_cast %96 : i64 to index
    llvm.br ^bb3(%96 : i64)
  ^bb7:  // pred: ^bb3
    %98 = llvm.add %61, %16 : i64
    %99 = builtin.unrealized_conversion_cast %98 : i64 to index
    llvm.br ^bb2(%98 : i64)
  ^bb8:  // pred: ^bb2
    %100 = llvm.add %57, %16 : i64
    %101 = builtin.unrealized_conversion_cast %100 : i64 to index
    llvm.br ^bb1(%100 : i64)
  ^bb9:  // pred: ^bb1
    %102 = llvm.mlir.constant(3 : index) : i64
    %103 = llvm.mlir.constant(9 : index) : i64
    %104 = llvm.mlir.constant(9 : index) : i64
    %105 = llvm.mlir.constant(3 : index) : i64
    %106 = llvm.mlir.constant(1 : index) : i64
    %107 = llvm.mlir.constant(27 : index) : i64
    %108 = llvm.mlir.constant(243 : index) : i64
    %109 = llvm.mlir.constant(729 : index) : i64
    %110 = llvm.mlir.zero : !llvm.ptr
    %111 = llvm.getelementptr %110[%109] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %112 = llvm.ptrtoint %111 : !llvm.ptr to i64
    %113 = llvm.mlir.constant(64 : index) : i64
    %114 = llvm.add %112, %113 : i64
    %115 = llvm.call @malloc(%114) : (i64) -> !llvm.ptr
    %116 = llvm.ptrtoint %115 : !llvm.ptr to i64
    %117 = llvm.mlir.constant(1 : index) : i64
    %118 = llvm.sub %113, %117 : i64
    %119 = llvm.add %116, %118 : i64
    %120 = llvm.urem %119, %113  : i64
    %121 = llvm.sub %119, %120 : i64
    %122 = llvm.inttoptr %121 : i64 to !llvm.ptr
    %123 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %124 = llvm.insertvalue %115, %123[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %125 = llvm.insertvalue %122, %124[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %126 = llvm.mlir.constant(0 : index) : i64
    %127 = llvm.insertvalue %126, %125[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %128 = llvm.insertvalue %102, %127[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %129 = llvm.insertvalue %103, %128[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %130 = llvm.insertvalue %104, %129[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.insertvalue %105, %130[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %132 = llvm.insertvalue %108, %131[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %133 = llvm.insertvalue %107, %132[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %134 = llvm.insertvalue %105, %133[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %135 = llvm.insertvalue %106, %134[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%18 : i64)
  ^bb10(%136: i64):  // 2 preds: ^bb9, ^bb17
    %137 = builtin.unrealized_conversion_cast %136 : i64 to index
    %138 = builtin.unrealized_conversion_cast %137 : index to i64
    %139 = llvm.icmp "slt" %138, %17 : i64
    llvm.cond_br %139, ^bb11(%18 : i64), ^bb18(%18 : i64)
  ^bb11(%140: i64):  // 2 preds: ^bb10, ^bb16
    %141 = builtin.unrealized_conversion_cast %140 : i64 to index
    %142 = builtin.unrealized_conversion_cast %141 : index to i64
    %143 = llvm.icmp "slt" %142, %14 : i64
    llvm.cond_br %143, ^bb12(%18 : i64), ^bb17
  ^bb12(%144: i64):  // 2 preds: ^bb11, ^bb15
    %145 = builtin.unrealized_conversion_cast %144 : i64 to index
    %146 = builtin.unrealized_conversion_cast %145 : index to i64
    %147 = llvm.icmp "slt" %146, %14 : i64
    llvm.cond_br %147, ^bb13(%18 : i64), ^bb16
  ^bb13(%148: i64):  // 2 preds: ^bb12, ^bb14
    %149 = builtin.unrealized_conversion_cast %148 : i64 to index
    %150 = builtin.unrealized_conversion_cast %149 : index to i64
    %151 = llvm.icmp "slt" %150, %17 : i64
    llvm.cond_br %151, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %152 = llvm.extractvalue %135[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %153 = llvm.mlir.constant(243 : index) : i64
    %154 = llvm.mul %136, %153 : i64
    %155 = llvm.mlir.constant(27 : index) : i64
    %156 = llvm.mul %140, %155 : i64
    %157 = llvm.add %154, %156 : i64
    %158 = llvm.mlir.constant(3 : index) : i64
    %159 = llvm.mul %144, %158 : i64
    %160 = llvm.add %157, %159 : i64
    %161 = llvm.add %160, %148 : i64
    %162 = llvm.getelementptr %152[%161] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %20, %162 : f32, !llvm.ptr
    %163 = llvm.add %150, %16 : i64
    %164 = builtin.unrealized_conversion_cast %163 : i64 to index
    llvm.br ^bb13(%163 : i64)
  ^bb15:  // pred: ^bb13
    %165 = llvm.add %146, %16 : i64
    %166 = builtin.unrealized_conversion_cast %165 : i64 to index
    llvm.br ^bb12(%165 : i64)
  ^bb16:  // pred: ^bb12
    %167 = llvm.add %142, %16 : i64
    %168 = builtin.unrealized_conversion_cast %167 : i64 to index
    llvm.br ^bb11(%167 : i64)
  ^bb17:  // pred: ^bb11
    %169 = llvm.add %138, %16 : i64
    %170 = builtin.unrealized_conversion_cast %169 : i64 to index
    llvm.br ^bb10(%169 : i64)
  ^bb18(%171: i64):  // 2 preds: ^bb10, ^bb29
    %172 = builtin.unrealized_conversion_cast %171 : i64 to index
    %173 = builtin.unrealized_conversion_cast %172 : index to i64
    %174 = llvm.icmp "slt" %173, %17 : i64
    llvm.cond_br %174, ^bb19(%18 : i64), ^bb30
  ^bb19(%175: i64):  // 2 preds: ^bb18, ^bb28
    %176 = builtin.unrealized_conversion_cast %175 : i64 to index
    %177 = builtin.unrealized_conversion_cast %176 : index to i64
    %178 = llvm.icmp "slt" %177, %14 : i64
    llvm.cond_br %178, ^bb20(%18 : i64), ^bb29
  ^bb20(%179: i64):  // 2 preds: ^bb19, ^bb27
    %180 = builtin.unrealized_conversion_cast %179 : i64 to index
    %181 = builtin.unrealized_conversion_cast %180 : index to i64
    %182 = llvm.icmp "slt" %181, %14 : i64
    llvm.cond_br %182, ^bb21(%18 : i64), ^bb28
  ^bb21(%183: i64):  // 2 preds: ^bb20, ^bb26
    %184 = builtin.unrealized_conversion_cast %183 : i64 to index
    %185 = builtin.unrealized_conversion_cast %184 : index to i64
    %186 = llvm.icmp "slt" %185, %17 : i64
    llvm.cond_br %186, ^bb22(%18 : i64), ^bb27
  ^bb22(%187: i64):  // 2 preds: ^bb21, ^bb25
    %188 = builtin.unrealized_conversion_cast %187 : i64 to index
    %189 = builtin.unrealized_conversion_cast %188 : index to i64
    %190 = llvm.icmp "slt" %189, %13 : i64
    llvm.cond_br %190, ^bb23(%18 : i64), ^bb26
  ^bb23(%191: i64):  // 2 preds: ^bb22, ^bb24
    %192 = builtin.unrealized_conversion_cast %191 : i64 to index
    %193 = builtin.unrealized_conversion_cast %192 : index to i64
    %194 = llvm.icmp "slt" %193, %13 : i64
    llvm.cond_br %194, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %195 = llvm.add %177, %189 : i64
    %196 = builtin.unrealized_conversion_cast %195 : i64 to index
    %197 = llvm.add %181, %193 : i64
    %198 = builtin.unrealized_conversion_cast %197 : i64 to index
    %199 = llvm.extractvalue %54[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %200 = llvm.mlir.constant(300 : index) : i64
    %201 = llvm.mul %171, %200 : i64
    %202 = llvm.mlir.constant(30 : index) : i64
    %203 = llvm.mul %195, %202 : i64
    %204 = llvm.add %201, %203 : i64
    %205 = llvm.mlir.constant(3 : index) : i64
    %206 = llvm.mul %197, %205 : i64
    %207 = llvm.add %204, %206 : i64
    %208 = llvm.add %207, %183 : i64
    %209 = llvm.getelementptr %199[%208] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %210 = llvm.load %209 : !llvm.ptr -> f32
    %211 = llvm.extractvalue %135[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %212 = llvm.mlir.constant(243 : index) : i64
    %213 = llvm.mul %171, %212 : i64
    %214 = llvm.mlir.constant(27 : index) : i64
    %215 = llvm.mul %175, %214 : i64
    %216 = llvm.add %213, %215 : i64
    %217 = llvm.mlir.constant(3 : index) : i64
    %218 = llvm.mul %179, %217 : i64
    %219 = llvm.add %216, %218 : i64
    %220 = llvm.add %219, %183 : i64
    %221 = llvm.getelementptr %211[%220] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %222 = llvm.load %221 : !llvm.ptr -> f32
    %223 = llvm.intr.maximum(%222, %210)  : (f32, f32) -> f32
    %224 = llvm.extractvalue %135[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %225 = llvm.mlir.constant(243 : index) : i64
    %226 = llvm.mul %171, %225 : i64
    %227 = llvm.mlir.constant(27 : index) : i64
    %228 = llvm.mul %175, %227 : i64
    %229 = llvm.add %226, %228 : i64
    %230 = llvm.mlir.constant(3 : index) : i64
    %231 = llvm.mul %179, %230 : i64
    %232 = llvm.add %229, %231 : i64
    %233 = llvm.add %232, %183 : i64
    %234 = llvm.getelementptr %224[%233] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %223, %234 : f32, !llvm.ptr
    %235 = llvm.add %193, %16 : i64
    %236 = builtin.unrealized_conversion_cast %235 : i64 to index
    llvm.br ^bb23(%235 : i64)
  ^bb25:  // pred: ^bb23
    %237 = llvm.add %189, %16 : i64
    %238 = builtin.unrealized_conversion_cast %237 : i64 to index
    llvm.br ^bb22(%237 : i64)
  ^bb26:  // pred: ^bb22
    %239 = llvm.add %185, %16 : i64
    %240 = builtin.unrealized_conversion_cast %239 : i64 to index
    llvm.br ^bb21(%239 : i64)
  ^bb27:  // pred: ^bb21
    %241 = llvm.add %181, %16 : i64
    %242 = builtin.unrealized_conversion_cast %241 : i64 to index
    llvm.br ^bb20(%241 : i64)
  ^bb28:  // pred: ^bb20
    %243 = llvm.add %177, %16 : i64
    %244 = builtin.unrealized_conversion_cast %243 : i64 to index
    llvm.br ^bb19(%243 : i64)
  ^bb29:  // pred: ^bb19
    %245 = llvm.add %173, %16 : i64
    %246 = builtin.unrealized_conversion_cast %245 : i64 to index
    llvm.br ^bb18(%245 : i64)
  ^bb30:  // pred: ^bb18
    %247 = llvm.mlir.constant(3 : index) : i64
    %248 = llvm.mlir.constant(3 : index) : i64
    %249 = llvm.mlir.constant(9 : index) : i64
    %250 = llvm.mlir.constant(9 : index) : i64
    %251 = llvm.mlir.constant(1 : index) : i64
    %252 = llvm.mlir.constant(81 : index) : i64
    %253 = llvm.mlir.constant(243 : index) : i64
    %254 = llvm.mlir.constant(729 : index) : i64
    %255 = llvm.mlir.zero : !llvm.ptr
    %256 = llvm.getelementptr %255[%254] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %257 = llvm.ptrtoint %256 : !llvm.ptr to i64
    %258 = llvm.mlir.constant(64 : index) : i64
    %259 = llvm.add %257, %258 : i64
    %260 = llvm.call @malloc(%259) : (i64) -> !llvm.ptr
    %261 = llvm.ptrtoint %260 : !llvm.ptr to i64
    %262 = llvm.mlir.constant(1 : index) : i64
    %263 = llvm.sub %258, %262 : i64
    %264 = llvm.add %261, %263 : i64
    %265 = llvm.urem %264, %258  : i64
    %266 = llvm.sub %264, %265 : i64
    %267 = llvm.inttoptr %266 : i64 to !llvm.ptr
    %268 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %269 = llvm.insertvalue %260, %268[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %270 = llvm.insertvalue %267, %269[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %271 = llvm.mlir.constant(0 : index) : i64
    %272 = llvm.insertvalue %271, %270[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %273 = llvm.insertvalue %247, %272[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %274 = llvm.insertvalue %248, %273[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %275 = llvm.insertvalue %249, %274[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %276 = llvm.insertvalue %250, %275[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %277 = llvm.insertvalue %253, %276[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %278 = llvm.insertvalue %252, %277[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %279 = llvm.insertvalue %250, %278[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %280 = llvm.insertvalue %251, %279[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %281 = builtin.unrealized_conversion_cast %280 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x9x9xf32>
    %282 = builtin.unrealized_conversion_cast %281 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb31(%18 : i64)
  ^bb31(%283: i64):  // 2 preds: ^bb30, ^bb38
    %284 = builtin.unrealized_conversion_cast %283 : i64 to index
    %285 = builtin.unrealized_conversion_cast %284 : index to i64
    %286 = llvm.icmp "slt" %285, %17 : i64
    llvm.cond_br %286, ^bb32(%18 : i64), ^bb39
  ^bb32(%287: i64):  // 2 preds: ^bb31, ^bb37
    %288 = builtin.unrealized_conversion_cast %287 : i64 to index
    %289 = builtin.unrealized_conversion_cast %288 : index to i64
    %290 = llvm.icmp "slt" %289, %17 : i64
    llvm.cond_br %290, ^bb33(%18 : i64), ^bb38
  ^bb33(%291: i64):  // 2 preds: ^bb32, ^bb36
    %292 = builtin.unrealized_conversion_cast %291 : i64 to index
    %293 = builtin.unrealized_conversion_cast %292 : index to i64
    %294 = llvm.icmp "slt" %293, %14 : i64
    llvm.cond_br %294, ^bb34(%18 : i64), ^bb37
  ^bb34(%295: i64):  // 2 preds: ^bb33, ^bb35
    %296 = builtin.unrealized_conversion_cast %295 : i64 to index
    %297 = builtin.unrealized_conversion_cast %296 : index to i64
    %298 = llvm.icmp "slt" %297, %14 : i64
    llvm.cond_br %298, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %299 = llvm.extractvalue %135[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %300 = llvm.mlir.constant(243 : index) : i64
    %301 = llvm.mul %283, %300 : i64
    %302 = llvm.mlir.constant(27 : index) : i64
    %303 = llvm.mul %291, %302 : i64
    %304 = llvm.add %301, %303 : i64
    %305 = llvm.mlir.constant(3 : index) : i64
    %306 = llvm.mul %295, %305 : i64
    %307 = llvm.add %304, %306 : i64
    %308 = llvm.add %307, %287 : i64
    %309 = llvm.getelementptr %299[%308] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %310 = llvm.load %309 : !llvm.ptr -> f32
    %311 = llvm.extractvalue %280[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %312 = llvm.mlir.constant(243 : index) : i64
    %313 = llvm.mul %283, %312 : i64
    %314 = llvm.mlir.constant(81 : index) : i64
    %315 = llvm.mul %287, %314 : i64
    %316 = llvm.add %313, %315 : i64
    %317 = llvm.mlir.constant(9 : index) : i64
    %318 = llvm.mul %291, %317 : i64
    %319 = llvm.add %316, %318 : i64
    %320 = llvm.add %319, %295 : i64
    %321 = llvm.getelementptr %311[%320] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %310, %321 : f32, !llvm.ptr
    %322 = llvm.add %297, %16 : i64
    %323 = builtin.unrealized_conversion_cast %322 : i64 to index
    llvm.br ^bb34(%322 : i64)
  ^bb36:  // pred: ^bb34
    %324 = llvm.add %293, %16 : i64
    %325 = builtin.unrealized_conversion_cast %324 : i64 to index
    llvm.br ^bb33(%324 : i64)
  ^bb37:  // pred: ^bb33
    %326 = llvm.add %289, %16 : i64
    %327 = builtin.unrealized_conversion_cast %326 : i64 to index
    llvm.br ^bb32(%326 : i64)
  ^bb38:  // pred: ^bb32
    %328 = llvm.add %285, %16 : i64
    %329 = builtin.unrealized_conversion_cast %328 : i64 to index
    llvm.br ^bb31(%328 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %282 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_4xi32_0(dense<[0, 3, 1, 2]> : tensor<4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<4 x i32>
  llvm.mlir.global private constant @__constant_4xi32(dense<[0, 2, 3, 1]> : tensor<4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<4 x i32>
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.mlir.constant(2 : index) : i64
    %13 = llvm.mlir.constant(9 : index) : i64
    %14 = llvm.mlir.constant(10 : index) : i64
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.mlir.constant(3 : index) : i64
    %17 = llvm.mlir.constant(0 : index) : i64
    %18 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %19 = llvm.mlir.constant(3 : index) : i64
    %20 = llvm.mlir.constant(10 : index) : i64
    %21 = llvm.mlir.constant(10 : index) : i64
    %22 = llvm.mlir.constant(3 : index) : i64
    %23 = llvm.mlir.constant(1 : index) : i64
    %24 = llvm.mlir.constant(30 : index) : i64
    %25 = llvm.mlir.constant(300 : index) : i64
    %26 = llvm.mlir.constant(900 : index) : i64
    %27 = llvm.mlir.zero : !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %30 = llvm.mlir.constant(64 : index) : i64
    %31 = llvm.add %29, %30 : i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.sub %30, %34 : i64
    %36 = llvm.add %33, %35 : i64
    %37 = llvm.urem %36, %30  : i64
    %38 = llvm.sub %36, %37 : i64
    %39 = llvm.inttoptr %38 : i64 to !llvm.ptr
    %40 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %41 = llvm.insertvalue %32, %40[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %39, %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.mlir.constant(0 : index) : i64
    %44 = llvm.insertvalue %43, %42[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %19, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %20, %45[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %21, %46[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %22, %47[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %25, %48[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %24, %49[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %22, %50[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.insertvalue %23, %51[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%17 : i64)
  ^bb1(%53: i64):  // 2 preds: ^bb0, ^bb8
    %54 = llvm.icmp "slt" %53, %16 : i64
    llvm.cond_br %54, ^bb2(%17 : i64), ^bb9
  ^bb2(%55: i64):  // 2 preds: ^bb1, ^bb7
    %56 = llvm.icmp "slt" %55, %14 : i64
    llvm.cond_br %56, ^bb3(%17 : i64), ^bb8
  ^bb3(%57: i64):  // 2 preds: ^bb2, ^bb6
    %58 = llvm.icmp "slt" %57, %14 : i64
    llvm.cond_br %58, ^bb4(%17 : i64), ^bb7
  ^bb4(%59: i64):  // 2 preds: ^bb3, ^bb5
    %60 = llvm.icmp "slt" %59, %16 : i64
    llvm.cond_br %60, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %61 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.mlir.constant(300 : index) : i64
    %63 = llvm.mul %53, %62 : i64
    %64 = llvm.mlir.constant(100 : index) : i64
    %65 = llvm.mul %59, %64 : i64
    %66 = llvm.add %63, %65 : i64
    %67 = llvm.mlir.constant(10 : index) : i64
    %68 = llvm.mul %55, %67 : i64
    %69 = llvm.add %66, %68 : i64
    %70 = llvm.add %69, %57 : i64
    %71 = llvm.getelementptr %61[%70] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %72 = llvm.load %71 : !llvm.ptr -> f32
    %73 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %74 = llvm.mlir.constant(300 : index) : i64
    %75 = llvm.mul %53, %74 : i64
    %76 = llvm.mlir.constant(30 : index) : i64
    %77 = llvm.mul %55, %76 : i64
    %78 = llvm.add %75, %77 : i64
    %79 = llvm.mlir.constant(3 : index) : i64
    %80 = llvm.mul %57, %79 : i64
    %81 = llvm.add %78, %80 : i64
    %82 = llvm.add %81, %59 : i64
    %83 = llvm.getelementptr %73[%82] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %72, %83 : f32, !llvm.ptr
    %84 = llvm.add %59, %15 : i64
    llvm.br ^bb4(%84 : i64)
  ^bb6:  // pred: ^bb4
    %85 = llvm.add %57, %15 : i64
    llvm.br ^bb3(%85 : i64)
  ^bb7:  // pred: ^bb3
    %86 = llvm.add %55, %15 : i64
    llvm.br ^bb2(%86 : i64)
  ^bb8:  // pred: ^bb2
    %87 = llvm.add %53, %15 : i64
    llvm.br ^bb1(%87 : i64)
  ^bb9:  // pred: ^bb1
    %88 = llvm.mlir.constant(3 : index) : i64
    %89 = llvm.mlir.constant(9 : index) : i64
    %90 = llvm.mlir.constant(9 : index) : i64
    %91 = llvm.mlir.constant(3 : index) : i64
    %92 = llvm.mlir.constant(1 : index) : i64
    %93 = llvm.mlir.constant(27 : index) : i64
    %94 = llvm.mlir.constant(243 : index) : i64
    %95 = llvm.mlir.constant(729 : index) : i64
    %96 = llvm.mlir.zero : !llvm.ptr
    %97 = llvm.getelementptr %96[%95] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %98 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %99 = llvm.mlir.constant(64 : index) : i64
    %100 = llvm.add %98, %99 : i64
    %101 = llvm.call @malloc(%100) : (i64) -> !llvm.ptr
    %102 = llvm.ptrtoint %101 : !llvm.ptr to i64
    %103 = llvm.mlir.constant(1 : index) : i64
    %104 = llvm.sub %99, %103 : i64
    %105 = llvm.add %102, %104 : i64
    %106 = llvm.urem %105, %99  : i64
    %107 = llvm.sub %105, %106 : i64
    %108 = llvm.inttoptr %107 : i64 to !llvm.ptr
    %109 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %110 = llvm.insertvalue %101, %109[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %111 = llvm.insertvalue %108, %110[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %112 = llvm.mlir.constant(0 : index) : i64
    %113 = llvm.insertvalue %112, %111[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %114 = llvm.insertvalue %88, %113[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %115 = llvm.insertvalue %89, %114[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %116 = llvm.insertvalue %90, %115[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.insertvalue %91, %116[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %118 = llvm.insertvalue %94, %117[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %119 = llvm.insertvalue %93, %118[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %120 = llvm.insertvalue %91, %119[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %121 = llvm.insertvalue %92, %120[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%17 : i64)
  ^bb10(%122: i64):  // 2 preds: ^bb9, ^bb17
    %123 = llvm.icmp "slt" %122, %16 : i64
    llvm.cond_br %123, ^bb11(%17 : i64), ^bb18(%17 : i64)
  ^bb11(%124: i64):  // 2 preds: ^bb10, ^bb16
    %125 = llvm.icmp "slt" %124, %13 : i64
    llvm.cond_br %125, ^bb12(%17 : i64), ^bb17
  ^bb12(%126: i64):  // 2 preds: ^bb11, ^bb15
    %127 = llvm.icmp "slt" %126, %13 : i64
    llvm.cond_br %127, ^bb13(%17 : i64), ^bb16
  ^bb13(%128: i64):  // 2 preds: ^bb12, ^bb14
    %129 = llvm.icmp "slt" %128, %16 : i64
    llvm.cond_br %129, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %130 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.mlir.constant(243 : index) : i64
    %132 = llvm.mul %122, %131 : i64
    %133 = llvm.mlir.constant(27 : index) : i64
    %134 = llvm.mul %124, %133 : i64
    %135 = llvm.add %132, %134 : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mul %126, %136 : i64
    %138 = llvm.add %135, %137 : i64
    %139 = llvm.add %138, %128 : i64
    %140 = llvm.getelementptr %130[%139] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %18, %140 : f32, !llvm.ptr
    %141 = llvm.add %128, %15 : i64
    llvm.br ^bb13(%141 : i64)
  ^bb15:  // pred: ^bb13
    %142 = llvm.add %126, %15 : i64
    llvm.br ^bb12(%142 : i64)
  ^bb16:  // pred: ^bb12
    %143 = llvm.add %124, %15 : i64
    llvm.br ^bb11(%143 : i64)
  ^bb17:  // pred: ^bb11
    %144 = llvm.add %122, %15 : i64
    llvm.br ^bb10(%144 : i64)
  ^bb18(%145: i64):  // 2 preds: ^bb10, ^bb29
    %146 = llvm.icmp "slt" %145, %16 : i64
    llvm.cond_br %146, ^bb19(%17 : i64), ^bb30
  ^bb19(%147: i64):  // 2 preds: ^bb18, ^bb28
    %148 = llvm.icmp "slt" %147, %13 : i64
    llvm.cond_br %148, ^bb20(%17 : i64), ^bb29
  ^bb20(%149: i64):  // 2 preds: ^bb19, ^bb27
    %150 = llvm.icmp "slt" %149, %13 : i64
    llvm.cond_br %150, ^bb21(%17 : i64), ^bb28
  ^bb21(%151: i64):  // 2 preds: ^bb20, ^bb26
    %152 = llvm.icmp "slt" %151, %16 : i64
    llvm.cond_br %152, ^bb22(%17 : i64), ^bb27
  ^bb22(%153: i64):  // 2 preds: ^bb21, ^bb25
    %154 = llvm.icmp "slt" %153, %12 : i64
    llvm.cond_br %154, ^bb23(%17 : i64), ^bb26
  ^bb23(%155: i64):  // 2 preds: ^bb22, ^bb24
    %156 = llvm.icmp "slt" %155, %12 : i64
    llvm.cond_br %156, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %157 = llvm.add %147, %153 : i64
    %158 = llvm.add %149, %155 : i64
    %159 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %160 = llvm.mlir.constant(300 : index) : i64
    %161 = llvm.mul %145, %160 : i64
    %162 = llvm.mlir.constant(30 : index) : i64
    %163 = llvm.mul %157, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mul %158, %165 : i64
    %167 = llvm.add %164, %166 : i64
    %168 = llvm.add %167, %151 : i64
    %169 = llvm.getelementptr %159[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %170 = llvm.load %169 : !llvm.ptr -> f32
    %171 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %172 = llvm.mlir.constant(243 : index) : i64
    %173 = llvm.mul %145, %172 : i64
    %174 = llvm.mlir.constant(27 : index) : i64
    %175 = llvm.mul %147, %174 : i64
    %176 = llvm.add %173, %175 : i64
    %177 = llvm.mlir.constant(3 : index) : i64
    %178 = llvm.mul %149, %177 : i64
    %179 = llvm.add %176, %178 : i64
    %180 = llvm.add %179, %151 : i64
    %181 = llvm.getelementptr %171[%180] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %182 = llvm.load %181 : !llvm.ptr -> f32
    %183 = llvm.intr.maximum(%182, %170)  : (f32, f32) -> f32
    %184 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %185 = llvm.mlir.constant(243 : index) : i64
    %186 = llvm.mul %145, %185 : i64
    %187 = llvm.mlir.constant(27 : index) : i64
    %188 = llvm.mul %147, %187 : i64
    %189 = llvm.add %186, %188 : i64
    %190 = llvm.mlir.constant(3 : index) : i64
    %191 = llvm.mul %149, %190 : i64
    %192 = llvm.add %189, %191 : i64
    %193 = llvm.add %192, %151 : i64
    %194 = llvm.getelementptr %184[%193] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %183, %194 : f32, !llvm.ptr
    %195 = llvm.add %155, %15 : i64
    llvm.br ^bb23(%195 : i64)
  ^bb25:  // pred: ^bb23
    %196 = llvm.add %153, %15 : i64
    llvm.br ^bb22(%196 : i64)
  ^bb26:  // pred: ^bb22
    %197 = llvm.add %151, %15 : i64
    llvm.br ^bb21(%197 : i64)
  ^bb27:  // pred: ^bb21
    %198 = llvm.add %149, %15 : i64
    llvm.br ^bb20(%198 : i64)
  ^bb28:  // pred: ^bb20
    %199 = llvm.add %147, %15 : i64
    llvm.br ^bb19(%199 : i64)
  ^bb29:  // pred: ^bb19
    %200 = llvm.add %145, %15 : i64
    llvm.br ^bb18(%200 : i64)
  ^bb30:  // pred: ^bb18
    %201 = llvm.mlir.constant(3 : index) : i64
    %202 = llvm.mlir.constant(3 : index) : i64
    %203 = llvm.mlir.constant(9 : index) : i64
    %204 = llvm.mlir.constant(9 : index) : i64
    %205 = llvm.mlir.constant(1 : index) : i64
    %206 = llvm.mlir.constant(81 : index) : i64
    %207 = llvm.mlir.constant(243 : index) : i64
    %208 = llvm.mlir.constant(729 : index) : i64
    %209 = llvm.mlir.zero : !llvm.ptr
    %210 = llvm.getelementptr %209[%208] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %211 = llvm.ptrtoint %210 : !llvm.ptr to i64
    %212 = llvm.mlir.constant(64 : index) : i64
    %213 = llvm.add %211, %212 : i64
    %214 = llvm.call @malloc(%213) : (i64) -> !llvm.ptr
    %215 = llvm.ptrtoint %214 : !llvm.ptr to i64
    %216 = llvm.mlir.constant(1 : index) : i64
    %217 = llvm.sub %212, %216 : i64
    %218 = llvm.add %215, %217 : i64
    %219 = llvm.urem %218, %212  : i64
    %220 = llvm.sub %218, %219 : i64
    %221 = llvm.inttoptr %220 : i64 to !llvm.ptr
    %222 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %223 = llvm.insertvalue %214, %222[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %224 = llvm.insertvalue %221, %223[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %225 = llvm.mlir.constant(0 : index) : i64
    %226 = llvm.insertvalue %225, %224[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %227 = llvm.insertvalue %201, %226[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %228 = llvm.insertvalue %202, %227[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %229 = llvm.insertvalue %203, %228[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %230 = llvm.insertvalue %204, %229[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %231 = llvm.insertvalue %207, %230[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %206, %231[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.insertvalue %204, %232[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %234 = llvm.insertvalue %205, %233[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb31(%17 : i64)
  ^bb31(%235: i64):  // 2 preds: ^bb30, ^bb38
    %236 = llvm.icmp "slt" %235, %16 : i64
    llvm.cond_br %236, ^bb32(%17 : i64), ^bb39
  ^bb32(%237: i64):  // 2 preds: ^bb31, ^bb37
    %238 = llvm.icmp "slt" %237, %16 : i64
    llvm.cond_br %238, ^bb33(%17 : i64), ^bb38
  ^bb33(%239: i64):  // 2 preds: ^bb32, ^bb36
    %240 = llvm.icmp "slt" %239, %13 : i64
    llvm.cond_br %240, ^bb34(%17 : i64), ^bb37
  ^bb34(%241: i64):  // 2 preds: ^bb33, ^bb35
    %242 = llvm.icmp "slt" %241, %13 : i64
    llvm.cond_br %242, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %243 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.mlir.constant(243 : index) : i64
    %245 = llvm.mul %235, %244 : i64
    %246 = llvm.mlir.constant(27 : index) : i64
    %247 = llvm.mul %239, %246 : i64
    %248 = llvm.add %245, %247 : i64
    %249 = llvm.mlir.constant(3 : index) : i64
    %250 = llvm.mul %241, %249 : i64
    %251 = llvm.add %248, %250 : i64
    %252 = llvm.add %251, %237 : i64
    %253 = llvm.getelementptr %243[%252] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %254 = llvm.load %253 : !llvm.ptr -> f32
    %255 = llvm.extractvalue %234[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %256 = llvm.mlir.constant(243 : index) : i64
    %257 = llvm.mul %235, %256 : i64
    %258 = llvm.mlir.constant(81 : index) : i64
    %259 = llvm.mul %237, %258 : i64
    %260 = llvm.add %257, %259 : i64
    %261 = llvm.mlir.constant(9 : index) : i64
    %262 = llvm.mul %239, %261 : i64
    %263 = llvm.add %260, %262 : i64
    %264 = llvm.add %263, %241 : i64
    %265 = llvm.getelementptr %255[%264] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %254, %265 : f32, !llvm.ptr
    %266 = llvm.add %241, %15 : i64
    llvm.br ^bb34(%266 : i64)
  ^bb36:  // pred: ^bb34
    %267 = llvm.add %239, %15 : i64
    llvm.br ^bb33(%267 : i64)
  ^bb37:  // pred: ^bb33
    %268 = llvm.add %237, %15 : i64
    llvm.br ^bb32(%268 : i64)
  ^bb38:  // pred: ^bb32
    %269 = llvm.add %235, %15 : i64
    llvm.br ^bb31(%269 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %234 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_4xi32_0(dense<[0, 3, 1, 2]> : tensor<4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<4 x i32>
  llvm.mlir.global private constant @__constant_4xi32(dense<[0, 2, 3, 1]> : tensor<4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<4 x i32>
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.mlir.constant(2 : index) : i64
    %13 = llvm.mlir.constant(9 : index) : i64
    %14 = llvm.mlir.constant(10 : index) : i64
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.mlir.constant(3 : index) : i64
    %17 = llvm.mlir.constant(0 : index) : i64
    %18 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %19 = llvm.mlir.constant(3 : index) : i64
    %20 = llvm.mlir.constant(10 : index) : i64
    %21 = llvm.mlir.constant(10 : index) : i64
    %22 = llvm.mlir.constant(3 : index) : i64
    %23 = llvm.mlir.constant(1 : index) : i64
    %24 = llvm.mlir.constant(30 : index) : i64
    %25 = llvm.mlir.constant(300 : index) : i64
    %26 = llvm.mlir.constant(900 : index) : i64
    %27 = llvm.mlir.zero : !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %30 = llvm.mlir.constant(64 : index) : i64
    %31 = llvm.add %29, %30 : i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.sub %30, %34 : i64
    %36 = llvm.add %33, %35 : i64
    %37 = llvm.urem %36, %30  : i64
    %38 = llvm.sub %36, %37 : i64
    %39 = llvm.inttoptr %38 : i64 to !llvm.ptr
    %40 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %41 = llvm.insertvalue %32, %40[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %39, %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.mlir.constant(0 : index) : i64
    %44 = llvm.insertvalue %43, %42[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %19, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %20, %45[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %21, %46[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %22, %47[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %25, %48[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %24, %49[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %22, %50[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.insertvalue %23, %51[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%17 : i64)
  ^bb1(%53: i64):  // 2 preds: ^bb0, ^bb8
    %54 = llvm.icmp "slt" %53, %16 : i64
    llvm.cond_br %54, ^bb2(%17 : i64), ^bb9
  ^bb2(%55: i64):  // 2 preds: ^bb1, ^bb7
    %56 = llvm.icmp "slt" %55, %14 : i64
    llvm.cond_br %56, ^bb3(%17 : i64), ^bb8
  ^bb3(%57: i64):  // 2 preds: ^bb2, ^bb6
    %58 = llvm.icmp "slt" %57, %14 : i64
    llvm.cond_br %58, ^bb4(%17 : i64), ^bb7
  ^bb4(%59: i64):  // 2 preds: ^bb3, ^bb5
    %60 = llvm.icmp "slt" %59, %16 : i64
    llvm.cond_br %60, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %61 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.mlir.constant(300 : index) : i64
    %63 = llvm.mul %53, %62 : i64
    %64 = llvm.mlir.constant(100 : index) : i64
    %65 = llvm.mul %59, %64 : i64
    %66 = llvm.add %63, %65 : i64
    %67 = llvm.mlir.constant(10 : index) : i64
    %68 = llvm.mul %55, %67 : i64
    %69 = llvm.add %66, %68 : i64
    %70 = llvm.add %69, %57 : i64
    %71 = llvm.getelementptr %61[%70] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %72 = llvm.load %71 : !llvm.ptr -> f32
    %73 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %74 = llvm.mlir.constant(300 : index) : i64
    %75 = llvm.mul %53, %74 : i64
    %76 = llvm.mlir.constant(30 : index) : i64
    %77 = llvm.mul %55, %76 : i64
    %78 = llvm.add %75, %77 : i64
    %79 = llvm.mlir.constant(3 : index) : i64
    %80 = llvm.mul %57, %79 : i64
    %81 = llvm.add %78, %80 : i64
    %82 = llvm.add %81, %59 : i64
    %83 = llvm.getelementptr %73[%82] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %72, %83 : f32, !llvm.ptr
    %84 = llvm.add %59, %15 : i64
    llvm.br ^bb4(%84 : i64)
  ^bb6:  // pred: ^bb4
    %85 = llvm.add %57, %15 : i64
    llvm.br ^bb3(%85 : i64)
  ^bb7:  // pred: ^bb3
    %86 = llvm.add %55, %15 : i64
    llvm.br ^bb2(%86 : i64)
  ^bb8:  // pred: ^bb2
    %87 = llvm.add %53, %15 : i64
    llvm.br ^bb1(%87 : i64)
  ^bb9:  // pred: ^bb1
    %88 = llvm.mlir.constant(3 : index) : i64
    %89 = llvm.mlir.constant(9 : index) : i64
    %90 = llvm.mlir.constant(9 : index) : i64
    %91 = llvm.mlir.constant(3 : index) : i64
    %92 = llvm.mlir.constant(1 : index) : i64
    %93 = llvm.mlir.constant(27 : index) : i64
    %94 = llvm.mlir.constant(243 : index) : i64
    %95 = llvm.mlir.constant(729 : index) : i64
    %96 = llvm.mlir.zero : !llvm.ptr
    %97 = llvm.getelementptr %96[%95] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %98 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %99 = llvm.mlir.constant(64 : index) : i64
    %100 = llvm.add %98, %99 : i64
    %101 = llvm.call @malloc(%100) : (i64) -> !llvm.ptr
    %102 = llvm.ptrtoint %101 : !llvm.ptr to i64
    %103 = llvm.mlir.constant(1 : index) : i64
    %104 = llvm.sub %99, %103 : i64
    %105 = llvm.add %102, %104 : i64
    %106 = llvm.urem %105, %99  : i64
    %107 = llvm.sub %105, %106 : i64
    %108 = llvm.inttoptr %107 : i64 to !llvm.ptr
    %109 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %110 = llvm.insertvalue %101, %109[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %111 = llvm.insertvalue %108, %110[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %112 = llvm.mlir.constant(0 : index) : i64
    %113 = llvm.insertvalue %112, %111[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %114 = llvm.insertvalue %88, %113[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %115 = llvm.insertvalue %89, %114[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %116 = llvm.insertvalue %90, %115[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.insertvalue %91, %116[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %118 = llvm.insertvalue %94, %117[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %119 = llvm.insertvalue %93, %118[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %120 = llvm.insertvalue %91, %119[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %121 = llvm.insertvalue %92, %120[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%17 : i64)
  ^bb10(%122: i64):  // 2 preds: ^bb9, ^bb17
    %123 = llvm.icmp "slt" %122, %16 : i64
    llvm.cond_br %123, ^bb11(%17 : i64), ^bb18(%17 : i64)
  ^bb11(%124: i64):  // 2 preds: ^bb10, ^bb16
    %125 = llvm.icmp "slt" %124, %13 : i64
    llvm.cond_br %125, ^bb12(%17 : i64), ^bb17
  ^bb12(%126: i64):  // 2 preds: ^bb11, ^bb15
    %127 = llvm.icmp "slt" %126, %13 : i64
    llvm.cond_br %127, ^bb13(%17 : i64), ^bb16
  ^bb13(%128: i64):  // 2 preds: ^bb12, ^bb14
    %129 = llvm.icmp "slt" %128, %16 : i64
    llvm.cond_br %129, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %130 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.mlir.constant(243 : index) : i64
    %132 = llvm.mul %122, %131 : i64
    %133 = llvm.mlir.constant(27 : index) : i64
    %134 = llvm.mul %124, %133 : i64
    %135 = llvm.add %132, %134 : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mul %126, %136 : i64
    %138 = llvm.add %135, %137 : i64
    %139 = llvm.add %138, %128 : i64
    %140 = llvm.getelementptr %130[%139] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %18, %140 : f32, !llvm.ptr
    %141 = llvm.add %128, %15 : i64
    llvm.br ^bb13(%141 : i64)
  ^bb15:  // pred: ^bb13
    %142 = llvm.add %126, %15 : i64
    llvm.br ^bb12(%142 : i64)
  ^bb16:  // pred: ^bb12
    %143 = llvm.add %124, %15 : i64
    llvm.br ^bb11(%143 : i64)
  ^bb17:  // pred: ^bb11
    %144 = llvm.add %122, %15 : i64
    llvm.br ^bb10(%144 : i64)
  ^bb18(%145: i64):  // 2 preds: ^bb10, ^bb29
    %146 = llvm.icmp "slt" %145, %16 : i64
    llvm.cond_br %146, ^bb19(%17 : i64), ^bb30
  ^bb19(%147: i64):  // 2 preds: ^bb18, ^bb28
    %148 = llvm.icmp "slt" %147, %13 : i64
    llvm.cond_br %148, ^bb20(%17 : i64), ^bb29
  ^bb20(%149: i64):  // 2 preds: ^bb19, ^bb27
    %150 = llvm.icmp "slt" %149, %13 : i64
    llvm.cond_br %150, ^bb21(%17 : i64), ^bb28
  ^bb21(%151: i64):  // 2 preds: ^bb20, ^bb26
    %152 = llvm.icmp "slt" %151, %16 : i64
    llvm.cond_br %152, ^bb22(%17 : i64), ^bb27
  ^bb22(%153: i64):  // 2 preds: ^bb21, ^bb25
    %154 = llvm.icmp "slt" %153, %12 : i64
    llvm.cond_br %154, ^bb23(%17 : i64), ^bb26
  ^bb23(%155: i64):  // 2 preds: ^bb22, ^bb24
    %156 = llvm.icmp "slt" %155, %12 : i64
    llvm.cond_br %156, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %157 = llvm.add %147, %153 : i64
    %158 = llvm.add %149, %155 : i64
    %159 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %160 = llvm.mlir.constant(300 : index) : i64
    %161 = llvm.mul %145, %160 : i64
    %162 = llvm.mlir.constant(30 : index) : i64
    %163 = llvm.mul %157, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mul %158, %165 : i64
    %167 = llvm.add %164, %166 : i64
    %168 = llvm.add %167, %151 : i64
    %169 = llvm.getelementptr %159[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %170 = llvm.load %169 : !llvm.ptr -> f32
    %171 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %172 = llvm.mlir.constant(243 : index) : i64
    %173 = llvm.mul %145, %172 : i64
    %174 = llvm.mlir.constant(27 : index) : i64
    %175 = llvm.mul %147, %174 : i64
    %176 = llvm.add %173, %175 : i64
    %177 = llvm.mlir.constant(3 : index) : i64
    %178 = llvm.mul %149, %177 : i64
    %179 = llvm.add %176, %178 : i64
    %180 = llvm.add %179, %151 : i64
    %181 = llvm.getelementptr %171[%180] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %182 = llvm.load %181 : !llvm.ptr -> f32
    %183 = llvm.intr.maximum(%182, %170)  : (f32, f32) -> f32
    %184 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %185 = llvm.mlir.constant(243 : index) : i64
    %186 = llvm.mul %145, %185 : i64
    %187 = llvm.mlir.constant(27 : index) : i64
    %188 = llvm.mul %147, %187 : i64
    %189 = llvm.add %186, %188 : i64
    %190 = llvm.mlir.constant(3 : index) : i64
    %191 = llvm.mul %149, %190 : i64
    %192 = llvm.add %189, %191 : i64
    %193 = llvm.add %192, %151 : i64
    %194 = llvm.getelementptr %184[%193] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %183, %194 : f32, !llvm.ptr
    %195 = llvm.add %155, %15 : i64
    llvm.br ^bb23(%195 : i64)
  ^bb25:  // pred: ^bb23
    %196 = llvm.add %153, %15 : i64
    llvm.br ^bb22(%196 : i64)
  ^bb26:  // pred: ^bb22
    %197 = llvm.add %151, %15 : i64
    llvm.br ^bb21(%197 : i64)
  ^bb27:  // pred: ^bb21
    %198 = llvm.add %149, %15 : i64
    llvm.br ^bb20(%198 : i64)
  ^bb28:  // pred: ^bb20
    %199 = llvm.add %147, %15 : i64
    llvm.br ^bb19(%199 : i64)
  ^bb29:  // pred: ^bb19
    %200 = llvm.add %145, %15 : i64
    llvm.br ^bb18(%200 : i64)
  ^bb30:  // pred: ^bb18
    %201 = llvm.mlir.constant(3 : index) : i64
    %202 = llvm.mlir.constant(3 : index) : i64
    %203 = llvm.mlir.constant(9 : index) : i64
    %204 = llvm.mlir.constant(9 : index) : i64
    %205 = llvm.mlir.constant(1 : index) : i64
    %206 = llvm.mlir.constant(81 : index) : i64
    %207 = llvm.mlir.constant(243 : index) : i64
    %208 = llvm.mlir.constant(729 : index) : i64
    %209 = llvm.mlir.zero : !llvm.ptr
    %210 = llvm.getelementptr %209[%208] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %211 = llvm.ptrtoint %210 : !llvm.ptr to i64
    %212 = llvm.mlir.constant(64 : index) : i64
    %213 = llvm.add %211, %212 : i64
    %214 = llvm.call @malloc(%213) : (i64) -> !llvm.ptr
    %215 = llvm.ptrtoint %214 : !llvm.ptr to i64
    %216 = llvm.mlir.constant(1 : index) : i64
    %217 = llvm.sub %212, %216 : i64
    %218 = llvm.add %215, %217 : i64
    %219 = llvm.urem %218, %212  : i64
    %220 = llvm.sub %218, %219 : i64
    %221 = llvm.inttoptr %220 : i64 to !llvm.ptr
    %222 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %223 = llvm.insertvalue %214, %222[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %224 = llvm.insertvalue %221, %223[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %225 = llvm.mlir.constant(0 : index) : i64
    %226 = llvm.insertvalue %225, %224[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %227 = llvm.insertvalue %201, %226[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %228 = llvm.insertvalue %202, %227[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %229 = llvm.insertvalue %203, %228[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %230 = llvm.insertvalue %204, %229[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %231 = llvm.insertvalue %207, %230[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %206, %231[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.insertvalue %204, %232[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %234 = llvm.insertvalue %205, %233[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb31(%17 : i64)
  ^bb31(%235: i64):  // 2 preds: ^bb30, ^bb38
    %236 = llvm.icmp "slt" %235, %16 : i64
    llvm.cond_br %236, ^bb32(%17 : i64), ^bb39
  ^bb32(%237: i64):  // 2 preds: ^bb31, ^bb37
    %238 = llvm.icmp "slt" %237, %16 : i64
    llvm.cond_br %238, ^bb33(%17 : i64), ^bb38
  ^bb33(%239: i64):  // 2 preds: ^bb32, ^bb36
    %240 = llvm.icmp "slt" %239, %13 : i64
    llvm.cond_br %240, ^bb34(%17 : i64), ^bb37
  ^bb34(%241: i64):  // 2 preds: ^bb33, ^bb35
    %242 = llvm.icmp "slt" %241, %13 : i64
    llvm.cond_br %242, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %243 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.mlir.constant(243 : index) : i64
    %245 = llvm.mul %235, %244 : i64
    %246 = llvm.mlir.constant(27 : index) : i64
    %247 = llvm.mul %239, %246 : i64
    %248 = llvm.add %245, %247 : i64
    %249 = llvm.mlir.constant(3 : index) : i64
    %250 = llvm.mul %241, %249 : i64
    %251 = llvm.add %248, %250 : i64
    %252 = llvm.add %251, %237 : i64
    %253 = llvm.getelementptr %243[%252] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %254 = llvm.load %253 : !llvm.ptr -> f32
    %255 = llvm.extractvalue %234[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %256 = llvm.mlir.constant(243 : index) : i64
    %257 = llvm.mul %235, %256 : i64
    %258 = llvm.mlir.constant(81 : index) : i64
    %259 = llvm.mul %237, %258 : i64
    %260 = llvm.add %257, %259 : i64
    %261 = llvm.mlir.constant(9 : index) : i64
    %262 = llvm.mul %239, %261 : i64
    %263 = llvm.add %260, %262 : i64
    %264 = llvm.add %263, %241 : i64
    %265 = llvm.getelementptr %255[%264] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %254, %265 : f32, !llvm.ptr
    %266 = llvm.add %241, %15 : i64
    llvm.br ^bb34(%266 : i64)
  ^bb36:  // pred: ^bb34
    %267 = llvm.add %239, %15 : i64
    llvm.br ^bb33(%267 : i64)
  ^bb37:  // pred: ^bb33
    %268 = llvm.add %237, %15 : i64
    llvm.br ^bb32(%268 : i64)
  ^bb38:  // pred: ^bb32
    %269 = llvm.add %235, %15 : i64
    llvm.br ^bb31(%269 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %234 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}
