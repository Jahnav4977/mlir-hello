./build/bin/mx-opt --mlir-print-ir-after-all ./test/Mx/conv2dtest.mlir 2> ./test/IR_Dump/conv2dtest.txt

// -----// IR Dump After {anonymous}::MxToTosaLowerPass () //----- //
module {
  func.func @test_conv2d(%arg0: tensor<3x3x10x10xf32>, %arg1: tensor<3x3x2x2xf32>, %arg2: tensor<3xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %1 = tosa.transpose %arg0, %0 : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %2 = tosa.transpose %arg1, %0 : (tensor<3x3x2x2xf32>, tensor<4xi32>) -> tensor<3x2x2x3xf32>
    %3 = tosa.conv2d %1, %2, %arg2 {dilation = array<i64: 1, 1>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>, tensor<3x2x2x3xf32>, tensor<3xf32>) -> tensor<3x9x9x3xf32>
    %4 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %5 = tosa.transpose %3, %4 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    %6 = tosa.cast %5 : (tensor<3x3x9x9xf32>) -> tensor<3x3x9x9xf32>
    return %6 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToTensor (tosa-to-tensor) //----- //
module {
  func.func @test_conv2d(%arg0: tensor<3x3x10x10xf32>, %arg1: tensor<3x3x2x2xf32>, %arg2: tensor<3xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %1 = tosa.transpose %arg0, %0 : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %2 = tosa.transpose %arg1, %0 : (tensor<3x3x2x2xf32>, tensor<4xi32>) -> tensor<3x2x2x3xf32>
    %3 = tosa.conv2d %1, %2, %arg2 {dilation = array<i64: 1, 1>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>, tensor<3x2x2x3xf32>, tensor<3xf32>) -> tensor<3x9x9x3xf32>
    %4 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %5 = tosa.transpose %3, %4 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    return %5 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToLinalgNamed (tosa-to-linalg-named) //----- //
func.func @test_conv2d(%arg0: tensor<3x3x10x10xf32>, %arg1: tensor<3x3x2x2xf32>, %arg2: tensor<3xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %1 = tensor.empty() : tensor<3x10x10x3xf32>
  %transposed = linalg.transpose ins(%arg0 : tensor<3x3x10x10xf32>) outs(%1 : tensor<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
  %2 = tensor.empty() : tensor<3x2x2x3xf32>
  %transposed_0 = linalg.transpose ins(%arg1 : tensor<3x3x2x2xf32>) outs(%2 : tensor<3x2x2x3xf32>) permutation = [0, 2, 3, 1] 
  %3 = tensor.empty() : tensor<3x9x9x3xf32>
  %4 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg2 : tensor<3xf32>) outs(%3 : tensor<3x9x9x3xf32>) {
  ^bb0(%in: f32, %out: f32):
    linalg.yield %in : f32
  } -> tensor<3x9x9x3xf32>
  %5 = linalg.conv_2d_nhwc_fhwc {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%transposed, %transposed_0 : tensor<3x10x10x3xf32>, tensor<3x2x2x3xf32>) outs(%4 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %6 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %7 = tensor.empty() : tensor<3x3x9x9xf32>
  %transposed_1 = linalg.transpose ins(%5 : tensor<3x9x9x3xf32>) outs(%7 : tensor<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
  return %transposed_1 : tensor<3x3x9x9xf32>
}

// -----// IR Dump After TosaToLinalg (tosa-to-linalg) //----- //
func.func @test_conv2d(%arg0: tensor<3x3x10x10xf32>, %arg1: tensor<3x3x2x2xf32>, %arg2: tensor<3xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %1 = tensor.empty() : tensor<3x10x10x3xf32>
  %transposed = linalg.transpose ins(%arg0 : tensor<3x3x10x10xf32>) outs(%1 : tensor<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
  %2 = tensor.empty() : tensor<3x2x2x3xf32>
  %transposed_0 = linalg.transpose ins(%arg1 : tensor<3x3x2x2xf32>) outs(%2 : tensor<3x2x2x3xf32>) permutation = [0, 2, 3, 1] 
  %3 = tensor.empty() : tensor<3x9x9x3xf32>
  %4 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg2 : tensor<3xf32>) outs(%3 : tensor<3x9x9x3xf32>) {
  ^bb0(%in: f32, %out: f32):
    linalg.yield %in : f32
  } -> tensor<3x9x9x3xf32>
  %5 = linalg.conv_2d_nhwc_fhwc {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%transposed, %transposed_0 : tensor<3x10x10x3xf32>, tensor<3x2x2x3xf32>) outs(%4 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %6 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %7 = tensor.empty() : tensor<3x3x9x9xf32>
  %transposed_1 = linalg.transpose ins(%5 : tensor<3x9x9x3xf32>) outs(%7 : tensor<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
  return %transposed_1 : tensor<3x3x9x9xf32>
}

// -----// IR Dump After OneShotBufferize (one-shot-bufferize) //----- //
#map = affine_map<(d0, d1, d2, d3) -> (d3)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
module {
  func.func @test_conv2d(%arg0: tensor<3x3x10x10xf32>, %arg1: tensor<3x3x2x2xf32>, %arg2: tensor<3xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_memref %arg2 : memref<3xf32, strided<[?], offset: ?>>
    %1 = bufferization.to_memref %arg1 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
    %2 = bufferization.to_memref %arg0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %3 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    linalg.transpose ins(%2 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc : memref<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    linalg.transpose ins(%1 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_0 : memref<3x2x2x3xf32>) permutation = [0, 2, 3, 1] 
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%0 : memref<3xf32, strided<[?], offset: ?>>) outs(%alloc_1 : memref<3x9x9x3xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    linalg.conv_2d_nhwc_fhwc {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%alloc, %alloc_0 : memref<3x10x10x3xf32>, memref<3x2x2x3xf32>) outs(%alloc_1 : memref<3x9x9x3xf32>)
    %4 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    linalg.transpose ins(%alloc_1 : memref<3x9x9x3xf32>) outs(%alloc_2 : memref<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
    %5 = bufferization.to_tensor %alloc_2 : memref<3x3x9x9xf32>
    return %5 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After FuncBufferize (func-bufferize) //----- //
#map = affine_map<(d0, d1, d2, d3) -> (d3)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
module {
  func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg2 : memref<3xf32>
    %1 = bufferization.to_tensor %arg1 : memref<3x3x2x2xf32>
    %2 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
    %3 = bufferization.to_memref %0 : memref<3xf32, strided<[?], offset: ?>>
    %4 = bufferization.to_memref %1 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
    %5 = bufferization.to_memref %2 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %6 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    linalg.transpose ins(%5 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc : memref<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    linalg.transpose ins(%4 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_0 : memref<3x2x2x3xf32>) permutation = [0, 2, 3, 1] 
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3 : memref<3xf32, strided<[?], offset: ?>>) outs(%alloc_1 : memref<3x9x9x3xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    linalg.conv_2d_nhwc_fhwc {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%alloc, %alloc_0 : memref<3x10x10x3xf32>, memref<3x2x2x3xf32>) outs(%alloc_1 : memref<3x9x9x3xf32>)
    %7 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    linalg.transpose ins(%alloc_1 : memref<3x9x9x3xf32>) outs(%alloc_2 : memref<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
    %8 = bufferization.to_tensor %alloc_2 : memref<3x3x9x9xf32>
    %9 = bufferization.to_memref %8 : memref<3x3x9x9xf32>
    return %9 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertLinalgToAffineLoopsPass (convert-linalg-to-affine-loops) //----- //
func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %0 = bufferization.to_tensor %arg2 : memref<3xf32>
  %1 = bufferization.to_tensor %arg1 : memref<3x3x2x2xf32>
  %2 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
  %3 = bufferization.to_memref %0 : memref<3xf32, strided<[?], offset: ?>>
  %4 = bufferization.to_memref %1 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
  %5 = bufferization.to_memref %2 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
  affine.for %arg3 = 0 to 3 {
    affine.for %arg4 = 0 to 10 {
      affine.for %arg5 = 0 to 10 {
        affine.for %arg6 = 0 to 3 {
          %6 = affine.load %5[%arg3, %arg6, %arg4, %arg5] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
          affine.store %6, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<3x10x10x3xf32>
        }
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
  affine.for %arg3 = 0 to 3 {
    affine.for %arg4 = 0 to 2 {
      affine.for %arg5 = 0 to 2 {
        affine.for %arg6 = 0 to 3 {
          %6 = affine.load %4[%arg3, %arg6, %arg4, %arg5] : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
          affine.store %6, %alloc_0[%arg3, %arg4, %arg5, %arg6] : memref<3x2x2x3xf32>
        }
      }
    }
  }
  %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
  affine.for %arg3 = 0 to 3 {
    affine.for %arg4 = 0 to 9 {
      affine.for %arg5 = 0 to 9 {
        affine.for %arg6 = 0 to 3 {
          %6 = affine.load %3[%arg6] : memref<3xf32, strided<[?], offset: ?>>
          affine.store %6, %alloc_1[%arg3, %arg4, %arg5, %arg6] : memref<3x9x9x3xf32>
        }
      }
    }
  }
  affine.for %arg3 = 0 to 3 {
    affine.for %arg4 = 0 to 9 {
      affine.for %arg5 = 0 to 9 {
        affine.for %arg6 = 0 to 3 {
          affine.for %arg7 = 0 to 2 {
            affine.for %arg8 = 0 to 2 {
              affine.for %arg9 = 0 to 3 {
                %6 = affine.apply affine_map<(d0, d1) -> (d0 + d1)>(%arg4, %arg7)
                %7 = affine.apply affine_map<(d0, d1) -> (d0 + d1)>(%arg5, %arg8)
                %8 = affine.load %alloc[%arg3, %6, %7, %arg9] : memref<3x10x10x3xf32>
                %9 = affine.load %alloc_0[%arg6, %arg7, %arg8, %arg9] : memref<3x2x2x3xf32>
                %10 = affine.load %alloc_1[%arg3, %arg4, %arg5, %arg6] : memref<3x9x9x3xf32>
                %11 = arith.mulf %8, %9 : f32
                %12 = arith.addf %10, %11 : f32
                affine.store %12, %alloc_1[%arg3, %arg4, %arg5, %arg6] : memref<3x9x9x3xf32>
              }
            }
          }
        }
      }
    }
  }
  %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
  affine.for %arg3 = 0 to 3 {
    affine.for %arg4 = 0 to 3 {
      affine.for %arg5 = 0 to 9 {
        affine.for %arg6 = 0 to 9 {
          %6 = affine.load %alloc_1[%arg3, %arg5, %arg6, %arg4] : memref<3x9x9x3xf32>
          affine.store %6, %alloc_2[%arg3, %arg4, %arg5, %arg6] : memref<3x3x9x9xf32>
        }
      }
    }
  }
  return %alloc_2 : memref<3x3x9x9xf32>
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %0 = bufferization.to_tensor %arg2 : memref<3xf32>
  %1 = bufferization.to_tensor %arg1 : memref<3x3x2x2xf32>
  %2 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
  %3 = bufferization.to_memref %0 : memref<3xf32, strided<[?], offset: ?>>
  %4 = bufferization.to_memref %1 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
  %5 = bufferization.to_memref %2 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  scf.for %arg3 = %c0 to %c3 step %c1 {
    %c0_15 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_16 = arith.constant 1 : index
    scf.for %arg4 = %c0_15 to %c10 step %c1_16 {
      %c0_17 = arith.constant 0 : index
      %c10_18 = arith.constant 10 : index
      %c1_19 = arith.constant 1 : index
      scf.for %arg5 = %c0_17 to %c10_18 step %c1_19 {
        %c0_20 = arith.constant 0 : index
        %c3_21 = arith.constant 3 : index
        %c1_22 = arith.constant 1 : index
        scf.for %arg6 = %c0_20 to %c3_21 step %c1_22 {
          %6 = memref.load %5[%arg3, %arg6, %arg4, %arg5] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
          memref.store %6, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<3x10x10x3xf32>
        }
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
  %c0_1 = arith.constant 0 : index
  %c3_2 = arith.constant 3 : index
  %c1_3 = arith.constant 1 : index
  scf.for %arg3 = %c0_1 to %c3_2 step %c1_3 {
    %c0_15 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1_16 = arith.constant 1 : index
    scf.for %arg4 = %c0_15 to %c2 step %c1_16 {
      %c0_17 = arith.constant 0 : index
      %c2_18 = arith.constant 2 : index
      %c1_19 = arith.constant 1 : index
      scf.for %arg5 = %c0_17 to %c2_18 step %c1_19 {
        %c0_20 = arith.constant 0 : index
        %c3_21 = arith.constant 3 : index
        %c1_22 = arith.constant 1 : index
        scf.for %arg6 = %c0_20 to %c3_21 step %c1_22 {
          %6 = memref.load %4[%arg3, %arg6, %arg4, %arg5] : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
          memref.store %6, %alloc_0[%arg3, %arg4, %arg5, %arg6] : memref<3x2x2x3xf32>
        }
      }
    }
  }
  %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
  %c0_5 = arith.constant 0 : index
  %c3_6 = arith.constant 3 : index
  %c1_7 = arith.constant 1 : index
  scf.for %arg3 = %c0_5 to %c3_6 step %c1_7 {
    %c0_15 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_16 = arith.constant 1 : index
    scf.for %arg4 = %c0_15 to %c9 step %c1_16 {
      %c0_17 = arith.constant 0 : index
      %c9_18 = arith.constant 9 : index
      %c1_19 = arith.constant 1 : index
      scf.for %arg5 = %c0_17 to %c9_18 step %c1_19 {
        %c0_20 = arith.constant 0 : index
        %c3_21 = arith.constant 3 : index
        %c1_22 = arith.constant 1 : index
        scf.for %arg6 = %c0_20 to %c3_21 step %c1_22 {
          %6 = memref.load %3[%arg6] : memref<3xf32, strided<[?], offset: ?>>
          memref.store %6, %alloc_4[%arg3, %arg4, %arg5, %arg6] : memref<3x9x9x3xf32>
        }
      }
    }
  }
  %c0_8 = arith.constant 0 : index
  %c3_9 = arith.constant 3 : index
  %c1_10 = arith.constant 1 : index
  scf.for %arg3 = %c0_8 to %c3_9 step %c1_10 {
    %c0_15 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_16 = arith.constant 1 : index
    scf.for %arg4 = %c0_15 to %c9 step %c1_16 {
      %c0_17 = arith.constant 0 : index
      %c9_18 = arith.constant 9 : index
      %c1_19 = arith.constant 1 : index
      scf.for %arg5 = %c0_17 to %c9_18 step %c1_19 {
        %c0_20 = arith.constant 0 : index
        %c3_21 = arith.constant 3 : index
        %c1_22 = arith.constant 1 : index
        scf.for %arg6 = %c0_20 to %c3_21 step %c1_22 {
          %c0_23 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_24 = arith.constant 1 : index
          scf.for %arg7 = %c0_23 to %c2 step %c1_24 {
            %c0_25 = arith.constant 0 : index
            %c2_26 = arith.constant 2 : index
            %c1_27 = arith.constant 1 : index
            scf.for %arg8 = %c0_25 to %c2_26 step %c1_27 {
              %c0_28 = arith.constant 0 : index
              %c3_29 = arith.constant 3 : index
              %c1_30 = arith.constant 1 : index
              scf.for %arg9 = %c0_28 to %c3_29 step %c1_30 {
                %6 = arith.addi %arg4, %arg7 : index
                %7 = arith.addi %arg5, %arg8 : index
                %8 = memref.load %alloc[%arg3, %6, %7, %arg9] : memref<3x10x10x3xf32>
                %9 = memref.load %alloc_0[%arg6, %arg7, %arg8, %arg9] : memref<3x2x2x3xf32>
                %10 = memref.load %alloc_4[%arg3, %arg4, %arg5, %arg6] : memref<3x9x9x3xf32>
                %11 = arith.mulf %8, %9 : f32
                %12 = arith.addf %10, %11 : f32
                memref.store %12, %alloc_4[%arg3, %arg4, %arg5, %arg6] : memref<3x9x9x3xf32>
              }
            }
          }
        }
      }
    }
  }
  %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
  %c0_12 = arith.constant 0 : index
  %c3_13 = arith.constant 3 : index
  %c1_14 = arith.constant 1 : index
  scf.for %arg3 = %c0_12 to %c3_13 step %c1_14 {
    %c0_15 = arith.constant 0 : index
    %c3_16 = arith.constant 3 : index
    %c1_17 = arith.constant 1 : index
    scf.for %arg4 = %c0_15 to %c3_16 step %c1_17 {
      %c0_18 = arith.constant 0 : index
      %c9 = arith.constant 9 : index
      %c1_19 = arith.constant 1 : index
      scf.for %arg5 = %c0_18 to %c9 step %c1_19 {
        %c0_20 = arith.constant 0 : index
        %c9_21 = arith.constant 9 : index
        %c1_22 = arith.constant 1 : index
        scf.for %arg6 = %c0_20 to %c9_21 step %c1_22 {
          %6 = memref.load %alloc_4[%arg3, %arg5, %arg6, %arg4] : memref<3x9x9x3xf32>
          memref.store %6, %alloc_11[%arg3, %arg4, %arg5, %arg6] : memref<3x3x9x9xf32>
        }
      }
    }
  }
  return %alloc_11 : memref<3x3x9x9xf32>
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg2 : memref<3xf32>
    %1 = bufferization.to_tensor %arg1 : memref<3x3x2x2xf32>
    %2 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
    %3 = bufferization.to_memref %0 : memref<3xf32, strided<[?], offset: ?>>
    %4 = bufferization.to_memref %1 : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
    %5 = bufferization.to_memref %2 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%6: index):  // 2 preds: ^bb0, ^bb11
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    %c0_0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_1 = arith.constant 1 : index
    cf.br ^bb3(%c0_0 : index)
  ^bb3(%8: index):  // 2 preds: ^bb2, ^bb10
    %9 = arith.cmpi slt, %8, %c10 : index
    cf.cond_br %9, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    %c0_2 = arith.constant 0 : index
    %c10_3 = arith.constant 10 : index
    %c1_4 = arith.constant 1 : index
    cf.br ^bb5(%c0_2 : index)
  ^bb5(%10: index):  // 2 preds: ^bb4, ^bb9
    %11 = arith.cmpi slt, %10, %c10_3 : index
    cf.cond_br %11, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    %c0_5 = arith.constant 0 : index
    %c3_6 = arith.constant 3 : index
    %c1_7 = arith.constant 1 : index
    cf.br ^bb7(%c0_5 : index)
  ^bb7(%12: index):  // 2 preds: ^bb6, ^bb8
    %13 = arith.cmpi slt, %12, %c3_6 : index
    cf.cond_br %13, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %14 = memref.load %5[%6, %12, %8, %10] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    memref.store %14, %alloc[%6, %8, %10, %12] : memref<3x10x10x3xf32>
    %15 = arith.addi %12, %c1_7 : index
    cf.br ^bb7(%15 : index)
  ^bb9:  // pred: ^bb7
    %16 = arith.addi %10, %c1_4 : index
    cf.br ^bb5(%16 : index)
  ^bb10:  // pred: ^bb5
    %17 = arith.addi %8, %c1_1 : index
    cf.br ^bb3(%17 : index)
  ^bb11:  // pred: ^bb3
    %18 = arith.addi %6, %c1 : index
    cf.br ^bb1(%18 : index)
  ^bb12:  // pred: ^bb1
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    %c0_9 = arith.constant 0 : index
    %c3_10 = arith.constant 3 : index
    %c1_11 = arith.constant 1 : index
    cf.br ^bb13(%c0_9 : index)
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb23
    %20 = arith.cmpi slt, %19, %c3_10 : index
    cf.cond_br %20, ^bb14, ^bb24
  ^bb14:  // pred: ^bb13
    %c0_12 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1_13 = arith.constant 1 : index
    cf.br ^bb15(%c0_12 : index)
  ^bb15(%21: index):  // 2 preds: ^bb14, ^bb22
    %22 = arith.cmpi slt, %21, %c2 : index
    cf.cond_br %22, ^bb16, ^bb23
  ^bb16:  // pred: ^bb15
    %c0_14 = arith.constant 0 : index
    %c2_15 = arith.constant 2 : index
    %c1_16 = arith.constant 1 : index
    cf.br ^bb17(%c0_14 : index)
  ^bb17(%23: index):  // 2 preds: ^bb16, ^bb21
    %24 = arith.cmpi slt, %23, %c2_15 : index
    cf.cond_br %24, ^bb18, ^bb22
  ^bb18:  // pred: ^bb17
    %c0_17 = arith.constant 0 : index
    %c3_18 = arith.constant 3 : index
    %c1_19 = arith.constant 1 : index
    cf.br ^bb19(%c0_17 : index)
  ^bb19(%25: index):  // 2 preds: ^bb18, ^bb20
    %26 = arith.cmpi slt, %25, %c3_18 : index
    cf.cond_br %26, ^bb20, ^bb21
  ^bb20:  // pred: ^bb19
    %27 = memref.load %4[%19, %25, %21, %23] : memref<3x3x2x2xf32, strided<[?, ?, ?, ?], offset: ?>>
    memref.store %27, %alloc_8[%19, %21, %23, %25] : memref<3x2x2x3xf32>
    %28 = arith.addi %25, %c1_19 : index
    cf.br ^bb19(%28 : index)
  ^bb21:  // pred: ^bb19
    %29 = arith.addi %23, %c1_16 : index
    cf.br ^bb17(%29 : index)
  ^bb22:  // pred: ^bb17
    %30 = arith.addi %21, %c1_13 : index
    cf.br ^bb15(%30 : index)
  ^bb23:  // pred: ^bb15
    %31 = arith.addi %19, %c1_11 : index
    cf.br ^bb13(%31 : index)
  ^bb24:  // pred: ^bb13
    %alloc_20 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    %c0_21 = arith.constant 0 : index
    %c3_22 = arith.constant 3 : index
    %c1_23 = arith.constant 1 : index
    cf.br ^bb25(%c0_21 : index)
  ^bb25(%32: index):  // 2 preds: ^bb24, ^bb35
    %33 = arith.cmpi slt, %32, %c3_22 : index
    cf.cond_br %33, ^bb26, ^bb36
  ^bb26:  // pred: ^bb25
    %c0_24 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_25 = arith.constant 1 : index
    cf.br ^bb27(%c0_24 : index)
  ^bb27(%34: index):  // 2 preds: ^bb26, ^bb34
    %35 = arith.cmpi slt, %34, %c9 : index
    cf.cond_br %35, ^bb28, ^bb35
  ^bb28:  // pred: ^bb27
    %c0_26 = arith.constant 0 : index
    %c9_27 = arith.constant 9 : index
    %c1_28 = arith.constant 1 : index
    cf.br ^bb29(%c0_26 : index)
  ^bb29(%36: index):  // 2 preds: ^bb28, ^bb33
    %37 = arith.cmpi slt, %36, %c9_27 : index
    cf.cond_br %37, ^bb30, ^bb34
  ^bb30:  // pred: ^bb29
    %c0_29 = arith.constant 0 : index
    %c3_30 = arith.constant 3 : index
    %c1_31 = arith.constant 1 : index
    cf.br ^bb31(%c0_29 : index)
  ^bb31(%38: index):  // 2 preds: ^bb30, ^bb32
    %39 = arith.cmpi slt, %38, %c3_30 : index
    cf.cond_br %39, ^bb32, ^bb33
  ^bb32:  // pred: ^bb31
    %40 = memref.load %3[%38] : memref<3xf32, strided<[?], offset: ?>>
    memref.store %40, %alloc_20[%32, %34, %36, %38] : memref<3x9x9x3xf32>
    %41 = arith.addi %38, %c1_31 : index
    cf.br ^bb31(%41 : index)
  ^bb33:  // pred: ^bb31
    %42 = arith.addi %36, %c1_28 : index
    cf.br ^bb29(%42 : index)
  ^bb34:  // pred: ^bb29
    %43 = arith.addi %34, %c1_25 : index
    cf.br ^bb27(%43 : index)
  ^bb35:  // pred: ^bb27
    %44 = arith.addi %32, %c1_23 : index
    cf.br ^bb25(%44 : index)
  ^bb36:  // pred: ^bb25
    %c0_32 = arith.constant 0 : index
    %c3_33 = arith.constant 3 : index
    %c1_34 = arith.constant 1 : index
    cf.br ^bb37(%c0_32 : index)
  ^bb37(%45: index):  // 2 preds: ^bb36, ^bb56
    %46 = arith.cmpi slt, %45, %c3_33 : index
    cf.cond_br %46, ^bb38, ^bb57
  ^bb38:  // pred: ^bb37
    %c0_35 = arith.constant 0 : index
    %c9_36 = arith.constant 9 : index
    %c1_37 = arith.constant 1 : index
    cf.br ^bb39(%c0_35 : index)
  ^bb39(%47: index):  // 2 preds: ^bb38, ^bb55
    %48 = arith.cmpi slt, %47, %c9_36 : index
    cf.cond_br %48, ^bb40, ^bb56
  ^bb40:  // pred: ^bb39
    %c0_38 = arith.constant 0 : index
    %c9_39 = arith.constant 9 : index
    %c1_40 = arith.constant 1 : index
    cf.br ^bb41(%c0_38 : index)
  ^bb41(%49: index):  // 2 preds: ^bb40, ^bb54
    %50 = arith.cmpi slt, %49, %c9_39 : index
    cf.cond_br %50, ^bb42, ^bb55
  ^bb42:  // pred: ^bb41
    %c0_41 = arith.constant 0 : index
    %c3_42 = arith.constant 3 : index
    %c1_43 = arith.constant 1 : index
    cf.br ^bb43(%c0_41 : index)
  ^bb43(%51: index):  // 2 preds: ^bb42, ^bb53
    %52 = arith.cmpi slt, %51, %c3_42 : index
    cf.cond_br %52, ^bb44, ^bb54
  ^bb44:  // pred: ^bb43
    %c0_44 = arith.constant 0 : index
    %c2_45 = arith.constant 2 : index
    %c1_46 = arith.constant 1 : index
    cf.br ^bb45(%c0_44 : index)
  ^bb45(%53: index):  // 2 preds: ^bb44, ^bb52
    %54 = arith.cmpi slt, %53, %c2_45 : index
    cf.cond_br %54, ^bb46, ^bb53
  ^bb46:  // pred: ^bb45
    %c0_47 = arith.constant 0 : index
    %c2_48 = arith.constant 2 : index
    %c1_49 = arith.constant 1 : index
    cf.br ^bb47(%c0_47 : index)
  ^bb47(%55: index):  // 2 preds: ^bb46, ^bb51
    %56 = arith.cmpi slt, %55, %c2_48 : index
    cf.cond_br %56, ^bb48, ^bb52
  ^bb48:  // pred: ^bb47
    %c0_50 = arith.constant 0 : index
    %c3_51 = arith.constant 3 : index
    %c1_52 = arith.constant 1 : index
    cf.br ^bb49(%c0_50 : index)
  ^bb49(%57: index):  // 2 preds: ^bb48, ^bb50
    %58 = arith.cmpi slt, %57, %c3_51 : index
    cf.cond_br %58, ^bb50, ^bb51
  ^bb50:  // pred: ^bb49
    %59 = arith.addi %47, %53 : index
    %60 = arith.addi %49, %55 : index
    %61 = memref.load %alloc[%45, %59, %60, %57] : memref<3x10x10x3xf32>
    %62 = memref.load %alloc_8[%51, %53, %55, %57] : memref<3x2x2x3xf32>
    %63 = memref.load %alloc_20[%45, %47, %49, %51] : memref<3x9x9x3xf32>
    %64 = arith.mulf %61, %62 : f32
    %65 = arith.addf %63, %64 : f32
    memref.store %65, %alloc_20[%45, %47, %49, %51] : memref<3x9x9x3xf32>
    %66 = arith.addi %57, %c1_52 : index
    cf.br ^bb49(%66 : index)
  ^bb51:  // pred: ^bb49
    %67 = arith.addi %55, %c1_49 : index
    cf.br ^bb47(%67 : index)
  ^bb52:  // pred: ^bb47
    %68 = arith.addi %53, %c1_46 : index
    cf.br ^bb45(%68 : index)
  ^bb53:  // pred: ^bb45
    %69 = arith.addi %51, %c1_43 : index
    cf.br ^bb43(%69 : index)
  ^bb54:  // pred: ^bb43
    %70 = arith.addi %49, %c1_40 : index
    cf.br ^bb41(%70 : index)
  ^bb55:  // pred: ^bb41
    %71 = arith.addi %47, %c1_37 : index
    cf.br ^bb39(%71 : index)
  ^bb56:  // pred: ^bb39
    %72 = arith.addi %45, %c1_34 : index
    cf.br ^bb37(%72 : index)
  ^bb57:  // pred: ^bb37
    %alloc_53 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %c0_54 = arith.constant 0 : index
    %c3_55 = arith.constant 3 : index
    %c1_56 = arith.constant 1 : index
    cf.br ^bb58(%c0_54 : index)
  ^bb58(%73: index):  // 2 preds: ^bb57, ^bb68
    %74 = arith.cmpi slt, %73, %c3_55 : index
    cf.cond_br %74, ^bb59, ^bb69
  ^bb59:  // pred: ^bb58
    %c0_57 = arith.constant 0 : index
    %c3_58 = arith.constant 3 : index
    %c1_59 = arith.constant 1 : index
    cf.br ^bb60(%c0_57 : index)
  ^bb60(%75: index):  // 2 preds: ^bb59, ^bb67
    %76 = arith.cmpi slt, %75, %c3_58 : index
    cf.cond_br %76, ^bb61, ^bb68
  ^bb61:  // pred: ^bb60
    %c0_60 = arith.constant 0 : index
    %c9_61 = arith.constant 9 : index
    %c1_62 = arith.constant 1 : index
    cf.br ^bb62(%c0_60 : index)
  ^bb62(%77: index):  // 2 preds: ^bb61, ^bb66
    %78 = arith.cmpi slt, %77, %c9_61 : index
    cf.cond_br %78, ^bb63, ^bb67
  ^bb63:  // pred: ^bb62
    %c0_63 = arith.constant 0 : index
    %c9_64 = arith.constant 9 : index
    %c1_65 = arith.constant 1 : index
    cf.br ^bb64(%c0_63 : index)
  ^bb64(%79: index):  // 2 preds: ^bb63, ^bb65
    %80 = arith.cmpi slt, %79, %c9_64 : index
    cf.cond_br %80, ^bb65, ^bb66
  ^bb65:  // pred: ^bb64
    %81 = memref.load %alloc_20[%73, %77, %79, %75] : memref<3x9x9x3xf32>
    memref.store %81, %alloc_53[%73, %75, %77, %79] : memref<3x3x9x9xf32>
    %82 = arith.addi %79, %c1_65 : index
    cf.br ^bb64(%82 : index)
  ^bb66:  // pred: ^bb64
    %83 = arith.addi %77, %c1_62 : index
    cf.br ^bb62(%83 : index)
  ^bb67:  // pred: ^bb62
    %84 = arith.addi %75, %c1_59 : index
    cf.br ^bb60(%84 : index)
  ^bb68:  // pred: ^bb60
    %85 = arith.addi %73, %c1_56 : index
    cf.br ^bb58(%85 : index)
  ^bb69:  // pred: ^bb58
    return %alloc_53 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c9 = arith.constant 9 : index
    %c2 = arith.constant 2 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c2 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c2 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %21 = memref.load %arg1[%13, %19, %15, %17] : memref<3x3x2x2xf32>
    memref.store %21, %alloc_0[%13, %15, %17, %19] : memref<3x2x2x3xf32>
    %22 = arith.addi %19, %c1 : index
    cf.br ^bb13(%22 : index)
  ^bb15:  // pred: ^bb13
    %23 = arith.addi %17, %c1 : index
    cf.br ^bb12(%23 : index)
  ^bb16:  // pred: ^bb12
    %24 = arith.addi %15, %c1 : index
    cf.br ^bb11(%24 : index)
  ^bb17:  // pred: ^bb11
    %25 = arith.addi %13, %c1 : index
    cf.br ^bb10(%25 : index)
  ^bb18:  // pred: ^bb10
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb19(%c0 : index)
  ^bb19(%26: index):  // 2 preds: ^bb18, ^bb26
    %27 = arith.cmpi slt, %26, %c3 : index
    cf.cond_br %27, ^bb20(%c0 : index), ^bb27(%c0 : index)
  ^bb20(%28: index):  // 2 preds: ^bb19, ^bb25
    %29 = arith.cmpi slt, %28, %c9 : index
    cf.cond_br %29, ^bb21(%c0 : index), ^bb26
  ^bb21(%30: index):  // 2 preds: ^bb20, ^bb24
    %31 = arith.cmpi slt, %30, %c9 : index
    cf.cond_br %31, ^bb22(%c0 : index), ^bb25
  ^bb22(%32: index):  // 2 preds: ^bb21, ^bb23
    %33 = arith.cmpi slt, %32, %c3 : index
    cf.cond_br %33, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %34 = memref.load %arg2[%32] : memref<3xf32>
    memref.store %34, %alloc_1[%26, %28, %30, %32] : memref<3x9x9x3xf32>
    %35 = arith.addi %32, %c1 : index
    cf.br ^bb22(%35 : index)
  ^bb24:  // pred: ^bb22
    %36 = arith.addi %30, %c1 : index
    cf.br ^bb21(%36 : index)
  ^bb25:  // pred: ^bb21
    %37 = arith.addi %28, %c1 : index
    cf.br ^bb20(%37 : index)
  ^bb26:  // pred: ^bb20
    %38 = arith.addi %26, %c1 : index
    cf.br ^bb19(%38 : index)
  ^bb27(%39: index):  // 2 preds: ^bb19, ^bb40
    %40 = arith.cmpi slt, %39, %c3 : index
    cf.cond_br %40, ^bb28(%c0 : index), ^bb41
  ^bb28(%41: index):  // 2 preds: ^bb27, ^bb39
    %42 = arith.cmpi slt, %41, %c9 : index
    cf.cond_br %42, ^bb29(%c0 : index), ^bb40
  ^bb29(%43: index):  // 2 preds: ^bb28, ^bb38
    %44 = arith.cmpi slt, %43, %c9 : index
    cf.cond_br %44, ^bb30(%c0 : index), ^bb39
  ^bb30(%45: index):  // 2 preds: ^bb29, ^bb37
    %46 = arith.cmpi slt, %45, %c3 : index
    cf.cond_br %46, ^bb31(%c0 : index), ^bb38
  ^bb31(%47: index):  // 2 preds: ^bb30, ^bb36
    %48 = arith.cmpi slt, %47, %c2 : index
    cf.cond_br %48, ^bb32(%c0 : index), ^bb37
  ^bb32(%49: index):  // 2 preds: ^bb31, ^bb35
    %50 = arith.cmpi slt, %49, %c2 : index
    cf.cond_br %50, ^bb33(%c0 : index), ^bb36
  ^bb33(%51: index):  // 2 preds: ^bb32, ^bb34
    %52 = arith.cmpi slt, %51, %c3 : index
    cf.cond_br %52, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %53 = arith.addi %41, %47 : index
    %54 = arith.addi %43, %49 : index
    %55 = memref.load %alloc[%39, %53, %54, %51] : memref<3x10x10x3xf32>
    %56 = memref.load %alloc_0[%45, %47, %49, %51] : memref<3x2x2x3xf32>
    %57 = memref.load %alloc_1[%39, %41, %43, %45] : memref<3x9x9x3xf32>
    %58 = arith.mulf %55, %56 : f32
    %59 = arith.addf %57, %58 : f32
    memref.store %59, %alloc_1[%39, %41, %43, %45] : memref<3x9x9x3xf32>
    %60 = arith.addi %51, %c1 : index
    cf.br ^bb33(%60 : index)
  ^bb35:  // pred: ^bb33
    %61 = arith.addi %49, %c1 : index
    cf.br ^bb32(%61 : index)
  ^bb36:  // pred: ^bb32
    %62 = arith.addi %47, %c1 : index
    cf.br ^bb31(%62 : index)
  ^bb37:  // pred: ^bb31
    %63 = arith.addi %45, %c1 : index
    cf.br ^bb30(%63 : index)
  ^bb38:  // pred: ^bb30
    %64 = arith.addi %43, %c1 : index
    cf.br ^bb29(%64 : index)
  ^bb39:  // pred: ^bb29
    %65 = arith.addi %41, %c1 : index
    cf.br ^bb28(%65 : index)
  ^bb40:  // pred: ^bb28
    %66 = arith.addi %39, %c1 : index
    cf.br ^bb27(%66 : index)
  ^bb41:  // pred: ^bb27
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb42(%c0 : index)
  ^bb42(%67: index):  // 2 preds: ^bb41, ^bb49
    %68 = arith.cmpi slt, %67, %c3 : index
    cf.cond_br %68, ^bb43(%c0 : index), ^bb50
  ^bb43(%69: index):  // 2 preds: ^bb42, ^bb48
    %70 = arith.cmpi slt, %69, %c3 : index
    cf.cond_br %70, ^bb44(%c0 : index), ^bb49
  ^bb44(%71: index):  // 2 preds: ^bb43, ^bb47
    %72 = arith.cmpi slt, %71, %c9 : index
    cf.cond_br %72, ^bb45(%c0 : index), ^bb48
  ^bb45(%73: index):  // 2 preds: ^bb44, ^bb46
    %74 = arith.cmpi slt, %73, %c9 : index
    cf.cond_br %74, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %75 = memref.load %alloc_1[%67, %71, %73, %69] : memref<3x9x9x3xf32>
    memref.store %75, %alloc_2[%67, %69, %71, %73] : memref<3x3x9x9xf32>
    %76 = arith.addi %73, %c1 : index
    cf.br ^bb45(%76 : index)
  ^bb47:  // pred: ^bb45
    %77 = arith.addi %71, %c1 : index
    cf.br ^bb44(%77 : index)
  ^bb48:  // pred: ^bb44
    %78 = arith.addi %69, %c1 : index
    cf.br ^bb43(%78 : index)
  ^bb49:  // pred: ^bb43
    %79 = arith.addi %67, %c1 : index
    cf.br ^bb42(%79 : index)
  ^bb50:  // pred: ^bb42
    return %alloc_2 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module {
  func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c9 = arith.constant 9 : index
    %c2 = arith.constant 2 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c2 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c2 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %21 = memref.load %arg1[%13, %19, %15, %17] : memref<3x3x2x2xf32>
    memref.store %21, %alloc_0[%13, %15, %17, %19] : memref<3x2x2x3xf32>
    %22 = arith.addi %19, %c1 : index
    cf.br ^bb13(%22 : index)
  ^bb15:  // pred: ^bb13
    %23 = arith.addi %17, %c1 : index
    cf.br ^bb12(%23 : index)
  ^bb16:  // pred: ^bb12
    %24 = arith.addi %15, %c1 : index
    cf.br ^bb11(%24 : index)
  ^bb17:  // pred: ^bb11
    %25 = arith.addi %13, %c1 : index
    cf.br ^bb10(%25 : index)
  ^bb18:  // pred: ^bb10
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb19(%c0 : index)
  ^bb19(%26: index):  // 2 preds: ^bb18, ^bb26
    %27 = arith.cmpi slt, %26, %c3 : index
    cf.cond_br %27, ^bb20(%c0 : index), ^bb27(%c0 : index)
  ^bb20(%28: index):  // 2 preds: ^bb19, ^bb25
    %29 = arith.cmpi slt, %28, %c9 : index
    cf.cond_br %29, ^bb21(%c0 : index), ^bb26
  ^bb21(%30: index):  // 2 preds: ^bb20, ^bb24
    %31 = arith.cmpi slt, %30, %c9 : index
    cf.cond_br %31, ^bb22(%c0 : index), ^bb25
  ^bb22(%32: index):  // 2 preds: ^bb21, ^bb23
    %33 = arith.cmpi slt, %32, %c3 : index
    cf.cond_br %33, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %34 = memref.load %arg2[%32] : memref<3xf32>
    memref.store %34, %alloc_1[%26, %28, %30, %32] : memref<3x9x9x3xf32>
    %35 = arith.addi %32, %c1 : index
    cf.br ^bb22(%35 : index)
  ^bb24:  // pred: ^bb22
    %36 = arith.addi %30, %c1 : index
    cf.br ^bb21(%36 : index)
  ^bb25:  // pred: ^bb21
    %37 = arith.addi %28, %c1 : index
    cf.br ^bb20(%37 : index)
  ^bb26:  // pred: ^bb20
    %38 = arith.addi %26, %c1 : index
    cf.br ^bb19(%38 : index)
  ^bb27(%39: index):  // 2 preds: ^bb19, ^bb40
    %40 = arith.cmpi slt, %39, %c3 : index
    cf.cond_br %40, ^bb28(%c0 : index), ^bb41
  ^bb28(%41: index):  // 2 preds: ^bb27, ^bb39
    %42 = arith.cmpi slt, %41, %c9 : index
    cf.cond_br %42, ^bb29(%c0 : index), ^bb40
  ^bb29(%43: index):  // 2 preds: ^bb28, ^bb38
    %44 = arith.cmpi slt, %43, %c9 : index
    cf.cond_br %44, ^bb30(%c0 : index), ^bb39
  ^bb30(%45: index):  // 2 preds: ^bb29, ^bb37
    %46 = arith.cmpi slt, %45, %c3 : index
    cf.cond_br %46, ^bb31(%c0 : index), ^bb38
  ^bb31(%47: index):  // 2 preds: ^bb30, ^bb36
    %48 = arith.cmpi slt, %47, %c2 : index
    cf.cond_br %48, ^bb32(%c0 : index), ^bb37
  ^bb32(%49: index):  // 2 preds: ^bb31, ^bb35
    %50 = arith.cmpi slt, %49, %c2 : index
    cf.cond_br %50, ^bb33(%c0 : index), ^bb36
  ^bb33(%51: index):  // 2 preds: ^bb32, ^bb34
    %52 = arith.cmpi slt, %51, %c3 : index
    cf.cond_br %52, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %53 = arith.addi %41, %47 : index
    %54 = arith.addi %43, %49 : index
    %55 = memref.load %alloc[%39, %53, %54, %51] : memref<3x10x10x3xf32>
    %56 = memref.load %alloc_0[%45, %47, %49, %51] : memref<3x2x2x3xf32>
    %57 = memref.load %alloc_1[%39, %41, %43, %45] : memref<3x9x9x3xf32>
    %58 = arith.mulf %55, %56 : f32
    %59 = arith.addf %57, %58 : f32
    memref.store %59, %alloc_1[%39, %41, %43, %45] : memref<3x9x9x3xf32>
    %60 = arith.addi %51, %c1 : index
    cf.br ^bb33(%60 : index)
  ^bb35:  // pred: ^bb33
    %61 = arith.addi %49, %c1 : index
    cf.br ^bb32(%61 : index)
  ^bb36:  // pred: ^bb32
    %62 = arith.addi %47, %c1 : index
    cf.br ^bb31(%62 : index)
  ^bb37:  // pred: ^bb31
    %63 = arith.addi %45, %c1 : index
    cf.br ^bb30(%63 : index)
  ^bb38:  // pred: ^bb30
    %64 = arith.addi %43, %c1 : index
    cf.br ^bb29(%64 : index)
  ^bb39:  // pred: ^bb29
    %65 = arith.addi %41, %c1 : index
    cf.br ^bb28(%65 : index)
  ^bb40:  // pred: ^bb28
    %66 = arith.addi %39, %c1 : index
    cf.br ^bb27(%66 : index)
  ^bb41:  // pred: ^bb27
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb42(%c0 : index)
  ^bb42(%67: index):  // 2 preds: ^bb41, ^bb49
    %68 = arith.cmpi slt, %67, %c3 : index
    cf.cond_br %68, ^bb43(%c0 : index), ^bb50
  ^bb43(%69: index):  // 2 preds: ^bb42, ^bb48
    %70 = arith.cmpi slt, %69, %c3 : index
    cf.cond_br %70, ^bb44(%c0 : index), ^bb49
  ^bb44(%71: index):  // 2 preds: ^bb43, ^bb47
    %72 = arith.cmpi slt, %71, %c9 : index
    cf.cond_br %72, ^bb45(%c0 : index), ^bb48
  ^bb45(%73: index):  // 2 preds: ^bb44, ^bb46
    %74 = arith.cmpi slt, %73, %c9 : index
    cf.cond_br %74, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %75 = memref.load %alloc_1[%67, %71, %73, %69] : memref<3x9x9x3xf32>
    memref.store %75, %alloc_2[%67, %69, %71, %73] : memref<3x3x9x9xf32>
    %76 = arith.addi %73, %c1 : index
    cf.br ^bb45(%76 : index)
  ^bb47:  // pred: ^bb45
    %77 = arith.addi %71, %c1 : index
    cf.br ^bb44(%77 : index)
  ^bb48:  // pred: ^bb44
    %78 = arith.addi %69, %c1 : index
    cf.br ^bb43(%78 : index)
  ^bb49:  // pred: ^bb43
    %79 = arith.addi %67, %c1 : index
    cf.br ^bb42(%79 : index)
  ^bb50:  // pred: ^bb42
    return %alloc_2 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module {
  func.func @test_conv2d(%arg0: memref<3x3x10x10xf32>, %arg1: memref<3x3x2x2xf32>, %arg2: memref<3xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c9 = arith.constant 9 : index
    %c2 = arith.constant 2 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c2 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c2 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %21 = memref.load %arg1[%13, %19, %15, %17] : memref<3x3x2x2xf32>
    memref.store %21, %alloc_0[%13, %15, %17, %19] : memref<3x2x2x3xf32>
    %22 = arith.addi %19, %c1 : index
    cf.br ^bb13(%22 : index)
  ^bb15:  // pred: ^bb13
    %23 = arith.addi %17, %c1 : index
    cf.br ^bb12(%23 : index)
  ^bb16:  // pred: ^bb12
    %24 = arith.addi %15, %c1 : index
    cf.br ^bb11(%24 : index)
  ^bb17:  // pred: ^bb11
    %25 = arith.addi %13, %c1 : index
    cf.br ^bb10(%25 : index)
  ^bb18:  // pred: ^bb10
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb19(%c0 : index)
  ^bb19(%26: index):  // 2 preds: ^bb18, ^bb26
    %27 = arith.cmpi slt, %26, %c3 : index
    cf.cond_br %27, ^bb20(%c0 : index), ^bb27(%c0 : index)
  ^bb20(%28: index):  // 2 preds: ^bb19, ^bb25
    %29 = arith.cmpi slt, %28, %c9 : index
    cf.cond_br %29, ^bb21(%c0 : index), ^bb26
  ^bb21(%30: index):  // 2 preds: ^bb20, ^bb24
    %31 = arith.cmpi slt, %30, %c9 : index
    cf.cond_br %31, ^bb22(%c0 : index), ^bb25
  ^bb22(%32: index):  // 2 preds: ^bb21, ^bb23
    %33 = arith.cmpi slt, %32, %c3 : index
    cf.cond_br %33, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %34 = memref.load %arg2[%32] : memref<3xf32>
    memref.store %34, %alloc_1[%26, %28, %30, %32] : memref<3x9x9x3xf32>
    %35 = arith.addi %32, %c1 : index
    cf.br ^bb22(%35 : index)
  ^bb24:  // pred: ^bb22
    %36 = arith.addi %30, %c1 : index
    cf.br ^bb21(%36 : index)
  ^bb25:  // pred: ^bb21
    %37 = arith.addi %28, %c1 : index
    cf.br ^bb20(%37 : index)
  ^bb26:  // pred: ^bb20
    %38 = arith.addi %26, %c1 : index
    cf.br ^bb19(%38 : index)
  ^bb27(%39: index):  // 2 preds: ^bb19, ^bb40
    %40 = arith.cmpi slt, %39, %c3 : index
    cf.cond_br %40, ^bb28(%c0 : index), ^bb41
  ^bb28(%41: index):  // 2 preds: ^bb27, ^bb39
    %42 = arith.cmpi slt, %41, %c9 : index
    cf.cond_br %42, ^bb29(%c0 : index), ^bb40
  ^bb29(%43: index):  // 2 preds: ^bb28, ^bb38
    %44 = arith.cmpi slt, %43, %c9 : index
    cf.cond_br %44, ^bb30(%c0 : index), ^bb39
  ^bb30(%45: index):  // 2 preds: ^bb29, ^bb37
    %46 = arith.cmpi slt, %45, %c3 : index
    cf.cond_br %46, ^bb31(%c0 : index), ^bb38
  ^bb31(%47: index):  // 2 preds: ^bb30, ^bb36
    %48 = arith.cmpi slt, %47, %c2 : index
    cf.cond_br %48, ^bb32(%c0 : index), ^bb37
  ^bb32(%49: index):  // 2 preds: ^bb31, ^bb35
    %50 = arith.cmpi slt, %49, %c2 : index
    cf.cond_br %50, ^bb33(%c0 : index), ^bb36
  ^bb33(%51: index):  // 2 preds: ^bb32, ^bb34
    %52 = arith.cmpi slt, %51, %c3 : index
    cf.cond_br %52, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %53 = arith.addi %41, %47 : index
    %54 = arith.addi %43, %49 : index
    %55 = memref.load %alloc[%39, %53, %54, %51] : memref<3x10x10x3xf32>
    %56 = memref.load %alloc_0[%45, %47, %49, %51] : memref<3x2x2x3xf32>
    %57 = memref.load %alloc_1[%39, %41, %43, %45] : memref<3x9x9x3xf32>
    %58 = arith.mulf %55, %56 : f32
    %59 = arith.addf %57, %58 : f32
    memref.store %59, %alloc_1[%39, %41, %43, %45] : memref<3x9x9x3xf32>
    %60 = arith.addi %51, %c1 : index
    cf.br ^bb33(%60 : index)
  ^bb35:  // pred: ^bb33
    %61 = arith.addi %49, %c1 : index
    cf.br ^bb32(%61 : index)
  ^bb36:  // pred: ^bb32
    %62 = arith.addi %47, %c1 : index
    cf.br ^bb31(%62 : index)
  ^bb37:  // pred: ^bb31
    %63 = arith.addi %45, %c1 : index
    cf.br ^bb30(%63 : index)
  ^bb38:  // pred: ^bb30
    %64 = arith.addi %43, %c1 : index
    cf.br ^bb29(%64 : index)
  ^bb39:  // pred: ^bb29
    %65 = arith.addi %41, %c1 : index
    cf.br ^bb28(%65 : index)
  ^bb40:  // pred: ^bb28
    %66 = arith.addi %39, %c1 : index
    cf.br ^bb27(%66 : index)
  ^bb41:  // pred: ^bb27
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb42(%c0 : index)
  ^bb42(%67: index):  // 2 preds: ^bb41, ^bb49
    %68 = arith.cmpi slt, %67, %c3 : index
    cf.cond_br %68, ^bb43(%c0 : index), ^bb50
  ^bb43(%69: index):  // 2 preds: ^bb42, ^bb48
    %70 = arith.cmpi slt, %69, %c3 : index
    cf.cond_br %70, ^bb44(%c0 : index), ^bb49
  ^bb44(%71: index):  // 2 preds: ^bb43, ^bb47
    %72 = arith.cmpi slt, %71, %c9 : index
    cf.cond_br %72, ^bb45(%c0 : index), ^bb48
  ^bb45(%73: index):  // 2 preds: ^bb44, ^bb46
    %74 = arith.cmpi slt, %73, %c9 : index
    cf.cond_br %74, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %75 = memref.load %alloc_1[%67, %71, %73, %69] : memref<3x9x9x3xf32>
    memref.store %75, %alloc_2[%67, %69, %71, %73] : memref<3x3x9x9xf32>
    %76 = arith.addi %73, %c1 : index
    cf.br ^bb45(%76 : index)
  ^bb47:  // pred: ^bb45
    %77 = arith.addi %71, %c1 : index
    cf.br ^bb44(%77 : index)
  ^bb48:  // pred: ^bb44
    %78 = arith.addi %69, %c1 : index
    cf.br ^bb43(%78 : index)
  ^bb49:  // pred: ^bb43
    %79 = arith.addi %67, %c1 : index
    cf.br ^bb42(%79 : index)
  ^bb50:  // pred: ^bb42
    return %alloc_2 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module {
  llvm.func @test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64, %arg11: !llvm.ptr, %arg12: !llvm.ptr, %arg13: i64, %arg14: i64, %arg15: i64, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64, %arg21: i64, %arg22: !llvm.ptr, %arg23: !llvm.ptr, %arg24: i64, %arg25: i64, %arg26: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %1 = llvm.insertvalue %arg22, %0[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %2 = llvm.insertvalue %arg23, %1[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %3 = llvm.insertvalue %arg24, %2[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %4 = llvm.insertvalue %arg25, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %5 = llvm.insertvalue %arg26, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %6 = builtin.unrealized_conversion_cast %5 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<3xf32>
    %7 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %8 = llvm.insertvalue %arg11, %7[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg12, %8[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg13, %9[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg14, %10[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.insertvalue %arg18, %11[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.insertvalue %arg15, %12[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.insertvalue %arg19, %13[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.insertvalue %arg16, %14[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.insertvalue %arg20, %15[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.insertvalue %arg17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.insertvalue %arg21, %17[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = builtin.unrealized_conversion_cast %18 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x2x2xf32>
    %20 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %21 = llvm.insertvalue %arg0, %20[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.insertvalue %arg1, %21[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg2, %22[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.insertvalue %arg3, %23[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %25 = llvm.insertvalue %arg7, %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.insertvalue %arg4, %25[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %27 = llvm.insertvalue %arg8, %26[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.insertvalue %arg5, %27[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %29 = llvm.insertvalue %arg9, %28[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.insertvalue %arg6, %29[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %31 = llvm.insertvalue %arg10, %30[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %32 = builtin.unrealized_conversion_cast %31 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %33 = llvm.mlir.constant(9 : index) : i64
    %34 = llvm.mlir.constant(2 : index) : i64
    %35 = llvm.mlir.constant(10 : index) : i64
    %36 = llvm.mlir.constant(1 : index) : i64
    %37 = llvm.mlir.constant(3 : index) : i64
    %38 = llvm.mlir.constant(0 : index) : i64
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    llvm.br ^bb1(%38 : i64)
  ^bb1(%39: i64):  // 2 preds: ^bb0, ^bb8
    %40 = builtin.unrealized_conversion_cast %39 : i64 to index
    %41 = llvm.icmp "slt" %39, %37 : i64
    llvm.cond_br %41, ^bb2(%38 : i64), ^bb9
  ^bb2(%42: i64):  // 2 preds: ^bb1, ^bb7
    %43 = builtin.unrealized_conversion_cast %42 : i64 to index
    %44 = llvm.icmp "slt" %42, %35 : i64
    llvm.cond_br %44, ^bb3(%38 : i64), ^bb8
  ^bb3(%45: i64):  // 2 preds: ^bb2, ^bb6
    %46 = builtin.unrealized_conversion_cast %45 : i64 to index
    %47 = llvm.icmp "slt" %45, %35 : i64
    llvm.cond_br %47, ^bb4(%38 : i64), ^bb7
  ^bb4(%48: i64):  // 2 preds: ^bb3, ^bb5
    %49 = builtin.unrealized_conversion_cast %48 : i64 to index
    %50 = llvm.icmp "slt" %48, %37 : i64
    llvm.cond_br %50, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %51 = memref.load %32[%40, %49, %43, %46] : memref<3x3x10x10xf32>
    memref.store %51, %alloc[%40, %43, %46, %49] : memref<3x10x10x3xf32>
    %52 = llvm.add %48, %36 : i64
    llvm.br ^bb4(%52 : i64)
  ^bb6:  // pred: ^bb4
    %53 = llvm.add %45, %36 : i64
    llvm.br ^bb3(%53 : i64)
  ^bb7:  // pred: ^bb3
    %54 = llvm.add %42, %36 : i64
    llvm.br ^bb2(%54 : i64)
  ^bb8:  // pred: ^bb2
    %55 = llvm.add %39, %36 : i64
    llvm.br ^bb1(%55 : i64)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x2x2x3xf32>
    llvm.br ^bb10(%38 : i64)
  ^bb10(%56: i64):  // 2 preds: ^bb9, ^bb17
    %57 = builtin.unrealized_conversion_cast %56 : i64 to index
    %58 = llvm.icmp "slt" %56, %37 : i64
    llvm.cond_br %58, ^bb11(%38 : i64), ^bb18
  ^bb11(%59: i64):  // 2 preds: ^bb10, ^bb16
    %60 = builtin.unrealized_conversion_cast %59 : i64 to index
    %61 = llvm.icmp "slt" %59, %34 : i64
    llvm.cond_br %61, ^bb12(%38 : i64), ^bb17
  ^bb12(%62: i64):  // 2 preds: ^bb11, ^bb15
    %63 = builtin.unrealized_conversion_cast %62 : i64 to index
    %64 = llvm.icmp "slt" %62, %34 : i64
    llvm.cond_br %64, ^bb13(%38 : i64), ^bb16
  ^bb13(%65: i64):  // 2 preds: ^bb12, ^bb14
    %66 = builtin.unrealized_conversion_cast %65 : i64 to index
    %67 = llvm.icmp "slt" %65, %37 : i64
    llvm.cond_br %67, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %68 = memref.load %19[%57, %66, %60, %63] : memref<3x3x2x2xf32>
    memref.store %68, %alloc_0[%57, %60, %63, %66] : memref<3x2x2x3xf32>
    %69 = llvm.add %65, %36 : i64
    llvm.br ^bb13(%69 : i64)
  ^bb15:  // pred: ^bb13
    %70 = llvm.add %62, %36 : i64
    llvm.br ^bb12(%70 : i64)
  ^bb16:  // pred: ^bb12
    %71 = llvm.add %59, %36 : i64
    llvm.br ^bb11(%71 : i64)
  ^bb17:  // pred: ^bb11
    %72 = llvm.add %56, %36 : i64
    llvm.br ^bb10(%72 : i64)
  ^bb18:  // pred: ^bb10
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    llvm.br ^bb19(%38 : i64)
  ^bb19(%73: i64):  // 2 preds: ^bb18, ^bb26
    %74 = builtin.unrealized_conversion_cast %73 : i64 to index
    %75 = llvm.icmp "slt" %73, %37 : i64
    llvm.cond_br %75, ^bb20(%38 : i64), ^bb27(%38 : i64)
  ^bb20(%76: i64):  // 2 preds: ^bb19, ^bb25
    %77 = builtin.unrealized_conversion_cast %76 : i64 to index
    %78 = llvm.icmp "slt" %76, %33 : i64
    llvm.cond_br %78, ^bb21(%38 : i64), ^bb26
  ^bb21(%79: i64):  // 2 preds: ^bb20, ^bb24
    %80 = builtin.unrealized_conversion_cast %79 : i64 to index
    %81 = llvm.icmp "slt" %79, %33 : i64
    llvm.cond_br %81, ^bb22(%38 : i64), ^bb25
  ^bb22(%82: i64):  // 2 preds: ^bb21, ^bb23
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    %84 = llvm.icmp "slt" %82, %37 : i64
    llvm.cond_br %84, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %85 = memref.load %6[%83] : memref<3xf32>
    memref.store %85, %alloc_1[%74, %77, %80, %83] : memref<3x9x9x3xf32>
    %86 = llvm.add %82, %36 : i64
    llvm.br ^bb22(%86 : i64)
  ^bb24:  // pred: ^bb22
    %87 = llvm.add %79, %36 : i64
    llvm.br ^bb21(%87 : i64)
  ^bb25:  // pred: ^bb21
    %88 = llvm.add %76, %36 : i64
    llvm.br ^bb20(%88 : i64)
  ^bb26:  // pred: ^bb20
    %89 = llvm.add %73, %36 : i64
    llvm.br ^bb19(%89 : i64)
  ^bb27(%90: i64):  // 2 preds: ^bb19, ^bb40
    %91 = builtin.unrealized_conversion_cast %90 : i64 to index
    %92 = llvm.icmp "slt" %90, %37 : i64
    llvm.cond_br %92, ^bb28(%38 : i64), ^bb41
  ^bb28(%93: i64):  // 2 preds: ^bb27, ^bb39
    %94 = builtin.unrealized_conversion_cast %93 : i64 to index
    %95 = llvm.icmp "slt" %93, %33 : i64
    llvm.cond_br %95, ^bb29(%38 : i64), ^bb40
  ^bb29(%96: i64):  // 2 preds: ^bb28, ^bb38
    %97 = builtin.unrealized_conversion_cast %96 : i64 to index
    %98 = llvm.icmp "slt" %96, %33 : i64
    llvm.cond_br %98, ^bb30(%38 : i64), ^bb39
  ^bb30(%99: i64):  // 2 preds: ^bb29, ^bb37
    %100 = builtin.unrealized_conversion_cast %99 : i64 to index
    %101 = llvm.icmp "slt" %99, %37 : i64
    llvm.cond_br %101, ^bb31(%38 : i64), ^bb38
  ^bb31(%102: i64):  // 2 preds: ^bb30, ^bb36
    %103 = builtin.unrealized_conversion_cast %102 : i64 to index
    %104 = llvm.icmp "slt" %102, %34 : i64
    llvm.cond_br %104, ^bb32(%38 : i64), ^bb37
  ^bb32(%105: i64):  // 2 preds: ^bb31, ^bb35
    %106 = builtin.unrealized_conversion_cast %105 : i64 to index
    %107 = llvm.icmp "slt" %105, %34 : i64
    llvm.cond_br %107, ^bb33(%38 : i64), ^bb36
  ^bb33(%108: i64):  // 2 preds: ^bb32, ^bb34
    %109 = builtin.unrealized_conversion_cast %108 : i64 to index
    %110 = llvm.icmp "slt" %108, %37 : i64
    llvm.cond_br %110, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %111 = llvm.add %93, %102 : i64
    %112 = builtin.unrealized_conversion_cast %111 : i64 to index
    %113 = llvm.add %96, %105 : i64
    %114 = builtin.unrealized_conversion_cast %113 : i64 to index
    %115 = memref.load %alloc[%91, %112, %114, %109] : memref<3x10x10x3xf32>
    %116 = memref.load %alloc_0[%100, %103, %106, %109] : memref<3x2x2x3xf32>
    %117 = memref.load %alloc_1[%91, %94, %97, %100] : memref<3x9x9x3xf32>
    %118 = llvm.fmul %115, %116  : f32
    %119 = llvm.fadd %117, %118  : f32
    memref.store %119, %alloc_1[%91, %94, %97, %100] : memref<3x9x9x3xf32>
    %120 = llvm.add %108, %36 : i64
    llvm.br ^bb33(%120 : i64)
  ^bb35:  // pred: ^bb33
    %121 = llvm.add %105, %36 : i64
    llvm.br ^bb32(%121 : i64)
  ^bb36:  // pred: ^bb32
    %122 = llvm.add %102, %36 : i64
    llvm.br ^bb31(%122 : i64)
  ^bb37:  // pred: ^bb31
    %123 = llvm.add %99, %36 : i64
    llvm.br ^bb30(%123 : i64)
  ^bb38:  // pred: ^bb30
    %124 = llvm.add %96, %36 : i64
    llvm.br ^bb29(%124 : i64)
  ^bb39:  // pred: ^bb29
    %125 = llvm.add %93, %36 : i64
    llvm.br ^bb28(%125 : i64)
  ^bb40:  // pred: ^bb28
    %126 = llvm.add %90, %36 : i64
    llvm.br ^bb27(%126 : i64)
  ^bb41:  // pred: ^bb27
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %127 = builtin.unrealized_conversion_cast %alloc_2 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb42(%38 : i64)
  ^bb42(%128: i64):  // 2 preds: ^bb41, ^bb49
    %129 = builtin.unrealized_conversion_cast %128 : i64 to index
    %130 = llvm.icmp "slt" %128, %37 : i64
    llvm.cond_br %130, ^bb43(%38 : i64), ^bb50
  ^bb43(%131: i64):  // 2 preds: ^bb42, ^bb48
    %132 = builtin.unrealized_conversion_cast %131 : i64 to index
    %133 = llvm.icmp "slt" %131, %37 : i64
    llvm.cond_br %133, ^bb44(%38 : i64), ^bb49
  ^bb44(%134: i64):  // 2 preds: ^bb43, ^bb47
    %135 = builtin.unrealized_conversion_cast %134 : i64 to index
    %136 = llvm.icmp "slt" %134, %33 : i64
    llvm.cond_br %136, ^bb45(%38 : i64), ^bb48
  ^bb45(%137: i64):  // 2 preds: ^bb44, ^bb46
    %138 = builtin.unrealized_conversion_cast %137 : i64 to index
    %139 = llvm.icmp "slt" %137, %33 : i64
    llvm.cond_br %139, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %140 = memref.load %alloc_1[%129, %135, %138, %132] : memref<3x9x9x3xf32>
    memref.store %140, %alloc_2[%129, %132, %135, %138] : memref<3x3x9x9xf32>
    %141 = llvm.add %137, %36 : i64
    llvm.br ^bb45(%141 : i64)
  ^bb47:  // pred: ^bb45
    %142 = llvm.add %134, %36 : i64
    llvm.br ^bb44(%142 : i64)
  ^bb48:  // pred: ^bb44
    %143 = llvm.add %131, %36 : i64
    llvm.br ^bb43(%143 : i64)
  ^bb49:  // pred: ^bb43
    %144 = llvm.add %128, %36 : i64
    llvm.br ^bb42(%144 : i64)
  ^bb50:  // pred: ^bb42
    llvm.return %127 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %13 = llvm.extractvalue %12[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.extractvalue %12[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.extractvalue %12[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.extractvalue %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.extractvalue %12[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.extractvalue %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.extractvalue %12[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.extractvalue %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.extractvalue %12[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.extractvalue %12[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.extractvalue %12[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %25 = llvm.extractvalue %24[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.extractvalue %24[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.extractvalue %24[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.extractvalue %24[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %29 = llvm.extractvalue %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %30 = llvm.call @test_conv2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %25, %26, %27, %28, %29) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %30, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64, %arg11: !llvm.ptr, %arg12: !llvm.ptr, %arg13: i64, %arg14: i64, %arg15: i64, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64, %arg21: i64, %arg22: !llvm.ptr, %arg23: !llvm.ptr, %arg24: i64, %arg25: i64, %arg26: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %1 = llvm.insertvalue %arg22, %0[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %2 = llvm.insertvalue %arg23, %1[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %3 = llvm.insertvalue %arg24, %2[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %4 = llvm.insertvalue %arg25, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %5 = llvm.insertvalue %arg26, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %6 = builtin.unrealized_conversion_cast %5 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<3xf32>
    %7 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %8 = llvm.insertvalue %arg11, %7[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg12, %8[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg13, %9[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg14, %10[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.insertvalue %arg18, %11[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.insertvalue %arg15, %12[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.insertvalue %arg19, %13[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.insertvalue %arg16, %14[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.insertvalue %arg20, %15[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.insertvalue %arg17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.insertvalue %arg21, %17[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = builtin.unrealized_conversion_cast %18 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x2x2xf32>
    %20 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %21 = llvm.insertvalue %arg0, %20[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.insertvalue %arg1, %21[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg2, %22[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.insertvalue %arg3, %23[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %25 = llvm.insertvalue %arg7, %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.insertvalue %arg4, %25[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %27 = llvm.insertvalue %arg8, %26[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.insertvalue %arg5, %27[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %29 = llvm.insertvalue %arg9, %28[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.insertvalue %arg6, %29[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %31 = llvm.insertvalue %arg10, %30[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %32 = builtin.unrealized_conversion_cast %31 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %33 = llvm.mlir.constant(9 : index) : i64
    %34 = llvm.mlir.constant(2 : index) : i64
    %35 = llvm.mlir.constant(10 : index) : i64
    %36 = llvm.mlir.constant(1 : index) : i64
    %37 = llvm.mlir.constant(3 : index) : i64
    %38 = llvm.mlir.constant(0 : index) : i64
    %39 = llvm.mlir.constant(3 : index) : i64
    %40 = llvm.mlir.constant(10 : index) : i64
    %41 = llvm.mlir.constant(10 : index) : i64
    %42 = llvm.mlir.constant(3 : index) : i64
    %43 = llvm.mlir.constant(1 : index) : i64
    %44 = llvm.mlir.constant(30 : index) : i64
    %45 = llvm.mlir.constant(300 : index) : i64
    %46 = llvm.mlir.constant(900 : index) : i64
    %47 = llvm.mlir.zero : !llvm.ptr
    %48 = llvm.getelementptr %47[%46] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %49 = llvm.ptrtoint %48 : !llvm.ptr to i64
    %50 = llvm.mlir.constant(64 : index) : i64
    %51 = llvm.add %49, %50 : i64
    %52 = llvm.call @malloc(%51) : (i64) -> !llvm.ptr
    %53 = llvm.ptrtoint %52 : !llvm.ptr to i64
    %54 = llvm.mlir.constant(1 : index) : i64
    %55 = llvm.sub %50, %54 : i64
    %56 = llvm.add %53, %55 : i64
    %57 = llvm.urem %56, %50  : i64
    %58 = llvm.sub %56, %57 : i64
    %59 = llvm.inttoptr %58 : i64 to !llvm.ptr
    %60 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %61 = llvm.insertvalue %52, %60[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %59, %61[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %63 = llvm.mlir.constant(0 : index) : i64
    %64 = llvm.insertvalue %63, %62[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %65 = llvm.insertvalue %39, %64[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %66 = llvm.insertvalue %40, %65[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %67 = llvm.insertvalue %41, %66[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %68 = llvm.insertvalue %42, %67[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %69 = llvm.insertvalue %45, %68[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %70 = llvm.insertvalue %44, %69[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %71 = llvm.insertvalue %42, %70[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %72 = llvm.insertvalue %43, %71[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%38 : i64)
  ^bb1(%73: i64):  // 2 preds: ^bb0, ^bb8
    %74 = builtin.unrealized_conversion_cast %73 : i64 to index
    %75 = llvm.icmp "slt" %73, %37 : i64
    llvm.cond_br %75, ^bb2(%38 : i64), ^bb9
  ^bb2(%76: i64):  // 2 preds: ^bb1, ^bb7
    %77 = builtin.unrealized_conversion_cast %76 : i64 to index
    %78 = llvm.icmp "slt" %76, %35 : i64
    llvm.cond_br %78, ^bb3(%38 : i64), ^bb8
  ^bb3(%79: i64):  // 2 preds: ^bb2, ^bb6
    %80 = builtin.unrealized_conversion_cast %79 : i64 to index
    %81 = llvm.icmp "slt" %79, %35 : i64
    llvm.cond_br %81, ^bb4(%38 : i64), ^bb7
  ^bb4(%82: i64):  // 2 preds: ^bb3, ^bb5
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    %84 = llvm.icmp "slt" %82, %37 : i64
    llvm.cond_br %84, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %85 = llvm.extractvalue %31[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %86 = llvm.mlir.constant(300 : index) : i64
    %87 = llvm.mul %73, %86 : i64
    %88 = llvm.mlir.constant(100 : index) : i64
    %89 = llvm.mul %82, %88 : i64
    %90 = llvm.add %87, %89 : i64
    %91 = llvm.mlir.constant(10 : index) : i64
    %92 = llvm.mul %76, %91 : i64
    %93 = llvm.add %90, %92 : i64
    %94 = llvm.add %93, %79 : i64
    %95 = llvm.getelementptr %85[%94] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %96 = llvm.load %95 : !llvm.ptr -> f32
    %97 = llvm.extractvalue %72[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %98 = llvm.mlir.constant(300 : index) : i64
    %99 = llvm.mul %73, %98 : i64
    %100 = llvm.mlir.constant(30 : index) : i64
    %101 = llvm.mul %76, %100 : i64
    %102 = llvm.add %99, %101 : i64
    %103 = llvm.mlir.constant(3 : index) : i64
    %104 = llvm.mul %79, %103 : i64
    %105 = llvm.add %102, %104 : i64
    %106 = llvm.add %105, %82 : i64
    %107 = llvm.getelementptr %97[%106] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %96, %107 : f32, !llvm.ptr
    %108 = llvm.add %82, %36 : i64
    llvm.br ^bb4(%108 : i64)
  ^bb6:  // pred: ^bb4
    %109 = llvm.add %79, %36 : i64
    llvm.br ^bb3(%109 : i64)
  ^bb7:  // pred: ^bb3
    %110 = llvm.add %76, %36 : i64
    llvm.br ^bb2(%110 : i64)
  ^bb8:  // pred: ^bb2
    %111 = llvm.add %73, %36 : i64
    llvm.br ^bb1(%111 : i64)
  ^bb9:  // pred: ^bb1
    %112 = llvm.mlir.constant(3 : index) : i64
    %113 = llvm.mlir.constant(2 : index) : i64
    %114 = llvm.mlir.constant(2 : index) : i64
    %115 = llvm.mlir.constant(3 : index) : i64
    %116 = llvm.mlir.constant(1 : index) : i64
    %117 = llvm.mlir.constant(6 : index) : i64
    %118 = llvm.mlir.constant(12 : index) : i64
    %119 = llvm.mlir.constant(36 : index) : i64
    %120 = llvm.mlir.zero : !llvm.ptr
    %121 = llvm.getelementptr %120[%119] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %122 = llvm.ptrtoint %121 : !llvm.ptr to i64
    %123 = llvm.mlir.constant(64 : index) : i64
    %124 = llvm.add %122, %123 : i64
    %125 = llvm.call @malloc(%124) : (i64) -> !llvm.ptr
    %126 = llvm.ptrtoint %125 : !llvm.ptr to i64
    %127 = llvm.mlir.constant(1 : index) : i64
    %128 = llvm.sub %123, %127 : i64
    %129 = llvm.add %126, %128 : i64
    %130 = llvm.urem %129, %123  : i64
    %131 = llvm.sub %129, %130 : i64
    %132 = llvm.inttoptr %131 : i64 to !llvm.ptr
    %133 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %134 = llvm.insertvalue %125, %133[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %135 = llvm.insertvalue %132, %134[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.mlir.constant(0 : index) : i64
    %137 = llvm.insertvalue %136, %135[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %138 = llvm.insertvalue %112, %137[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %139 = llvm.insertvalue %113, %138[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %140 = llvm.insertvalue %114, %139[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %141 = llvm.insertvalue %115, %140[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %142 = llvm.insertvalue %118, %141[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %143 = llvm.insertvalue %117, %142[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %144 = llvm.insertvalue %115, %143[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %145 = llvm.insertvalue %116, %144[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%38 : i64)
  ^bb10(%146: i64):  // 2 preds: ^bb9, ^bb17
    %147 = builtin.unrealized_conversion_cast %146 : i64 to index
    %148 = llvm.icmp "slt" %146, %37 : i64
    llvm.cond_br %148, ^bb11(%38 : i64), ^bb18
  ^bb11(%149: i64):  // 2 preds: ^bb10, ^bb16
    %150 = builtin.unrealized_conversion_cast %149 : i64 to index
    %151 = llvm.icmp "slt" %149, %34 : i64
    llvm.cond_br %151, ^bb12(%38 : i64), ^bb17
  ^bb12(%152: i64):  // 2 preds: ^bb11, ^bb15
    %153 = builtin.unrealized_conversion_cast %152 : i64 to index
    %154 = llvm.icmp "slt" %152, %34 : i64
    llvm.cond_br %154, ^bb13(%38 : i64), ^bb16
  ^bb13(%155: i64):  // 2 preds: ^bb12, ^bb14
    %156 = builtin.unrealized_conversion_cast %155 : i64 to index
    %157 = llvm.icmp "slt" %155, %37 : i64
    llvm.cond_br %157, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %158 = llvm.extractvalue %18[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %159 = llvm.mlir.constant(12 : index) : i64
    %160 = llvm.mul %146, %159 : i64
    %161 = llvm.mlir.constant(4 : index) : i64
    %162 = llvm.mul %155, %161 : i64
    %163 = llvm.add %160, %162 : i64
    %164 = llvm.mlir.constant(2 : index) : i64
    %165 = llvm.mul %149, %164 : i64
    %166 = llvm.add %163, %165 : i64
    %167 = llvm.add %166, %152 : i64
    %168 = llvm.getelementptr %158[%167] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %169 = llvm.load %168 : !llvm.ptr -> f32
    %170 = llvm.extractvalue %145[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %171 = llvm.mlir.constant(12 : index) : i64
    %172 = llvm.mul %146, %171 : i64
    %173 = llvm.mlir.constant(6 : index) : i64
    %174 = llvm.mul %149, %173 : i64
    %175 = llvm.add %172, %174 : i64
    %176 = llvm.mlir.constant(3 : index) : i64
    %177 = llvm.mul %152, %176 : i64
    %178 = llvm.add %175, %177 : i64
    %179 = llvm.add %178, %155 : i64
    %180 = llvm.getelementptr %170[%179] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %169, %180 : f32, !llvm.ptr
    %181 = llvm.add %155, %36 : i64
    llvm.br ^bb13(%181 : i64)
  ^bb15:  // pred: ^bb13
    %182 = llvm.add %152, %36 : i64
    llvm.br ^bb12(%182 : i64)
  ^bb16:  // pred: ^bb12
    %183 = llvm.add %149, %36 : i64
    llvm.br ^bb11(%183 : i64)
  ^bb17:  // pred: ^bb11
    %184 = llvm.add %146, %36 : i64
    llvm.br ^bb10(%184 : i64)
  ^bb18:  // pred: ^bb10
    %185 = llvm.mlir.constant(3 : index) : i64
    %186 = llvm.mlir.constant(9 : index) : i64
    %187 = llvm.mlir.constant(9 : index) : i64
    %188 = llvm.mlir.constant(3 : index) : i64
    %189 = llvm.mlir.constant(1 : index) : i64
    %190 = llvm.mlir.constant(27 : index) : i64
    %191 = llvm.mlir.constant(243 : index) : i64
    %192 = llvm.mlir.constant(729 : index) : i64
    %193 = llvm.mlir.zero : !llvm.ptr
    %194 = llvm.getelementptr %193[%192] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %195 = llvm.ptrtoint %194 : !llvm.ptr to i64
    %196 = llvm.mlir.constant(64 : index) : i64
    %197 = llvm.add %195, %196 : i64
    %198 = llvm.call @malloc(%197) : (i64) -> !llvm.ptr
    %199 = llvm.ptrtoint %198 : !llvm.ptr to i64
    %200 = llvm.mlir.constant(1 : index) : i64
    %201 = llvm.sub %196, %200 : i64
    %202 = llvm.add %199, %201 : i64
    %203 = llvm.urem %202, %196  : i64
    %204 = llvm.sub %202, %203 : i64
    %205 = llvm.inttoptr %204 : i64 to !llvm.ptr
    %206 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %207 = llvm.insertvalue %198, %206[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %208 = llvm.insertvalue %205, %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %209 = llvm.mlir.constant(0 : index) : i64
    %210 = llvm.insertvalue %209, %208[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %211 = llvm.insertvalue %185, %210[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %212 = llvm.insertvalue %186, %211[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %213 = llvm.insertvalue %187, %212[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %214 = llvm.insertvalue %188, %213[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %215 = llvm.insertvalue %191, %214[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %216 = llvm.insertvalue %190, %215[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %217 = llvm.insertvalue %188, %216[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %218 = llvm.insertvalue %189, %217[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb19(%38 : i64)
  ^bb19(%219: i64):  // 2 preds: ^bb18, ^bb26
    %220 = builtin.unrealized_conversion_cast %219 : i64 to index
    %221 = llvm.icmp "slt" %219, %37 : i64
    llvm.cond_br %221, ^bb20(%38 : i64), ^bb27(%38 : i64)
  ^bb20(%222: i64):  // 2 preds: ^bb19, ^bb25
    %223 = builtin.unrealized_conversion_cast %222 : i64 to index
    %224 = llvm.icmp "slt" %222, %33 : i64
    llvm.cond_br %224, ^bb21(%38 : i64), ^bb26
  ^bb21(%225: i64):  // 2 preds: ^bb20, ^bb24
    %226 = builtin.unrealized_conversion_cast %225 : i64 to index
    %227 = llvm.icmp "slt" %225, %33 : i64
    llvm.cond_br %227, ^bb22(%38 : i64), ^bb25
  ^bb22(%228: i64):  // 2 preds: ^bb21, ^bb23
    %229 = builtin.unrealized_conversion_cast %228 : i64 to index
    %230 = llvm.icmp "slt" %228, %37 : i64
    llvm.cond_br %230, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %231 = llvm.extractvalue %5[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %232 = llvm.getelementptr %231[%228] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %233 = llvm.load %232 : !llvm.ptr -> f32
    %234 = llvm.extractvalue %218[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %235 = llvm.mlir.constant(243 : index) : i64
    %236 = llvm.mul %219, %235 : i64
    %237 = llvm.mlir.constant(27 : index) : i64
    %238 = llvm.mul %222, %237 : i64
    %239 = llvm.add %236, %238 : i64
    %240 = llvm.mlir.constant(3 : index) : i64
    %241 = llvm.mul %225, %240 : i64
    %242 = llvm.add %239, %241 : i64
    %243 = llvm.add %242, %228 : i64
    %244 = llvm.getelementptr %234[%243] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %233, %244 : f32, !llvm.ptr
    %245 = llvm.add %228, %36 : i64
    llvm.br ^bb22(%245 : i64)
  ^bb24:  // pred: ^bb22
    %246 = llvm.add %225, %36 : i64
    llvm.br ^bb21(%246 : i64)
  ^bb25:  // pred: ^bb21
    %247 = llvm.add %222, %36 : i64
    llvm.br ^bb20(%247 : i64)
  ^bb26:  // pred: ^bb20
    %248 = llvm.add %219, %36 : i64
    llvm.br ^bb19(%248 : i64)
  ^bb27(%249: i64):  // 2 preds: ^bb19, ^bb40
    %250 = builtin.unrealized_conversion_cast %249 : i64 to index
    %251 = llvm.icmp "slt" %249, %37 : i64
    llvm.cond_br %251, ^bb28(%38 : i64), ^bb41
  ^bb28(%252: i64):  // 2 preds: ^bb27, ^bb39
    %253 = builtin.unrealized_conversion_cast %252 : i64 to index
    %254 = llvm.icmp "slt" %252, %33 : i64
    llvm.cond_br %254, ^bb29(%38 : i64), ^bb40
  ^bb29(%255: i64):  // 2 preds: ^bb28, ^bb38
    %256 = builtin.unrealized_conversion_cast %255 : i64 to index
    %257 = llvm.icmp "slt" %255, %33 : i64
    llvm.cond_br %257, ^bb30(%38 : i64), ^bb39
  ^bb30(%258: i64):  // 2 preds: ^bb29, ^bb37
    %259 = builtin.unrealized_conversion_cast %258 : i64 to index
    %260 = llvm.icmp "slt" %258, %37 : i64
    llvm.cond_br %260, ^bb31(%38 : i64), ^bb38
  ^bb31(%261: i64):  // 2 preds: ^bb30, ^bb36
    %262 = builtin.unrealized_conversion_cast %261 : i64 to index
    %263 = llvm.icmp "slt" %261, %34 : i64
    llvm.cond_br %263, ^bb32(%38 : i64), ^bb37
  ^bb32(%264: i64):  // 2 preds: ^bb31, ^bb35
    %265 = builtin.unrealized_conversion_cast %264 : i64 to index
    %266 = llvm.icmp "slt" %264, %34 : i64
    llvm.cond_br %266, ^bb33(%38 : i64), ^bb36
  ^bb33(%267: i64):  // 2 preds: ^bb32, ^bb34
    %268 = builtin.unrealized_conversion_cast %267 : i64 to index
    %269 = llvm.icmp "slt" %267, %37 : i64
    llvm.cond_br %269, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %270 = llvm.add %252, %261 : i64
    %271 = builtin.unrealized_conversion_cast %270 : i64 to index
    %272 = llvm.add %255, %264 : i64
    %273 = builtin.unrealized_conversion_cast %272 : i64 to index
    %274 = llvm.extractvalue %72[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %275 = llvm.mlir.constant(300 : index) : i64
    %276 = llvm.mul %249, %275 : i64
    %277 = llvm.mlir.constant(30 : index) : i64
    %278 = llvm.mul %270, %277 : i64
    %279 = llvm.add %276, %278 : i64
    %280 = llvm.mlir.constant(3 : index) : i64
    %281 = llvm.mul %272, %280 : i64
    %282 = llvm.add %279, %281 : i64
    %283 = llvm.add %282, %267 : i64
    %284 = llvm.getelementptr %274[%283] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %285 = llvm.load %284 : !llvm.ptr -> f32
    %286 = llvm.extractvalue %145[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %287 = llvm.mlir.constant(12 : index) : i64
    %288 = llvm.mul %258, %287 : i64
    %289 = llvm.mlir.constant(6 : index) : i64
    %290 = llvm.mul %261, %289 : i64
    %291 = llvm.add %288, %290 : i64
    %292 = llvm.mlir.constant(3 : index) : i64
    %293 = llvm.mul %264, %292 : i64
    %294 = llvm.add %291, %293 : i64
    %295 = llvm.add %294, %267 : i64
    %296 = llvm.getelementptr %286[%295] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %297 = llvm.load %296 : !llvm.ptr -> f32
    %298 = llvm.extractvalue %218[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %299 = llvm.mlir.constant(243 : index) : i64
    %300 = llvm.mul %249, %299 : i64
    %301 = llvm.mlir.constant(27 : index) : i64
    %302 = llvm.mul %252, %301 : i64
    %303 = llvm.add %300, %302 : i64
    %304 = llvm.mlir.constant(3 : index) : i64
    %305 = llvm.mul %255, %304 : i64
    %306 = llvm.add %303, %305 : i64
    %307 = llvm.add %306, %258 : i64
    %308 = llvm.getelementptr %298[%307] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %309 = llvm.load %308 : !llvm.ptr -> f32
    %310 = llvm.fmul %285, %297  : f32
    %311 = llvm.fadd %309, %310  : f32
    %312 = llvm.extractvalue %218[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %313 = llvm.mlir.constant(243 : index) : i64
    %314 = llvm.mul %249, %313 : i64
    %315 = llvm.mlir.constant(27 : index) : i64
    %316 = llvm.mul %252, %315 : i64
    %317 = llvm.add %314, %316 : i64
    %318 = llvm.mlir.constant(3 : index) : i64
    %319 = llvm.mul %255, %318 : i64
    %320 = llvm.add %317, %319 : i64
    %321 = llvm.add %320, %258 : i64
    %322 = llvm.getelementptr %312[%321] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %311, %322 : f32, !llvm.ptr
    %323 = llvm.add %267, %36 : i64
    llvm.br ^bb33(%323 : i64)
  ^bb35:  // pred: ^bb33
    %324 = llvm.add %264, %36 : i64
    llvm.br ^bb32(%324 : i64)
  ^bb36:  // pred: ^bb32
    %325 = llvm.add %261, %36 : i64
    llvm.br ^bb31(%325 : i64)
  ^bb37:  // pred: ^bb31
    %326 = llvm.add %258, %36 : i64
    llvm.br ^bb30(%326 : i64)
  ^bb38:  // pred: ^bb30
    %327 = llvm.add %255, %36 : i64
    llvm.br ^bb29(%327 : i64)
  ^bb39:  // pred: ^bb29
    %328 = llvm.add %252, %36 : i64
    llvm.br ^bb28(%328 : i64)
  ^bb40:  // pred: ^bb28
    %329 = llvm.add %249, %36 : i64
    llvm.br ^bb27(%329 : i64)
  ^bb41:  // pred: ^bb27
    %330 = llvm.mlir.constant(3 : index) : i64
    %331 = llvm.mlir.constant(3 : index) : i64
    %332 = llvm.mlir.constant(9 : index) : i64
    %333 = llvm.mlir.constant(9 : index) : i64
    %334 = llvm.mlir.constant(1 : index) : i64
    %335 = llvm.mlir.constant(81 : index) : i64
    %336 = llvm.mlir.constant(243 : index) : i64
    %337 = llvm.mlir.constant(729 : index) : i64
    %338 = llvm.mlir.zero : !llvm.ptr
    %339 = llvm.getelementptr %338[%337] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %340 = llvm.ptrtoint %339 : !llvm.ptr to i64
    %341 = llvm.mlir.constant(64 : index) : i64
    %342 = llvm.add %340, %341 : i64
    %343 = llvm.call @malloc(%342) : (i64) -> !llvm.ptr
    %344 = llvm.ptrtoint %343 : !llvm.ptr to i64
    %345 = llvm.mlir.constant(1 : index) : i64
    %346 = llvm.sub %341, %345 : i64
    %347 = llvm.add %344, %346 : i64
    %348 = llvm.urem %347, %341  : i64
    %349 = llvm.sub %347, %348 : i64
    %350 = llvm.inttoptr %349 : i64 to !llvm.ptr
    %351 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %352 = llvm.insertvalue %343, %351[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %353 = llvm.insertvalue %350, %352[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %354 = llvm.mlir.constant(0 : index) : i64
    %355 = llvm.insertvalue %354, %353[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %356 = llvm.insertvalue %330, %355[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %357 = llvm.insertvalue %331, %356[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %358 = llvm.insertvalue %332, %357[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %359 = llvm.insertvalue %333, %358[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %360 = llvm.insertvalue %336, %359[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %361 = llvm.insertvalue %335, %360[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %362 = llvm.insertvalue %333, %361[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %363 = llvm.insertvalue %334, %362[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %364 = builtin.unrealized_conversion_cast %363 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x9x9xf32>
    %365 = builtin.unrealized_conversion_cast %364 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb42(%38 : i64)
  ^bb42(%366: i64):  // 2 preds: ^bb41, ^bb49
    %367 = builtin.unrealized_conversion_cast %366 : i64 to index
    %368 = llvm.icmp "slt" %366, %37 : i64
    llvm.cond_br %368, ^bb43(%38 : i64), ^bb50
  ^bb43(%369: i64):  // 2 preds: ^bb42, ^bb48
    %370 = builtin.unrealized_conversion_cast %369 : i64 to index
    %371 = llvm.icmp "slt" %369, %37 : i64
    llvm.cond_br %371, ^bb44(%38 : i64), ^bb49
  ^bb44(%372: i64):  // 2 preds: ^bb43, ^bb47
    %373 = builtin.unrealized_conversion_cast %372 : i64 to index
    %374 = llvm.icmp "slt" %372, %33 : i64
    llvm.cond_br %374, ^bb45(%38 : i64), ^bb48
  ^bb45(%375: i64):  // 2 preds: ^bb44, ^bb46
    %376 = builtin.unrealized_conversion_cast %375 : i64 to index
    %377 = llvm.icmp "slt" %375, %33 : i64
    llvm.cond_br %377, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %378 = llvm.extractvalue %218[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %379 = llvm.mlir.constant(243 : index) : i64
    %380 = llvm.mul %366, %379 : i64
    %381 = llvm.mlir.constant(27 : index) : i64
    %382 = llvm.mul %372, %381 : i64
    %383 = llvm.add %380, %382 : i64
    %384 = llvm.mlir.constant(3 : index) : i64
    %385 = llvm.mul %375, %384 : i64
    %386 = llvm.add %383, %385 : i64
    %387 = llvm.add %386, %369 : i64
    %388 = llvm.getelementptr %378[%387] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %389 = llvm.load %388 : !llvm.ptr -> f32
    %390 = llvm.extractvalue %363[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %391 = llvm.mlir.constant(243 : index) : i64
    %392 = llvm.mul %366, %391 : i64
    %393 = llvm.mlir.constant(81 : index) : i64
    %394 = llvm.mul %369, %393 : i64
    %395 = llvm.add %392, %394 : i64
    %396 = llvm.mlir.constant(9 : index) : i64
    %397 = llvm.mul %372, %396 : i64
    %398 = llvm.add %395, %397 : i64
    %399 = llvm.add %398, %375 : i64
    %400 = llvm.getelementptr %390[%399] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %389, %400 : f32, !llvm.ptr
    %401 = llvm.add %375, %36 : i64
    llvm.br ^bb45(%401 : i64)
  ^bb47:  // pred: ^bb45
    %402 = llvm.add %372, %36 : i64
    llvm.br ^bb44(%402 : i64)
  ^bb48:  // pred: ^bb44
    %403 = llvm.add %369, %36 : i64
    llvm.br ^bb43(%403 : i64)
  ^bb49:  // pred: ^bb43
    %404 = llvm.add %366, %36 : i64
    llvm.br ^bb42(%404 : i64)
  ^bb50:  // pred: ^bb42
    llvm.return %365 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %13 = llvm.extractvalue %12[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.extractvalue %12[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.extractvalue %12[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.extractvalue %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.extractvalue %12[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.extractvalue %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.extractvalue %12[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.extractvalue %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.extractvalue %12[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.extractvalue %12[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.extractvalue %12[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %25 = llvm.extractvalue %24[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.extractvalue %24[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.extractvalue %24[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.extractvalue %24[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %29 = llvm.extractvalue %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %30 = llvm.call @test_conv2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %25, %26, %27, %28, %29) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %30, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64, %arg11: !llvm.ptr, %arg12: !llvm.ptr, %arg13: i64, %arg14: i64, %arg15: i64, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64, %arg21: i64, %arg22: !llvm.ptr, %arg23: !llvm.ptr, %arg24: i64, %arg25: i64, %arg26: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %1 = llvm.insertvalue %arg22, %0[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %2 = llvm.insertvalue %arg23, %1[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %3 = llvm.insertvalue %arg24, %2[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %4 = llvm.insertvalue %arg25, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %5 = llvm.insertvalue %arg26, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %6 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %7 = llvm.insertvalue %arg11, %6[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg12, %7[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg13, %8[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg14, %9[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg18, %10[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.insertvalue %arg15, %11[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.insertvalue %arg19, %12[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.insertvalue %arg16, %13[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.insertvalue %arg20, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.insertvalue %arg17, %15[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.insertvalue %arg21, %16[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %19 = llvm.insertvalue %arg0, %18[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.insertvalue %arg1, %19[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.insertvalue %arg2, %20[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.insertvalue %arg3, %21[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg7, %22[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.insertvalue %arg4, %23[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %25 = llvm.insertvalue %arg8, %24[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.insertvalue %arg5, %25[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %27 = llvm.insertvalue %arg9, %26[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.insertvalue %arg6, %27[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %29 = llvm.insertvalue %arg10, %28[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.mlir.constant(9 : index) : i64
    %31 = llvm.mlir.constant(2 : index) : i64
    %32 = llvm.mlir.constant(10 : index) : i64
    %33 = llvm.mlir.constant(1 : index) : i64
    %34 = llvm.mlir.constant(3 : index) : i64
    %35 = llvm.mlir.constant(0 : index) : i64
    %36 = llvm.mlir.constant(3 : index) : i64
    %37 = llvm.mlir.constant(10 : index) : i64
    %38 = llvm.mlir.constant(10 : index) : i64
    %39 = llvm.mlir.constant(3 : index) : i64
    %40 = llvm.mlir.constant(1 : index) : i64
    %41 = llvm.mlir.constant(30 : index) : i64
    %42 = llvm.mlir.constant(300 : index) : i64
    %43 = llvm.mlir.constant(900 : index) : i64
    %44 = llvm.mlir.zero : !llvm.ptr
    %45 = llvm.getelementptr %44[%43] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %46 = llvm.ptrtoint %45 : !llvm.ptr to i64
    %47 = llvm.mlir.constant(64 : index) : i64
    %48 = llvm.add %46, %47 : i64
    %49 = llvm.call @malloc(%48) : (i64) -> !llvm.ptr
    %50 = llvm.ptrtoint %49 : !llvm.ptr to i64
    %51 = llvm.mlir.constant(1 : index) : i64
    %52 = llvm.sub %47, %51 : i64
    %53 = llvm.add %50, %52 : i64
    %54 = llvm.urem %53, %47  : i64
    %55 = llvm.sub %53, %54 : i64
    %56 = llvm.inttoptr %55 : i64 to !llvm.ptr
    %57 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %58 = llvm.insertvalue %49, %57[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.insertvalue %56, %58[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %60 = llvm.mlir.constant(0 : index) : i64
    %61 = llvm.insertvalue %60, %59[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %36, %61[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %63 = llvm.insertvalue %37, %62[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %64 = llvm.insertvalue %38, %63[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %65 = llvm.insertvalue %39, %64[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %66 = llvm.insertvalue %42, %65[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %67 = llvm.insertvalue %41, %66[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %68 = llvm.insertvalue %39, %67[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %69 = llvm.insertvalue %40, %68[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%35 : i64)
  ^bb1(%70: i64):  // 2 preds: ^bb0, ^bb8
    %71 = llvm.icmp "slt" %70, %34 : i64
    llvm.cond_br %71, ^bb2(%35 : i64), ^bb9
  ^bb2(%72: i64):  // 2 preds: ^bb1, ^bb7
    %73 = llvm.icmp "slt" %72, %32 : i64
    llvm.cond_br %73, ^bb3(%35 : i64), ^bb8
  ^bb3(%74: i64):  // 2 preds: ^bb2, ^bb6
    %75 = llvm.icmp "slt" %74, %32 : i64
    llvm.cond_br %75, ^bb4(%35 : i64), ^bb7
  ^bb4(%76: i64):  // 2 preds: ^bb3, ^bb5
    %77 = llvm.icmp "slt" %76, %34 : i64
    llvm.cond_br %77, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %78 = llvm.extractvalue %29[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %79 = llvm.mlir.constant(300 : index) : i64
    %80 = llvm.mul %70, %79 : i64
    %81 = llvm.mlir.constant(100 : index) : i64
    %82 = llvm.mul %76, %81 : i64
    %83 = llvm.add %80, %82 : i64
    %84 = llvm.mlir.constant(10 : index) : i64
    %85 = llvm.mul %72, %84 : i64
    %86 = llvm.add %83, %85 : i64
    %87 = llvm.add %86, %74 : i64
    %88 = llvm.getelementptr %78[%87] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %89 = llvm.load %88 : !llvm.ptr -> f32
    %90 = llvm.extractvalue %69[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %91 = llvm.mlir.constant(300 : index) : i64
    %92 = llvm.mul %70, %91 : i64
    %93 = llvm.mlir.constant(30 : index) : i64
    %94 = llvm.mul %72, %93 : i64
    %95 = llvm.add %92, %94 : i64
    %96 = llvm.mlir.constant(3 : index) : i64
    %97 = llvm.mul %74, %96 : i64
    %98 = llvm.add %95, %97 : i64
    %99 = llvm.add %98, %76 : i64
    %100 = llvm.getelementptr %90[%99] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %89, %100 : f32, !llvm.ptr
    %101 = llvm.add %76, %33 : i64
    llvm.br ^bb4(%101 : i64)
  ^bb6:  // pred: ^bb4
    %102 = llvm.add %74, %33 : i64
    llvm.br ^bb3(%102 : i64)
  ^bb7:  // pred: ^bb3
    %103 = llvm.add %72, %33 : i64
    llvm.br ^bb2(%103 : i64)
  ^bb8:  // pred: ^bb2
    %104 = llvm.add %70, %33 : i64
    llvm.br ^bb1(%104 : i64)
  ^bb9:  // pred: ^bb1
    %105 = llvm.mlir.constant(3 : index) : i64
    %106 = llvm.mlir.constant(2 : index) : i64
    %107 = llvm.mlir.constant(2 : index) : i64
    %108 = llvm.mlir.constant(3 : index) : i64
    %109 = llvm.mlir.constant(1 : index) : i64
    %110 = llvm.mlir.constant(6 : index) : i64
    %111 = llvm.mlir.constant(12 : index) : i64
    %112 = llvm.mlir.constant(36 : index) : i64
    %113 = llvm.mlir.zero : !llvm.ptr
    %114 = llvm.getelementptr %113[%112] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %115 = llvm.ptrtoint %114 : !llvm.ptr to i64
    %116 = llvm.mlir.constant(64 : index) : i64
    %117 = llvm.add %115, %116 : i64
    %118 = llvm.call @malloc(%117) : (i64) -> !llvm.ptr
    %119 = llvm.ptrtoint %118 : !llvm.ptr to i64
    %120 = llvm.mlir.constant(1 : index) : i64
    %121 = llvm.sub %116, %120 : i64
    %122 = llvm.add %119, %121 : i64
    %123 = llvm.urem %122, %116  : i64
    %124 = llvm.sub %122, %123 : i64
    %125 = llvm.inttoptr %124 : i64 to !llvm.ptr
    %126 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %127 = llvm.insertvalue %118, %126[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %128 = llvm.insertvalue %125, %127[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %129 = llvm.mlir.constant(0 : index) : i64
    %130 = llvm.insertvalue %129, %128[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.insertvalue %105, %130[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %132 = llvm.insertvalue %106, %131[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %133 = llvm.insertvalue %107, %132[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %134 = llvm.insertvalue %108, %133[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %135 = llvm.insertvalue %111, %134[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.insertvalue %110, %135[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.insertvalue %108, %136[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %138 = llvm.insertvalue %109, %137[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%35 : i64)
  ^bb10(%139: i64):  // 2 preds: ^bb9, ^bb17
    %140 = llvm.icmp "slt" %139, %34 : i64
    llvm.cond_br %140, ^bb11(%35 : i64), ^bb18
  ^bb11(%141: i64):  // 2 preds: ^bb10, ^bb16
    %142 = llvm.icmp "slt" %141, %31 : i64
    llvm.cond_br %142, ^bb12(%35 : i64), ^bb17
  ^bb12(%143: i64):  // 2 preds: ^bb11, ^bb15
    %144 = llvm.icmp "slt" %143, %31 : i64
    llvm.cond_br %144, ^bb13(%35 : i64), ^bb16
  ^bb13(%145: i64):  // 2 preds: ^bb12, ^bb14
    %146 = llvm.icmp "slt" %145, %34 : i64
    llvm.cond_br %146, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %147 = llvm.extractvalue %17[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %148 = llvm.mlir.constant(12 : index) : i64
    %149 = llvm.mul %139, %148 : i64
    %150 = llvm.mlir.constant(4 : index) : i64
    %151 = llvm.mul %145, %150 : i64
    %152 = llvm.add %149, %151 : i64
    %153 = llvm.mlir.constant(2 : index) : i64
    %154 = llvm.mul %141, %153 : i64
    %155 = llvm.add %152, %154 : i64
    %156 = llvm.add %155, %143 : i64
    %157 = llvm.getelementptr %147[%156] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %158 = llvm.load %157 : !llvm.ptr -> f32
    %159 = llvm.extractvalue %138[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %160 = llvm.mlir.constant(12 : index) : i64
    %161 = llvm.mul %139, %160 : i64
    %162 = llvm.mlir.constant(6 : index) : i64
    %163 = llvm.mul %141, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mul %143, %165 : i64
    %167 = llvm.add %164, %166 : i64
    %168 = llvm.add %167, %145 : i64
    %169 = llvm.getelementptr %159[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %158, %169 : f32, !llvm.ptr
    %170 = llvm.add %145, %33 : i64
    llvm.br ^bb13(%170 : i64)
  ^bb15:  // pred: ^bb13
    %171 = llvm.add %143, %33 : i64
    llvm.br ^bb12(%171 : i64)
  ^bb16:  // pred: ^bb12
    %172 = llvm.add %141, %33 : i64
    llvm.br ^bb11(%172 : i64)
  ^bb17:  // pred: ^bb11
    %173 = llvm.add %139, %33 : i64
    llvm.br ^bb10(%173 : i64)
  ^bb18:  // pred: ^bb10
    %174 = llvm.mlir.constant(3 : index) : i64
    %175 = llvm.mlir.constant(9 : index) : i64
    %176 = llvm.mlir.constant(9 : index) : i64
    %177 = llvm.mlir.constant(3 : index) : i64
    %178 = llvm.mlir.constant(1 : index) : i64
    %179 = llvm.mlir.constant(27 : index) : i64
    %180 = llvm.mlir.constant(243 : index) : i64
    %181 = llvm.mlir.constant(729 : index) : i64
    %182 = llvm.mlir.zero : !llvm.ptr
    %183 = llvm.getelementptr %182[%181] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %184 = llvm.ptrtoint %183 : !llvm.ptr to i64
    %185 = llvm.mlir.constant(64 : index) : i64
    %186 = llvm.add %184, %185 : i64
    %187 = llvm.call @malloc(%186) : (i64) -> !llvm.ptr
    %188 = llvm.ptrtoint %187 : !llvm.ptr to i64
    %189 = llvm.mlir.constant(1 : index) : i64
    %190 = llvm.sub %185, %189 : i64
    %191 = llvm.add %188, %190 : i64
    %192 = llvm.urem %191, %185  : i64
    %193 = llvm.sub %191, %192 : i64
    %194 = llvm.inttoptr %193 : i64 to !llvm.ptr
    %195 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %196 = llvm.insertvalue %187, %195[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %197 = llvm.insertvalue %194, %196[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %198 = llvm.mlir.constant(0 : index) : i64
    %199 = llvm.insertvalue %198, %197[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %200 = llvm.insertvalue %174, %199[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %201 = llvm.insertvalue %175, %200[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %202 = llvm.insertvalue %176, %201[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %203 = llvm.insertvalue %177, %202[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %204 = llvm.insertvalue %180, %203[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %205 = llvm.insertvalue %179, %204[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %206 = llvm.insertvalue %177, %205[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %207 = llvm.insertvalue %178, %206[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb19(%35 : i64)
  ^bb19(%208: i64):  // 2 preds: ^bb18, ^bb26
    %209 = llvm.icmp "slt" %208, %34 : i64
    llvm.cond_br %209, ^bb20(%35 : i64), ^bb27(%35 : i64)
  ^bb20(%210: i64):  // 2 preds: ^bb19, ^bb25
    %211 = llvm.icmp "slt" %210, %30 : i64
    llvm.cond_br %211, ^bb21(%35 : i64), ^bb26
  ^bb21(%212: i64):  // 2 preds: ^bb20, ^bb24
    %213 = llvm.icmp "slt" %212, %30 : i64
    llvm.cond_br %213, ^bb22(%35 : i64), ^bb25
  ^bb22(%214: i64):  // 2 preds: ^bb21, ^bb23
    %215 = llvm.icmp "slt" %214, %34 : i64
    llvm.cond_br %215, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %216 = llvm.extractvalue %5[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %217 = llvm.getelementptr %216[%214] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %218 = llvm.load %217 : !llvm.ptr -> f32
    %219 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %220 = llvm.mlir.constant(243 : index) : i64
    %221 = llvm.mul %208, %220 : i64
    %222 = llvm.mlir.constant(27 : index) : i64
    %223 = llvm.mul %210, %222 : i64
    %224 = llvm.add %221, %223 : i64
    %225 = llvm.mlir.constant(3 : index) : i64
    %226 = llvm.mul %212, %225 : i64
    %227 = llvm.add %224, %226 : i64
    %228 = llvm.add %227, %214 : i64
    %229 = llvm.getelementptr %219[%228] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %218, %229 : f32, !llvm.ptr
    %230 = llvm.add %214, %33 : i64
    llvm.br ^bb22(%230 : i64)
  ^bb24:  // pred: ^bb22
    %231 = llvm.add %212, %33 : i64
    llvm.br ^bb21(%231 : i64)
  ^bb25:  // pred: ^bb21
    %232 = llvm.add %210, %33 : i64
    llvm.br ^bb20(%232 : i64)
  ^bb26:  // pred: ^bb20
    %233 = llvm.add %208, %33 : i64
    llvm.br ^bb19(%233 : i64)
  ^bb27(%234: i64):  // 2 preds: ^bb19, ^bb40
    %235 = llvm.icmp "slt" %234, %34 : i64
    llvm.cond_br %235, ^bb28(%35 : i64), ^bb41
  ^bb28(%236: i64):  // 2 preds: ^bb27, ^bb39
    %237 = llvm.icmp "slt" %236, %30 : i64
    llvm.cond_br %237, ^bb29(%35 : i64), ^bb40
  ^bb29(%238: i64):  // 2 preds: ^bb28, ^bb38
    %239 = llvm.icmp "slt" %238, %30 : i64
    llvm.cond_br %239, ^bb30(%35 : i64), ^bb39
  ^bb30(%240: i64):  // 2 preds: ^bb29, ^bb37
    %241 = llvm.icmp "slt" %240, %34 : i64
    llvm.cond_br %241, ^bb31(%35 : i64), ^bb38
  ^bb31(%242: i64):  // 2 preds: ^bb30, ^bb36
    %243 = llvm.icmp "slt" %242, %31 : i64
    llvm.cond_br %243, ^bb32(%35 : i64), ^bb37
  ^bb32(%244: i64):  // 2 preds: ^bb31, ^bb35
    %245 = llvm.icmp "slt" %244, %31 : i64
    llvm.cond_br %245, ^bb33(%35 : i64), ^bb36
  ^bb33(%246: i64):  // 2 preds: ^bb32, ^bb34
    %247 = llvm.icmp "slt" %246, %34 : i64
    llvm.cond_br %247, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %248 = llvm.add %236, %242 : i64
    %249 = llvm.add %238, %244 : i64
    %250 = llvm.extractvalue %69[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %251 = llvm.mlir.constant(300 : index) : i64
    %252 = llvm.mul %234, %251 : i64
    %253 = llvm.mlir.constant(30 : index) : i64
    %254 = llvm.mul %248, %253 : i64
    %255 = llvm.add %252, %254 : i64
    %256 = llvm.mlir.constant(3 : index) : i64
    %257 = llvm.mul %249, %256 : i64
    %258 = llvm.add %255, %257 : i64
    %259 = llvm.add %258, %246 : i64
    %260 = llvm.getelementptr %250[%259] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %261 = llvm.load %260 : !llvm.ptr -> f32
    %262 = llvm.extractvalue %138[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %263 = llvm.mlir.constant(12 : index) : i64
    %264 = llvm.mul %240, %263 : i64
    %265 = llvm.mlir.constant(6 : index) : i64
    %266 = llvm.mul %242, %265 : i64
    %267 = llvm.add %264, %266 : i64
    %268 = llvm.mlir.constant(3 : index) : i64
    %269 = llvm.mul %244, %268 : i64
    %270 = llvm.add %267, %269 : i64
    %271 = llvm.add %270, %246 : i64
    %272 = llvm.getelementptr %262[%271] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %273 = llvm.load %272 : !llvm.ptr -> f32
    %274 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %275 = llvm.mlir.constant(243 : index) : i64
    %276 = llvm.mul %234, %275 : i64
    %277 = llvm.mlir.constant(27 : index) : i64
    %278 = llvm.mul %236, %277 : i64
    %279 = llvm.add %276, %278 : i64
    %280 = llvm.mlir.constant(3 : index) : i64
    %281 = llvm.mul %238, %280 : i64
    %282 = llvm.add %279, %281 : i64
    %283 = llvm.add %282, %240 : i64
    %284 = llvm.getelementptr %274[%283] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %285 = llvm.load %284 : !llvm.ptr -> f32
    %286 = llvm.fmul %261, %273  : f32
    %287 = llvm.fadd %285, %286  : f32
    %288 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %289 = llvm.mlir.constant(243 : index) : i64
    %290 = llvm.mul %234, %289 : i64
    %291 = llvm.mlir.constant(27 : index) : i64
    %292 = llvm.mul %236, %291 : i64
    %293 = llvm.add %290, %292 : i64
    %294 = llvm.mlir.constant(3 : index) : i64
    %295 = llvm.mul %238, %294 : i64
    %296 = llvm.add %293, %295 : i64
    %297 = llvm.add %296, %240 : i64
    %298 = llvm.getelementptr %288[%297] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %287, %298 : f32, !llvm.ptr
    %299 = llvm.add %246, %33 : i64
    llvm.br ^bb33(%299 : i64)
  ^bb35:  // pred: ^bb33
    %300 = llvm.add %244, %33 : i64
    llvm.br ^bb32(%300 : i64)
  ^bb36:  // pred: ^bb32
    %301 = llvm.add %242, %33 : i64
    llvm.br ^bb31(%301 : i64)
  ^bb37:  // pred: ^bb31
    %302 = llvm.add %240, %33 : i64
    llvm.br ^bb30(%302 : i64)
  ^bb38:  // pred: ^bb30
    %303 = llvm.add %238, %33 : i64
    llvm.br ^bb29(%303 : i64)
  ^bb39:  // pred: ^bb29
    %304 = llvm.add %236, %33 : i64
    llvm.br ^bb28(%304 : i64)
  ^bb40:  // pred: ^bb28
    %305 = llvm.add %234, %33 : i64
    llvm.br ^bb27(%305 : i64)
  ^bb41:  // pred: ^bb27
    %306 = llvm.mlir.constant(3 : index) : i64
    %307 = llvm.mlir.constant(3 : index) : i64
    %308 = llvm.mlir.constant(9 : index) : i64
    %309 = llvm.mlir.constant(9 : index) : i64
    %310 = llvm.mlir.constant(1 : index) : i64
    %311 = llvm.mlir.constant(81 : index) : i64
    %312 = llvm.mlir.constant(243 : index) : i64
    %313 = llvm.mlir.constant(729 : index) : i64
    %314 = llvm.mlir.zero : !llvm.ptr
    %315 = llvm.getelementptr %314[%313] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %316 = llvm.ptrtoint %315 : !llvm.ptr to i64
    %317 = llvm.mlir.constant(64 : index) : i64
    %318 = llvm.add %316, %317 : i64
    %319 = llvm.call @malloc(%318) : (i64) -> !llvm.ptr
    %320 = llvm.ptrtoint %319 : !llvm.ptr to i64
    %321 = llvm.mlir.constant(1 : index) : i64
    %322 = llvm.sub %317, %321 : i64
    %323 = llvm.add %320, %322 : i64
    %324 = llvm.urem %323, %317  : i64
    %325 = llvm.sub %323, %324 : i64
    %326 = llvm.inttoptr %325 : i64 to !llvm.ptr
    %327 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %328 = llvm.insertvalue %319, %327[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %329 = llvm.insertvalue %326, %328[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %330 = llvm.mlir.constant(0 : index) : i64
    %331 = llvm.insertvalue %330, %329[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %306, %331[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.insertvalue %307, %332[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %334 = llvm.insertvalue %308, %333[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %309, %334[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %312, %335[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = llvm.insertvalue %311, %336[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %338 = llvm.insertvalue %309, %337[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %339 = llvm.insertvalue %310, %338[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb42(%35 : i64)
  ^bb42(%340: i64):  // 2 preds: ^bb41, ^bb49
    %341 = llvm.icmp "slt" %340, %34 : i64
    llvm.cond_br %341, ^bb43(%35 : i64), ^bb50
  ^bb43(%342: i64):  // 2 preds: ^bb42, ^bb48
    %343 = llvm.icmp "slt" %342, %34 : i64
    llvm.cond_br %343, ^bb44(%35 : i64), ^bb49
  ^bb44(%344: i64):  // 2 preds: ^bb43, ^bb47
    %345 = llvm.icmp "slt" %344, %30 : i64
    llvm.cond_br %345, ^bb45(%35 : i64), ^bb48
  ^bb45(%346: i64):  // 2 preds: ^bb44, ^bb46
    %347 = llvm.icmp "slt" %346, %30 : i64
    llvm.cond_br %347, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %348 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %349 = llvm.mlir.constant(243 : index) : i64
    %350 = llvm.mul %340, %349 : i64
    %351 = llvm.mlir.constant(27 : index) : i64
    %352 = llvm.mul %344, %351 : i64
    %353 = llvm.add %350, %352 : i64
    %354 = llvm.mlir.constant(3 : index) : i64
    %355 = llvm.mul %346, %354 : i64
    %356 = llvm.add %353, %355 : i64
    %357 = llvm.add %356, %342 : i64
    %358 = llvm.getelementptr %348[%357] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %359 = llvm.load %358 : !llvm.ptr -> f32
    %360 = llvm.extractvalue %339[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %361 = llvm.mlir.constant(243 : index) : i64
    %362 = llvm.mul %340, %361 : i64
    %363 = llvm.mlir.constant(81 : index) : i64
    %364 = llvm.mul %342, %363 : i64
    %365 = llvm.add %362, %364 : i64
    %366 = llvm.mlir.constant(9 : index) : i64
    %367 = llvm.mul %344, %366 : i64
    %368 = llvm.add %365, %367 : i64
    %369 = llvm.add %368, %346 : i64
    %370 = llvm.getelementptr %360[%369] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %359, %370 : f32, !llvm.ptr
    %371 = llvm.add %346, %33 : i64
    llvm.br ^bb45(%371 : i64)
  ^bb47:  // pred: ^bb45
    %372 = llvm.add %344, %33 : i64
    llvm.br ^bb44(%372 : i64)
  ^bb48:  // pred: ^bb44
    %373 = llvm.add %342, %33 : i64
    llvm.br ^bb43(%373 : i64)
  ^bb49:  // pred: ^bb43
    %374 = llvm.add %340, %33 : i64
    llvm.br ^bb42(%374 : i64)
  ^bb50:  // pred: ^bb42
    llvm.return %339 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %13 = llvm.extractvalue %12[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.extractvalue %12[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.extractvalue %12[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.extractvalue %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.extractvalue %12[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.extractvalue %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.extractvalue %12[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.extractvalue %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.extractvalue %12[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.extractvalue %12[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.extractvalue %12[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %25 = llvm.extractvalue %24[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.extractvalue %24[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.extractvalue %24[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.extractvalue %24[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %29 = llvm.extractvalue %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %30 = llvm.call @test_conv2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %25, %26, %27, %28, %29) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %30, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64, %arg11: !llvm.ptr, %arg12: !llvm.ptr, %arg13: i64, %arg14: i64, %arg15: i64, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64, %arg21: i64, %arg22: !llvm.ptr, %arg23: !llvm.ptr, %arg24: i64, %arg25: i64, %arg26: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %1 = llvm.insertvalue %arg22, %0[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %2 = llvm.insertvalue %arg23, %1[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %3 = llvm.insertvalue %arg24, %2[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %4 = llvm.insertvalue %arg25, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %5 = llvm.insertvalue %arg26, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %6 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %7 = llvm.insertvalue %arg11, %6[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg12, %7[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg13, %8[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg14, %9[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg18, %10[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.insertvalue %arg15, %11[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.insertvalue %arg19, %12[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.insertvalue %arg16, %13[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.insertvalue %arg20, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.insertvalue %arg17, %15[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.insertvalue %arg21, %16[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %19 = llvm.insertvalue %arg0, %18[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.insertvalue %arg1, %19[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.insertvalue %arg2, %20[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.insertvalue %arg3, %21[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg7, %22[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.insertvalue %arg4, %23[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %25 = llvm.insertvalue %arg8, %24[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.insertvalue %arg5, %25[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %27 = llvm.insertvalue %arg9, %26[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.insertvalue %arg6, %27[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %29 = llvm.insertvalue %arg10, %28[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.mlir.constant(9 : index) : i64
    %31 = llvm.mlir.constant(2 : index) : i64
    %32 = llvm.mlir.constant(10 : index) : i64
    %33 = llvm.mlir.constant(1 : index) : i64
    %34 = llvm.mlir.constant(3 : index) : i64
    %35 = llvm.mlir.constant(0 : index) : i64
    %36 = llvm.mlir.constant(3 : index) : i64
    %37 = llvm.mlir.constant(10 : index) : i64
    %38 = llvm.mlir.constant(10 : index) : i64
    %39 = llvm.mlir.constant(3 : index) : i64
    %40 = llvm.mlir.constant(1 : index) : i64
    %41 = llvm.mlir.constant(30 : index) : i64
    %42 = llvm.mlir.constant(300 : index) : i64
    %43 = llvm.mlir.constant(900 : index) : i64
    %44 = llvm.mlir.zero : !llvm.ptr
    %45 = llvm.getelementptr %44[%43] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %46 = llvm.ptrtoint %45 : !llvm.ptr to i64
    %47 = llvm.mlir.constant(64 : index) : i64
    %48 = llvm.add %46, %47 : i64
    %49 = llvm.call @malloc(%48) : (i64) -> !llvm.ptr
    %50 = llvm.ptrtoint %49 : !llvm.ptr to i64
    %51 = llvm.mlir.constant(1 : index) : i64
    %52 = llvm.sub %47, %51 : i64
    %53 = llvm.add %50, %52 : i64
    %54 = llvm.urem %53, %47  : i64
    %55 = llvm.sub %53, %54 : i64
    %56 = llvm.inttoptr %55 : i64 to !llvm.ptr
    %57 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %58 = llvm.insertvalue %49, %57[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.insertvalue %56, %58[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %60 = llvm.mlir.constant(0 : index) : i64
    %61 = llvm.insertvalue %60, %59[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %36, %61[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %63 = llvm.insertvalue %37, %62[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %64 = llvm.insertvalue %38, %63[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %65 = llvm.insertvalue %39, %64[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %66 = llvm.insertvalue %42, %65[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %67 = llvm.insertvalue %41, %66[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %68 = llvm.insertvalue %39, %67[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %69 = llvm.insertvalue %40, %68[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%35 : i64)
  ^bb1(%70: i64):  // 2 preds: ^bb0, ^bb8
    %71 = llvm.icmp "slt" %70, %34 : i64
    llvm.cond_br %71, ^bb2(%35 : i64), ^bb9
  ^bb2(%72: i64):  // 2 preds: ^bb1, ^bb7
    %73 = llvm.icmp "slt" %72, %32 : i64
    llvm.cond_br %73, ^bb3(%35 : i64), ^bb8
  ^bb3(%74: i64):  // 2 preds: ^bb2, ^bb6
    %75 = llvm.icmp "slt" %74, %32 : i64
    llvm.cond_br %75, ^bb4(%35 : i64), ^bb7
  ^bb4(%76: i64):  // 2 preds: ^bb3, ^bb5
    %77 = llvm.icmp "slt" %76, %34 : i64
    llvm.cond_br %77, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %78 = llvm.extractvalue %29[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %79 = llvm.mlir.constant(300 : index) : i64
    %80 = llvm.mul %70, %79 : i64
    %81 = llvm.mlir.constant(100 : index) : i64
    %82 = llvm.mul %76, %81 : i64
    %83 = llvm.add %80, %82 : i64
    %84 = llvm.mlir.constant(10 : index) : i64
    %85 = llvm.mul %72, %84 : i64
    %86 = llvm.add %83, %85 : i64
    %87 = llvm.add %86, %74 : i64
    %88 = llvm.getelementptr %78[%87] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %89 = llvm.load %88 : !llvm.ptr -> f32
    %90 = llvm.extractvalue %69[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %91 = llvm.mlir.constant(300 : index) : i64
    %92 = llvm.mul %70, %91 : i64
    %93 = llvm.mlir.constant(30 : index) : i64
    %94 = llvm.mul %72, %93 : i64
    %95 = llvm.add %92, %94 : i64
    %96 = llvm.mlir.constant(3 : index) : i64
    %97 = llvm.mul %74, %96 : i64
    %98 = llvm.add %95, %97 : i64
    %99 = llvm.add %98, %76 : i64
    %100 = llvm.getelementptr %90[%99] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %89, %100 : f32, !llvm.ptr
    %101 = llvm.add %76, %33 : i64
    llvm.br ^bb4(%101 : i64)
  ^bb6:  // pred: ^bb4
    %102 = llvm.add %74, %33 : i64
    llvm.br ^bb3(%102 : i64)
  ^bb7:  // pred: ^bb3
    %103 = llvm.add %72, %33 : i64
    llvm.br ^bb2(%103 : i64)
  ^bb8:  // pred: ^bb2
    %104 = llvm.add %70, %33 : i64
    llvm.br ^bb1(%104 : i64)
  ^bb9:  // pred: ^bb1
    %105 = llvm.mlir.constant(3 : index) : i64
    %106 = llvm.mlir.constant(2 : index) : i64
    %107 = llvm.mlir.constant(2 : index) : i64
    %108 = llvm.mlir.constant(3 : index) : i64
    %109 = llvm.mlir.constant(1 : index) : i64
    %110 = llvm.mlir.constant(6 : index) : i64
    %111 = llvm.mlir.constant(12 : index) : i64
    %112 = llvm.mlir.constant(36 : index) : i64
    %113 = llvm.mlir.zero : !llvm.ptr
    %114 = llvm.getelementptr %113[%112] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %115 = llvm.ptrtoint %114 : !llvm.ptr to i64
    %116 = llvm.mlir.constant(64 : index) : i64
    %117 = llvm.add %115, %116 : i64
    %118 = llvm.call @malloc(%117) : (i64) -> !llvm.ptr
    %119 = llvm.ptrtoint %118 : !llvm.ptr to i64
    %120 = llvm.mlir.constant(1 : index) : i64
    %121 = llvm.sub %116, %120 : i64
    %122 = llvm.add %119, %121 : i64
    %123 = llvm.urem %122, %116  : i64
    %124 = llvm.sub %122, %123 : i64
    %125 = llvm.inttoptr %124 : i64 to !llvm.ptr
    %126 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %127 = llvm.insertvalue %118, %126[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %128 = llvm.insertvalue %125, %127[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %129 = llvm.mlir.constant(0 : index) : i64
    %130 = llvm.insertvalue %129, %128[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.insertvalue %105, %130[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %132 = llvm.insertvalue %106, %131[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %133 = llvm.insertvalue %107, %132[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %134 = llvm.insertvalue %108, %133[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %135 = llvm.insertvalue %111, %134[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.insertvalue %110, %135[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.insertvalue %108, %136[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %138 = llvm.insertvalue %109, %137[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%35 : i64)
  ^bb10(%139: i64):  // 2 preds: ^bb9, ^bb17
    %140 = llvm.icmp "slt" %139, %34 : i64
    llvm.cond_br %140, ^bb11(%35 : i64), ^bb18
  ^bb11(%141: i64):  // 2 preds: ^bb10, ^bb16
    %142 = llvm.icmp "slt" %141, %31 : i64
    llvm.cond_br %142, ^bb12(%35 : i64), ^bb17
  ^bb12(%143: i64):  // 2 preds: ^bb11, ^bb15
    %144 = llvm.icmp "slt" %143, %31 : i64
    llvm.cond_br %144, ^bb13(%35 : i64), ^bb16
  ^bb13(%145: i64):  // 2 preds: ^bb12, ^bb14
    %146 = llvm.icmp "slt" %145, %34 : i64
    llvm.cond_br %146, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %147 = llvm.extractvalue %17[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %148 = llvm.mlir.constant(12 : index) : i64
    %149 = llvm.mul %139, %148 : i64
    %150 = llvm.mlir.constant(4 : index) : i64
    %151 = llvm.mul %145, %150 : i64
    %152 = llvm.add %149, %151 : i64
    %153 = llvm.mlir.constant(2 : index) : i64
    %154 = llvm.mul %141, %153 : i64
    %155 = llvm.add %152, %154 : i64
    %156 = llvm.add %155, %143 : i64
    %157 = llvm.getelementptr %147[%156] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %158 = llvm.load %157 : !llvm.ptr -> f32
    %159 = llvm.extractvalue %138[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %160 = llvm.mlir.constant(12 : index) : i64
    %161 = llvm.mul %139, %160 : i64
    %162 = llvm.mlir.constant(6 : index) : i64
    %163 = llvm.mul %141, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mul %143, %165 : i64
    %167 = llvm.add %164, %166 : i64
    %168 = llvm.add %167, %145 : i64
    %169 = llvm.getelementptr %159[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %158, %169 : f32, !llvm.ptr
    %170 = llvm.add %145, %33 : i64
    llvm.br ^bb13(%170 : i64)
  ^bb15:  // pred: ^bb13
    %171 = llvm.add %143, %33 : i64
    llvm.br ^bb12(%171 : i64)
  ^bb16:  // pred: ^bb12
    %172 = llvm.add %141, %33 : i64
    llvm.br ^bb11(%172 : i64)
  ^bb17:  // pred: ^bb11
    %173 = llvm.add %139, %33 : i64
    llvm.br ^bb10(%173 : i64)
  ^bb18:  // pred: ^bb10
    %174 = llvm.mlir.constant(3 : index) : i64
    %175 = llvm.mlir.constant(9 : index) : i64
    %176 = llvm.mlir.constant(9 : index) : i64
    %177 = llvm.mlir.constant(3 : index) : i64
    %178 = llvm.mlir.constant(1 : index) : i64
    %179 = llvm.mlir.constant(27 : index) : i64
    %180 = llvm.mlir.constant(243 : index) : i64
    %181 = llvm.mlir.constant(729 : index) : i64
    %182 = llvm.mlir.zero : !llvm.ptr
    %183 = llvm.getelementptr %182[%181] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %184 = llvm.ptrtoint %183 : !llvm.ptr to i64
    %185 = llvm.mlir.constant(64 : index) : i64
    %186 = llvm.add %184, %185 : i64
    %187 = llvm.call @malloc(%186) : (i64) -> !llvm.ptr
    %188 = llvm.ptrtoint %187 : !llvm.ptr to i64
    %189 = llvm.mlir.constant(1 : index) : i64
    %190 = llvm.sub %185, %189 : i64
    %191 = llvm.add %188, %190 : i64
    %192 = llvm.urem %191, %185  : i64
    %193 = llvm.sub %191, %192 : i64
    %194 = llvm.inttoptr %193 : i64 to !llvm.ptr
    %195 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %196 = llvm.insertvalue %187, %195[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %197 = llvm.insertvalue %194, %196[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %198 = llvm.mlir.constant(0 : index) : i64
    %199 = llvm.insertvalue %198, %197[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %200 = llvm.insertvalue %174, %199[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %201 = llvm.insertvalue %175, %200[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %202 = llvm.insertvalue %176, %201[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %203 = llvm.insertvalue %177, %202[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %204 = llvm.insertvalue %180, %203[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %205 = llvm.insertvalue %179, %204[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %206 = llvm.insertvalue %177, %205[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %207 = llvm.insertvalue %178, %206[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb19(%35 : i64)
  ^bb19(%208: i64):  // 2 preds: ^bb18, ^bb26
    %209 = llvm.icmp "slt" %208, %34 : i64
    llvm.cond_br %209, ^bb20(%35 : i64), ^bb27(%35 : i64)
  ^bb20(%210: i64):  // 2 preds: ^bb19, ^bb25
    %211 = llvm.icmp "slt" %210, %30 : i64
    llvm.cond_br %211, ^bb21(%35 : i64), ^bb26
  ^bb21(%212: i64):  // 2 preds: ^bb20, ^bb24
    %213 = llvm.icmp "slt" %212, %30 : i64
    llvm.cond_br %213, ^bb22(%35 : i64), ^bb25
  ^bb22(%214: i64):  // 2 preds: ^bb21, ^bb23
    %215 = llvm.icmp "slt" %214, %34 : i64
    llvm.cond_br %215, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %216 = llvm.extractvalue %5[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %217 = llvm.getelementptr %216[%214] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %218 = llvm.load %217 : !llvm.ptr -> f32
    %219 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %220 = llvm.mlir.constant(243 : index) : i64
    %221 = llvm.mul %208, %220 : i64
    %222 = llvm.mlir.constant(27 : index) : i64
    %223 = llvm.mul %210, %222 : i64
    %224 = llvm.add %221, %223 : i64
    %225 = llvm.mlir.constant(3 : index) : i64
    %226 = llvm.mul %212, %225 : i64
    %227 = llvm.add %224, %226 : i64
    %228 = llvm.add %227, %214 : i64
    %229 = llvm.getelementptr %219[%228] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %218, %229 : f32, !llvm.ptr
    %230 = llvm.add %214, %33 : i64
    llvm.br ^bb22(%230 : i64)
  ^bb24:  // pred: ^bb22
    %231 = llvm.add %212, %33 : i64
    llvm.br ^bb21(%231 : i64)
  ^bb25:  // pred: ^bb21
    %232 = llvm.add %210, %33 : i64
    llvm.br ^bb20(%232 : i64)
  ^bb26:  // pred: ^bb20
    %233 = llvm.add %208, %33 : i64
    llvm.br ^bb19(%233 : i64)
  ^bb27(%234: i64):  // 2 preds: ^bb19, ^bb40
    %235 = llvm.icmp "slt" %234, %34 : i64
    llvm.cond_br %235, ^bb28(%35 : i64), ^bb41
  ^bb28(%236: i64):  // 2 preds: ^bb27, ^bb39
    %237 = llvm.icmp "slt" %236, %30 : i64
    llvm.cond_br %237, ^bb29(%35 : i64), ^bb40
  ^bb29(%238: i64):  // 2 preds: ^bb28, ^bb38
    %239 = llvm.icmp "slt" %238, %30 : i64
    llvm.cond_br %239, ^bb30(%35 : i64), ^bb39
  ^bb30(%240: i64):  // 2 preds: ^bb29, ^bb37
    %241 = llvm.icmp "slt" %240, %34 : i64
    llvm.cond_br %241, ^bb31(%35 : i64), ^bb38
  ^bb31(%242: i64):  // 2 preds: ^bb30, ^bb36
    %243 = llvm.icmp "slt" %242, %31 : i64
    llvm.cond_br %243, ^bb32(%35 : i64), ^bb37
  ^bb32(%244: i64):  // 2 preds: ^bb31, ^bb35
    %245 = llvm.icmp "slt" %244, %31 : i64
    llvm.cond_br %245, ^bb33(%35 : i64), ^bb36
  ^bb33(%246: i64):  // 2 preds: ^bb32, ^bb34
    %247 = llvm.icmp "slt" %246, %34 : i64
    llvm.cond_br %247, ^bb34, ^bb35
  ^bb34:  // pred: ^bb33
    %248 = llvm.add %236, %242 : i64
    %249 = llvm.add %238, %244 : i64
    %250 = llvm.extractvalue %69[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %251 = llvm.mlir.constant(300 : index) : i64
    %252 = llvm.mul %234, %251 : i64
    %253 = llvm.mlir.constant(30 : index) : i64
    %254 = llvm.mul %248, %253 : i64
    %255 = llvm.add %252, %254 : i64
    %256 = llvm.mlir.constant(3 : index) : i64
    %257 = llvm.mul %249, %256 : i64
    %258 = llvm.add %255, %257 : i64
    %259 = llvm.add %258, %246 : i64
    %260 = llvm.getelementptr %250[%259] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %261 = llvm.load %260 : !llvm.ptr -> f32
    %262 = llvm.extractvalue %138[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %263 = llvm.mlir.constant(12 : index) : i64
    %264 = llvm.mul %240, %263 : i64
    %265 = llvm.mlir.constant(6 : index) : i64
    %266 = llvm.mul %242, %265 : i64
    %267 = llvm.add %264, %266 : i64
    %268 = llvm.mlir.constant(3 : index) : i64
    %269 = llvm.mul %244, %268 : i64
    %270 = llvm.add %267, %269 : i64
    %271 = llvm.add %270, %246 : i64
    %272 = llvm.getelementptr %262[%271] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %273 = llvm.load %272 : !llvm.ptr -> f32
    %274 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %275 = llvm.mlir.constant(243 : index) : i64
    %276 = llvm.mul %234, %275 : i64
    %277 = llvm.mlir.constant(27 : index) : i64
    %278 = llvm.mul %236, %277 : i64
    %279 = llvm.add %276, %278 : i64
    %280 = llvm.mlir.constant(3 : index) : i64
    %281 = llvm.mul %238, %280 : i64
    %282 = llvm.add %279, %281 : i64
    %283 = llvm.add %282, %240 : i64
    %284 = llvm.getelementptr %274[%283] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %285 = llvm.load %284 : !llvm.ptr -> f32
    %286 = llvm.fmul %261, %273  : f32
    %287 = llvm.fadd %285, %286  : f32
    %288 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %289 = llvm.mlir.constant(243 : index) : i64
    %290 = llvm.mul %234, %289 : i64
    %291 = llvm.mlir.constant(27 : index) : i64
    %292 = llvm.mul %236, %291 : i64
    %293 = llvm.add %290, %292 : i64
    %294 = llvm.mlir.constant(3 : index) : i64
    %295 = llvm.mul %238, %294 : i64
    %296 = llvm.add %293, %295 : i64
    %297 = llvm.add %296, %240 : i64
    %298 = llvm.getelementptr %288[%297] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %287, %298 : f32, !llvm.ptr
    %299 = llvm.add %246, %33 : i64
    llvm.br ^bb33(%299 : i64)
  ^bb35:  // pred: ^bb33
    %300 = llvm.add %244, %33 : i64
    llvm.br ^bb32(%300 : i64)
  ^bb36:  // pred: ^bb32
    %301 = llvm.add %242, %33 : i64
    llvm.br ^bb31(%301 : i64)
  ^bb37:  // pred: ^bb31
    %302 = llvm.add %240, %33 : i64
    llvm.br ^bb30(%302 : i64)
  ^bb38:  // pred: ^bb30
    %303 = llvm.add %238, %33 : i64
    llvm.br ^bb29(%303 : i64)
  ^bb39:  // pred: ^bb29
    %304 = llvm.add %236, %33 : i64
    llvm.br ^bb28(%304 : i64)
  ^bb40:  // pred: ^bb28
    %305 = llvm.add %234, %33 : i64
    llvm.br ^bb27(%305 : i64)
  ^bb41:  // pred: ^bb27
    %306 = llvm.mlir.constant(3 : index) : i64
    %307 = llvm.mlir.constant(3 : index) : i64
    %308 = llvm.mlir.constant(9 : index) : i64
    %309 = llvm.mlir.constant(9 : index) : i64
    %310 = llvm.mlir.constant(1 : index) : i64
    %311 = llvm.mlir.constant(81 : index) : i64
    %312 = llvm.mlir.constant(243 : index) : i64
    %313 = llvm.mlir.constant(729 : index) : i64
    %314 = llvm.mlir.zero : !llvm.ptr
    %315 = llvm.getelementptr %314[%313] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %316 = llvm.ptrtoint %315 : !llvm.ptr to i64
    %317 = llvm.mlir.constant(64 : index) : i64
    %318 = llvm.add %316, %317 : i64
    %319 = llvm.call @malloc(%318) : (i64) -> !llvm.ptr
    %320 = llvm.ptrtoint %319 : !llvm.ptr to i64
    %321 = llvm.mlir.constant(1 : index) : i64
    %322 = llvm.sub %317, %321 : i64
    %323 = llvm.add %320, %322 : i64
    %324 = llvm.urem %323, %317  : i64
    %325 = llvm.sub %323, %324 : i64
    %326 = llvm.inttoptr %325 : i64 to !llvm.ptr
    %327 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %328 = llvm.insertvalue %319, %327[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %329 = llvm.insertvalue %326, %328[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %330 = llvm.mlir.constant(0 : index) : i64
    %331 = llvm.insertvalue %330, %329[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %306, %331[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.insertvalue %307, %332[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %334 = llvm.insertvalue %308, %333[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %309, %334[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %312, %335[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = llvm.insertvalue %311, %336[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %338 = llvm.insertvalue %309, %337[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %339 = llvm.insertvalue %310, %338[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb42(%35 : i64)
  ^bb42(%340: i64):  // 2 preds: ^bb41, ^bb49
    %341 = llvm.icmp "slt" %340, %34 : i64
    llvm.cond_br %341, ^bb43(%35 : i64), ^bb50
  ^bb43(%342: i64):  // 2 preds: ^bb42, ^bb48
    %343 = llvm.icmp "slt" %342, %34 : i64
    llvm.cond_br %343, ^bb44(%35 : i64), ^bb49
  ^bb44(%344: i64):  // 2 preds: ^bb43, ^bb47
    %345 = llvm.icmp "slt" %344, %30 : i64
    llvm.cond_br %345, ^bb45(%35 : i64), ^bb48
  ^bb45(%346: i64):  // 2 preds: ^bb44, ^bb46
    %347 = llvm.icmp "slt" %346, %30 : i64
    llvm.cond_br %347, ^bb46, ^bb47
  ^bb46:  // pred: ^bb45
    %348 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %349 = llvm.mlir.constant(243 : index) : i64
    %350 = llvm.mul %340, %349 : i64
    %351 = llvm.mlir.constant(27 : index) : i64
    %352 = llvm.mul %344, %351 : i64
    %353 = llvm.add %350, %352 : i64
    %354 = llvm.mlir.constant(3 : index) : i64
    %355 = llvm.mul %346, %354 : i64
    %356 = llvm.add %353, %355 : i64
    %357 = llvm.add %356, %342 : i64
    %358 = llvm.getelementptr %348[%357] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %359 = llvm.load %358 : !llvm.ptr -> f32
    %360 = llvm.extractvalue %339[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %361 = llvm.mlir.constant(243 : index) : i64
    %362 = llvm.mul %340, %361 : i64
    %363 = llvm.mlir.constant(81 : index) : i64
    %364 = llvm.mul %342, %363 : i64
    %365 = llvm.add %362, %364 : i64
    %366 = llvm.mlir.constant(9 : index) : i64
    %367 = llvm.mul %344, %366 : i64
    %368 = llvm.add %365, %367 : i64
    %369 = llvm.add %368, %346 : i64
    %370 = llvm.getelementptr %360[%369] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %359, %370 : f32, !llvm.ptr
    %371 = llvm.add %346, %33 : i64
    llvm.br ^bb45(%371 : i64)
  ^bb47:  // pred: ^bb45
    %372 = llvm.add %344, %33 : i64
    llvm.br ^bb44(%372 : i64)
  ^bb48:  // pred: ^bb44
    %373 = llvm.add %342, %33 : i64
    llvm.br ^bb43(%373 : i64)
  ^bb49:  // pred: ^bb43
    %374 = llvm.add %340, %33 : i64
    llvm.br ^bb42(%374 : i64)
  ^bb50:  // pred: ^bb42
    llvm.return %339 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %13 = llvm.extractvalue %12[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %14 = llvm.extractvalue %12[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.extractvalue %12[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.extractvalue %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.extractvalue %12[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.extractvalue %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.extractvalue %12[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.extractvalue %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.extractvalue %12[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.extractvalue %12[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.extractvalue %12[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %25 = llvm.extractvalue %24[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.extractvalue %24[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.extractvalue %24[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.extractvalue %24[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %29 = llvm.extractvalue %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %30 = llvm.call @test_conv2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %25, %26, %27, %28, %29) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %30, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}
