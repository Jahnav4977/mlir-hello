./build/bin/mx-opt --mlir-print-ir-after-all ./test/Mx/lineartest.mlir 2> ./test/IR_Dump/lineartest.txt

// -----// IR Dump After {anonymous}::MxToTosaLowerPass () //----- //
module {
  func.func @test_linear(%arg0: tensor<5x2xf32>, %arg1: tensor<3x2xf32>) -> tensor<5x3xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[1, 0]> : tensor<2xi32>}> : () -> tensor<2xi32>
    %1 = tosa.transpose %arg1, %0 : (tensor<3x2xf32>, tensor<2xi32>) -> tensor<2x3xf32>
    %2 = tosa.reshape %arg0 {new_shape = array<i64: 1, 5, 2>} : (tensor<5x2xf32>) -> tensor<1x5x2xf32>
    %3 = tosa.reshape %1 {new_shape = array<i64: 1, 2, 3>} : (tensor<2x3xf32>) -> tensor<1x2x3xf32>
    %4 = tosa.matmul %2, %3 : (tensor<1x5x2xf32>, tensor<1x2x3xf32>) -> tensor<1x5x3xf32>
    %5 = tosa.reshape %4 {new_shape = array<i64: 5, 3>} : (tensor<1x5x3xf32>) -> tensor<5x3xf32>
    %cast = tensor.cast %5 : tensor<5x3xf32> to tensor<5x3xf32>
    return %cast : tensor<5x3xf32>
  }
}


// -----// IR Dump After TosaToTensor (tosa-to-tensor) //----- //
module {
  func.func @test_linear(%arg0: tensor<5x2xf32>, %arg1: tensor<3x2xf32>) -> tensor<5x3xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[1, 0]> : tensor<2xi32>}> : () -> tensor<2xi32>
    %1 = tosa.transpose %arg1, %0 : (tensor<3x2xf32>, tensor<2xi32>) -> tensor<2x3xf32>
    %expanded = tensor.expand_shape %arg0 [[0, 1], [2]] output_shape [1, 5, 2] : tensor<5x2xf32> into tensor<1x5x2xf32>
    %expanded_0 = tensor.expand_shape %1 [[0, 1], [2]] output_shape [1, 2, 3] : tensor<2x3xf32> into tensor<1x2x3xf32>
    %2 = tosa.matmul %expanded, %expanded_0 : (tensor<1x5x2xf32>, tensor<1x2x3xf32>) -> tensor<1x5x3xf32>
    %collapsed = tensor.collapse_shape %2 [[0, 1], [2]] : tensor<1x5x3xf32> into tensor<5x3xf32>
    %cast = tensor.cast %collapsed : tensor<5x3xf32> to tensor<5x3xf32>
    return %cast : tensor<5x3xf32>
  }
}


// -----// IR Dump After TosaToLinalgNamed (tosa-to-linalg-named) //----- //
func.func @test_linear(%arg0: tensor<5x2xf32>, %arg1: tensor<3x2xf32>) -> tensor<5x3xf32> attributes {llvm.emit_c_interface} {
  %0 = "tosa.const"() <{value = dense<[1, 0]> : tensor<2xi32>}> : () -> tensor<2xi32>
  %1 = tensor.empty() : tensor<2x3xf32>
  %transposed = linalg.transpose ins(%arg1 : tensor<3x2xf32>) outs(%1 : tensor<2x3xf32>) permutation = [1, 0] 
  %expanded = tensor.expand_shape %arg0 [[0, 1], [2]] output_shape [1, 5, 2] : tensor<5x2xf32> into tensor<1x5x2xf32>
  %expanded_0 = tensor.expand_shape %transposed [[0, 1], [2]] output_shape [1, 2, 3] : tensor<2x3xf32> into tensor<1x2x3xf32>
  %cst = arith.constant 0.000000e+00 : f32
  %2 = tensor.empty() : tensor<1x5x3xf32>
  %3 = linalg.fill ins(%cst : f32) outs(%2 : tensor<1x5x3xf32>) -> tensor<1x5x3xf32>
  %4 = linalg.batch_matmul ins(%expanded, %expanded_0 : tensor<1x5x2xf32>, tensor<1x2x3xf32>) outs(%3 : tensor<1x5x3xf32>) -> tensor<1x5x3xf32>
  %collapsed = tensor.collapse_shape %4 [[0, 1], [2]] : tensor<1x5x3xf32> into tensor<5x3xf32>
  %cast = tensor.cast %collapsed : tensor<5x3xf32> to tensor<5x3xf32>
  return %cast : tensor<5x3xf32>
}

// -----// IR Dump After TosaToLinalg (tosa-to-linalg) //----- //
func.func @test_linear(%arg0: tensor<5x2xf32>, %arg1: tensor<3x2xf32>) -> tensor<5x3xf32> attributes {llvm.emit_c_interface} {
  %0 = "tosa.const"() <{value = dense<[1, 0]> : tensor<2xi32>}> : () -> tensor<2xi32>
  %1 = tensor.empty() : tensor<2x3xf32>
  %transposed = linalg.transpose ins(%arg1 : tensor<3x2xf32>) outs(%1 : tensor<2x3xf32>) permutation = [1, 0] 
  %expanded = tensor.expand_shape %arg0 [[0, 1], [2]] output_shape [1, 5, 2] : tensor<5x2xf32> into tensor<1x5x2xf32>
  %expanded_0 = tensor.expand_shape %transposed [[0, 1], [2]] output_shape [1, 2, 3] : tensor<2x3xf32> into tensor<1x2x3xf32>
  %cst = arith.constant 0.000000e+00 : f32
  %2 = tensor.empty() : tensor<1x5x3xf32>
  %3 = linalg.fill ins(%cst : f32) outs(%2 : tensor<1x5x3xf32>) -> tensor<1x5x3xf32>
  %4 = linalg.batch_matmul ins(%expanded, %expanded_0 : tensor<1x5x2xf32>, tensor<1x2x3xf32>) outs(%3 : tensor<1x5x3xf32>) -> tensor<1x5x3xf32>
  %collapsed = tensor.collapse_shape %4 [[0, 1], [2]] : tensor<1x5x3xf32> into tensor<5x3xf32>
  %cast = tensor.cast %collapsed : tensor<5x3xf32> to tensor<5x3xf32>
  return %cast : tensor<5x3xf32>
}

// -----// IR Dump After OneShotBufferize (one-shot-bufferize) //----- //
module {
  func.func @test_linear(%arg0: tensor<5x2xf32>, %arg1: tensor<3x2xf32>) -> tensor<5x3xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_memref %arg0 : memref<5x2xf32, strided<[?, ?], offset: ?>>
    %1 = bufferization.to_memref %arg1 : memref<3x2xf32, strided<[?, ?], offset: ?>>
    %2 = "tosa.const"() <{value = dense<[1, 0]> : tensor<2xi32>}> : () -> tensor<2xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    linalg.transpose ins(%1 : memref<3x2xf32, strided<[?, ?], offset: ?>>) outs(%alloc : memref<2x3xf32>) permutation = [1, 0] 
    %expand_shape = memref.expand_shape %0 [[0, 1], [2]] output_shape [1, 5, 2] : memref<5x2xf32, strided<[?, ?], offset: ?>> into memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %expand_shape_0 = memref.expand_shape %alloc [[0, 1], [2]] output_shape [1, 2, 3] : memref<2x3xf32> into memref<1x2x3xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_1 : memref<1x5x3xf32>)
    linalg.batch_matmul ins(%expand_shape, %expand_shape_0 : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>, memref<1x2x3xf32>) outs(%alloc_1 : memref<1x5x3xf32>)
    %collapse_shape = memref.collapse_shape %alloc_1 [[0, 1], [2]] : memref<1x5x3xf32> into memref<5x3xf32>
    %3 = bufferization.to_tensor %collapse_shape : memref<5x3xf32>
    return %3 : tensor<5x3xf32>
  }
}


// -----// IR Dump After FuncBufferize (func-bufferize) //----- //
module {
  func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg1 : memref<3x2xf32>
    %1 = bufferization.to_tensor %arg0 : memref<5x2xf32>
    %2 = bufferization.to_memref %1 : memref<5x2xf32, strided<[?, ?], offset: ?>>
    %3 = bufferization.to_memref %0 : memref<3x2xf32, strided<[?, ?], offset: ?>>
    %4 = "tosa.const"() <{value = dense<[1, 0]> : tensor<2xi32>}> : () -> tensor<2xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    linalg.transpose ins(%3 : memref<3x2xf32, strided<[?, ?], offset: ?>>) outs(%alloc : memref<2x3xf32>) permutation = [1, 0] 
    %expand_shape = memref.expand_shape %2 [[0, 1], [2]] output_shape [1, 5, 2] : memref<5x2xf32, strided<[?, ?], offset: ?>> into memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %expand_shape_0 = memref.expand_shape %alloc [[0, 1], [2]] output_shape [1, 2, 3] : memref<2x3xf32> into memref<1x2x3xf32>
    %cst = arith.constant 0.000000e+00 : f32
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_1 : memref<1x5x3xf32>)
    linalg.batch_matmul ins(%expand_shape, %expand_shape_0 : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>, memref<1x2x3xf32>) outs(%alloc_1 : memref<1x5x3xf32>)
    %collapse_shape = memref.collapse_shape %alloc_1 [[0, 1], [2]] : memref<1x5x3xf32> into memref<5x3xf32>
    %5 = bufferization.to_tensor %collapse_shape : memref<5x3xf32>
    %6 = bufferization.to_memref %5 : memref<5x3xf32>
    return %6 : memref<5x3xf32>
  }
}


// -----// IR Dump After ConvertLinalgToAffineLoopsPass (convert-linalg-to-affine-loops) //----- //
func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = bufferization.to_tensor %arg1 : memref<3x2xf32>
  %1 = bufferization.to_tensor %arg0 : memref<5x2xf32>
  %2 = bufferization.to_memref %1 : memref<5x2xf32, strided<[?, ?], offset: ?>>
  %3 = bufferization.to_memref %0 : memref<3x2xf32, strided<[?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
  affine.for %arg2 = 0 to 2 {
    affine.for %arg3 = 0 to 3 {
      %4 = affine.load %3[%arg3, %arg2] : memref<3x2xf32, strided<[?, ?], offset: ?>>
      affine.store %4, %alloc[%arg2, %arg3] : memref<2x3xf32>
    }
  }
  %expand_shape = memref.expand_shape %2 [[0, 1], [2]] output_shape [1, 5, 2] : memref<5x2xf32, strided<[?, ?], offset: ?>> into memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
  %expand_shape_0 = memref.expand_shape %alloc [[0, 1], [2]] output_shape [1, 2, 3] : memref<2x3xf32> into memref<1x2x3xf32>
  %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
  affine.for %arg2 = 0 to 1 {
    affine.for %arg3 = 0 to 5 {
      affine.for %arg4 = 0 to 3 {
        affine.store %cst, %alloc_1[%arg2, %arg3, %arg4] : memref<1x5x3xf32>
      }
    }
  }
  affine.for %arg2 = 0 to 1 {
    affine.for %arg3 = 0 to 5 {
      affine.for %arg4 = 0 to 3 {
        affine.for %arg5 = 0 to 2 {
          %4 = affine.load %expand_shape[%arg2, %arg3, %arg5] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
          %5 = affine.load %expand_shape_0[%arg2, %arg5, %arg4] : memref<1x2x3xf32>
          %6 = affine.load %alloc_1[%arg2, %arg3, %arg4] : memref<1x5x3xf32>
          %7 = arith.mulf %4, %5 : f32
          %8 = arith.addf %6, %7 : f32
          affine.store %8, %alloc_1[%arg2, %arg3, %arg4] : memref<1x5x3xf32>
        }
      }
    }
  }
  %collapse_shape = memref.collapse_shape %alloc_1 [[0, 1], [2]] : memref<1x5x3xf32> into memref<5x3xf32>
  return %collapse_shape : memref<5x3xf32>
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = bufferization.to_tensor %arg1 : memref<3x2xf32>
  %1 = bufferization.to_tensor %arg0 : memref<5x2xf32>
  %2 = bufferization.to_memref %1 : memref<5x2xf32, strided<[?, ?], offset: ?>>
  %3 = bufferization.to_memref %0 : memref<3x2xf32, strided<[?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
  %c0 = arith.constant 0 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  scf.for %arg2 = %c0 to %c2 step %c1 {
    %c0_8 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1_9 = arith.constant 1 : index
    scf.for %arg3 = %c0_8 to %c3 step %c1_9 {
      %4 = memref.load %3[%arg3, %arg2] : memref<3x2xf32, strided<[?, ?], offset: ?>>
      memref.store %4, %alloc[%arg2, %arg3] : memref<2x3xf32>
    }
  }
  %expand_shape = memref.expand_shape %2 [[0, 1], [2]] output_shape [1, 5, 2] : memref<5x2xf32, strided<[?, ?], offset: ?>> into memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
  %expand_shape_0 = memref.expand_shape %alloc [[0, 1], [2]] output_shape [1, 2, 3] : memref<2x3xf32> into memref<1x2x3xf32>
  %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
  %c0_2 = arith.constant 0 : index
  %c1_3 = arith.constant 1 : index
  %c1_4 = arith.constant 1 : index
  scf.for %arg2 = %c0_2 to %c1_3 step %c1_4 {
    %c0_8 = arith.constant 0 : index
    %c5 = arith.constant 5 : index
    %c1_9 = arith.constant 1 : index
    scf.for %arg3 = %c0_8 to %c5 step %c1_9 {
      %c0_10 = arith.constant 0 : index
      %c3 = arith.constant 3 : index
      %c1_11 = arith.constant 1 : index
      scf.for %arg4 = %c0_10 to %c3 step %c1_11 {
        memref.store %cst, %alloc_1[%arg2, %arg3, %arg4] : memref<1x5x3xf32>
      }
    }
  }
  %c0_5 = arith.constant 0 : index
  %c1_6 = arith.constant 1 : index
  %c1_7 = arith.constant 1 : index
  scf.for %arg2 = %c0_5 to %c1_6 step %c1_7 {
    %c0_8 = arith.constant 0 : index
    %c5 = arith.constant 5 : index
    %c1_9 = arith.constant 1 : index
    scf.for %arg3 = %c0_8 to %c5 step %c1_9 {
      %c0_10 = arith.constant 0 : index
      %c3 = arith.constant 3 : index
      %c1_11 = arith.constant 1 : index
      scf.for %arg4 = %c0_10 to %c3 step %c1_11 {
        %c0_12 = arith.constant 0 : index
        %c2_13 = arith.constant 2 : index
        %c1_14 = arith.constant 1 : index
        scf.for %arg5 = %c0_12 to %c2_13 step %c1_14 {
          %4 = memref.load %expand_shape[%arg2, %arg3, %arg5] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
          %5 = memref.load %expand_shape_0[%arg2, %arg5, %arg4] : memref<1x2x3xf32>
          %6 = memref.load %alloc_1[%arg2, %arg3, %arg4] : memref<1x5x3xf32>
          %7 = arith.mulf %4, %5 : f32
          %8 = arith.addf %6, %7 : f32
          memref.store %8, %alloc_1[%arg2, %arg3, %arg4] : memref<1x5x3xf32>
        }
      }
    }
  }
  %collapse_shape = memref.collapse_shape %alloc_1 [[0, 1], [2]] : memref<1x5x3xf32> into memref<5x3xf32>
  return %collapse_shape : memref<5x3xf32>
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = bufferization.to_tensor %arg1 : memref<3x2xf32>
    %1 = bufferization.to_tensor %arg0 : memref<5x2xf32>
    %2 = bufferization.to_memref %1 : memref<5x2xf32, strided<[?, ?], offset: ?>>
    %3 = bufferization.to_memref %0 : memref<3x2xf32, strided<[?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%4: index):  // 2 preds: ^bb0, ^bb5
    %5 = arith.cmpi slt, %4, %c2 : index
    cf.cond_br %5, ^bb2, ^bb6
  ^bb2:  // pred: ^bb1
    %c0_0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1_1 = arith.constant 1 : index
    cf.br ^bb3(%c0_0 : index)
  ^bb3(%6: index):  // 2 preds: ^bb2, ^bb4
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %8 = memref.load %3[%6, %4] : memref<3x2xf32, strided<[?, ?], offset: ?>>
    memref.store %8, %alloc[%4, %6] : memref<2x3xf32>
    %9 = arith.addi %6, %c1_1 : index
    cf.br ^bb3(%9 : index)
  ^bb5:  // pred: ^bb3
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb1(%10 : index)
  ^bb6:  // pred: ^bb1
    %expand_shape = memref.expand_shape %2 [[0, 1], [2]] output_shape [1, 5, 2] : memref<5x2xf32, strided<[?, ?], offset: ?>> into memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %expand_shape_2 = memref.expand_shape %alloc [[0, 1], [2]] output_shape [1, 2, 3] : memref<2x3xf32> into memref<1x2x3xf32>
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    %c0_4 = arith.constant 0 : index
    %c1_5 = arith.constant 1 : index
    %c1_6 = arith.constant 1 : index
    cf.br ^bb7(%c0_4 : index)
  ^bb7(%11: index):  // 2 preds: ^bb6, ^bb14
    %12 = arith.cmpi slt, %11, %c1_5 : index
    cf.cond_br %12, ^bb8, ^bb15
  ^bb8:  // pred: ^bb7
    %c0_7 = arith.constant 0 : index
    %c5 = arith.constant 5 : index
    %c1_8 = arith.constant 1 : index
    cf.br ^bb9(%c0_7 : index)
  ^bb9(%13: index):  // 2 preds: ^bb8, ^bb13
    %14 = arith.cmpi slt, %13, %c5 : index
    cf.cond_br %14, ^bb10, ^bb14
  ^bb10:  // pred: ^bb9
    %c0_9 = arith.constant 0 : index
    %c3_10 = arith.constant 3 : index
    %c1_11 = arith.constant 1 : index
    cf.br ^bb11(%c0_9 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb12
    %16 = arith.cmpi slt, %15, %c3_10 : index
    cf.cond_br %16, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    memref.store %cst, %alloc_3[%11, %13, %15] : memref<1x5x3xf32>
    %17 = arith.addi %15, %c1_11 : index
    cf.br ^bb11(%17 : index)
  ^bb13:  // pred: ^bb11
    %18 = arith.addi %13, %c1_8 : index
    cf.br ^bb9(%18 : index)
  ^bb14:  // pred: ^bb9
    %19 = arith.addi %11, %c1_6 : index
    cf.br ^bb7(%19 : index)
  ^bb15:  // pred: ^bb7
    %c0_12 = arith.constant 0 : index
    %c1_13 = arith.constant 1 : index
    %c1_14 = arith.constant 1 : index
    cf.br ^bb16(%c0_12 : index)
  ^bb16(%20: index):  // 2 preds: ^bb15, ^bb26
    %21 = arith.cmpi slt, %20, %c1_13 : index
    cf.cond_br %21, ^bb17, ^bb27
  ^bb17:  // pred: ^bb16
    %c0_15 = arith.constant 0 : index
    %c5_16 = arith.constant 5 : index
    %c1_17 = arith.constant 1 : index
    cf.br ^bb18(%c0_15 : index)
  ^bb18(%22: index):  // 2 preds: ^bb17, ^bb25
    %23 = arith.cmpi slt, %22, %c5_16 : index
    cf.cond_br %23, ^bb19, ^bb26
  ^bb19:  // pred: ^bb18
    %c0_18 = arith.constant 0 : index
    %c3_19 = arith.constant 3 : index
    %c1_20 = arith.constant 1 : index
    cf.br ^bb20(%c0_18 : index)
  ^bb20(%24: index):  // 2 preds: ^bb19, ^bb24
    %25 = arith.cmpi slt, %24, %c3_19 : index
    cf.cond_br %25, ^bb21, ^bb25
  ^bb21:  // pred: ^bb20
    %c0_21 = arith.constant 0 : index
    %c2_22 = arith.constant 2 : index
    %c1_23 = arith.constant 1 : index
    cf.br ^bb22(%c0_21 : index)
  ^bb22(%26: index):  // 2 preds: ^bb21, ^bb23
    %27 = arith.cmpi slt, %26, %c2_22 : index
    cf.cond_br %27, ^bb23, ^bb24
  ^bb23:  // pred: ^bb22
    %28 = memref.load %expand_shape[%20, %22, %26] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %29 = memref.load %expand_shape_2[%20, %26, %24] : memref<1x2x3xf32>
    %30 = memref.load %alloc_3[%20, %22, %24] : memref<1x5x3xf32>
    %31 = arith.mulf %28, %29 : f32
    %32 = arith.addf %30, %31 : f32
    memref.store %32, %alloc_3[%20, %22, %24] : memref<1x5x3xf32>
    %33 = arith.addi %26, %c1_23 : index
    cf.br ^bb22(%33 : index)
  ^bb24:  // pred: ^bb22
    %34 = arith.addi %24, %c1_20 : index
    cf.br ^bb20(%34 : index)
  ^bb25:  // pred: ^bb20
    %35 = arith.addi %22, %c1_17 : index
    cf.br ^bb18(%35 : index)
  ^bb26:  // pred: ^bb18
    %36 = arith.addi %20, %c1_14 : index
    cf.br ^bb16(%36 : index)
  ^bb27:  // pred: ^bb16
    %collapse_shape = memref.collapse_shape %alloc_3 [[0, 1], [2]] : memref<1x5x3xf32> into memref<5x3xf32>
    return %collapse_shape : memref<5x3xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
    %c5 = arith.constant 5 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %cast = memref.cast %arg0 : memref<5x2xf32> to memref<5x2xf32, strided<[?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb4
    %1 = arith.cmpi slt, %0, %c2 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb5
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb3
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %4 = memref.load %arg1[%2, %0] : memref<3x2xf32>
    memref.store %4, %alloc[%0, %2] : memref<2x3xf32>
    %5 = arith.addi %2, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb4:  // pred: ^bb2
    %6 = arith.addi %0, %c1 : index
    cf.br ^bb1(%6 : index)
  ^bb5:  // pred: ^bb1
    %expand_shape = memref.expand_shape %cast [[0, 1], [2]] output_shape [1, 5, 2] : memref<5x2xf32, strided<[?, ?], offset: ?>> into memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %expand_shape_0 = memref.expand_shape %alloc [[0, 1], [2]] output_shape [1, 2, 3] : memref<2x3xf32> into memref<1x2x3xf32>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    cf.br ^bb6(%c0 : index)
  ^bb6(%7: index):  // 2 preds: ^bb5, ^bb11
    %8 = arith.cmpi slt, %7, %c1 : index
    cf.cond_br %8, ^bb7(%c0 : index), ^bb12(%c0 : index)
  ^bb7(%9: index):  // 2 preds: ^bb6, ^bb10
    %10 = arith.cmpi slt, %9, %c5 : index
    cf.cond_br %10, ^bb8(%c0 : index), ^bb11
  ^bb8(%11: index):  // 2 preds: ^bb7, ^bb9
    %12 = arith.cmpi slt, %11, %c3 : index
    cf.cond_br %12, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    memref.store %cst, %alloc_1[%7, %9, %11] : memref<1x5x3xf32>
    %13 = arith.addi %11, %c1 : index
    cf.br ^bb8(%13 : index)
  ^bb10:  // pred: ^bb8
    %14 = arith.addi %9, %c1 : index
    cf.br ^bb7(%14 : index)
  ^bb11:  // pred: ^bb7
    %15 = arith.addi %7, %c1 : index
    cf.br ^bb6(%15 : index)
  ^bb12(%16: index):  // 2 preds: ^bb6, ^bb19
    %17 = arith.cmpi slt, %16, %c1 : index
    cf.cond_br %17, ^bb13(%c0 : index), ^bb20
  ^bb13(%18: index):  // 2 preds: ^bb12, ^bb18
    %19 = arith.cmpi slt, %18, %c5 : index
    cf.cond_br %19, ^bb14(%c0 : index), ^bb19
  ^bb14(%20: index):  // 2 preds: ^bb13, ^bb17
    %21 = arith.cmpi slt, %20, %c3 : index
    cf.cond_br %21, ^bb15(%c0 : index), ^bb18
  ^bb15(%22: index):  // 2 preds: ^bb14, ^bb16
    %23 = arith.cmpi slt, %22, %c2 : index
    cf.cond_br %23, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %24 = memref.load %expand_shape[%16, %18, %22] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %25 = memref.load %expand_shape_0[%16, %22, %20] : memref<1x2x3xf32>
    %26 = memref.load %alloc_1[%16, %18, %20] : memref<1x5x3xf32>
    %27 = arith.mulf %24, %25 : f32
    %28 = arith.addf %26, %27 : f32
    memref.store %28, %alloc_1[%16, %18, %20] : memref<1x5x3xf32>
    %29 = arith.addi %22, %c1 : index
    cf.br ^bb15(%29 : index)
  ^bb17:  // pred: ^bb15
    %30 = arith.addi %20, %c1 : index
    cf.br ^bb14(%30 : index)
  ^bb18:  // pred: ^bb14
    %31 = arith.addi %18, %c1 : index
    cf.br ^bb13(%31 : index)
  ^bb19:  // pred: ^bb13
    %32 = arith.addi %16, %c1 : index
    cf.br ^bb12(%32 : index)
  ^bb20:  // pred: ^bb12
    %collapse_shape = memref.collapse_shape %alloc_1 [[0, 1], [2]] : memref<1x5x3xf32> into memref<5x3xf32>
    return %collapse_shape : memref<5x3xf32>
  }
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module {
  func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
    %c10 = arith.constant 10 : index
    %c5 = arith.constant 5 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb4
    %1 = arith.cmpi slt, %0, %c2 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb5
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb3
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %4 = memref.load %arg1[%2, %0] : memref<3x2xf32>
    memref.store %4, %alloc[%0, %2] : memref<2x3xf32>
    %5 = arith.addi %2, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb4:  // pred: ^bb2
    %6 = arith.addi %0, %c1 : index
    cf.br ^bb1(%6 : index)
  ^bb5:  // pred: ^bb1
    %base_buffer, %offset, %sizes:2, %strides:2 = memref.extract_strided_metadata %arg0 : memref<5x2xf32> -> memref<f32>, index, index, index, index, index
    %reinterpret_cast = memref.reinterpret_cast %base_buffer to offset: [%c0], sizes: [1, 5, 2], strides: [%c10, %c2, %c1] : memref<f32> to memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %reinterpret_cast_0 = memref.reinterpret_cast %alloc to offset: [0], sizes: [1, 2, 3], strides: [6, 3, 1] : memref<2x3xf32> to memref<1x2x3xf32>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    cf.br ^bb6(%c0 : index)
  ^bb6(%7: index):  // 2 preds: ^bb5, ^bb11
    %8 = arith.cmpi slt, %7, %c1 : index
    cf.cond_br %8, ^bb7(%c0 : index), ^bb12(%c0 : index)
  ^bb7(%9: index):  // 2 preds: ^bb6, ^bb10
    %10 = arith.cmpi slt, %9, %c5 : index
    cf.cond_br %10, ^bb8(%c0 : index), ^bb11
  ^bb8(%11: index):  // 2 preds: ^bb7, ^bb9
    %12 = arith.cmpi slt, %11, %c3 : index
    cf.cond_br %12, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    memref.store %cst, %alloc_1[%7, %9, %11] : memref<1x5x3xf32>
    %13 = arith.addi %11, %c1 : index
    cf.br ^bb8(%13 : index)
  ^bb10:  // pred: ^bb8
    %14 = arith.addi %9, %c1 : index
    cf.br ^bb7(%14 : index)
  ^bb11:  // pred: ^bb7
    %15 = arith.addi %7, %c1 : index
    cf.br ^bb6(%15 : index)
  ^bb12(%16: index):  // 2 preds: ^bb6, ^bb19
    %17 = arith.cmpi slt, %16, %c1 : index
    cf.cond_br %17, ^bb13(%c0 : index), ^bb20
  ^bb13(%18: index):  // 2 preds: ^bb12, ^bb18
    %19 = arith.cmpi slt, %18, %c5 : index
    cf.cond_br %19, ^bb14(%c0 : index), ^bb19
  ^bb14(%20: index):  // 2 preds: ^bb13, ^bb17
    %21 = arith.cmpi slt, %20, %c3 : index
    cf.cond_br %21, ^bb15(%c0 : index), ^bb18
  ^bb15(%22: index):  // 2 preds: ^bb14, ^bb16
    %23 = arith.cmpi slt, %22, %c2 : index
    cf.cond_br %23, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %24 = memref.load %reinterpret_cast[%16, %18, %22] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %25 = memref.load %reinterpret_cast_0[%16, %22, %20] : memref<1x2x3xf32>
    %26 = memref.load %alloc_1[%16, %18, %20] : memref<1x5x3xf32>
    %27 = arith.mulf %24, %25 : f32
    %28 = arith.addf %26, %27 : f32
    memref.store %28, %alloc_1[%16, %18, %20] : memref<1x5x3xf32>
    %29 = arith.addi %22, %c1 : index
    cf.br ^bb15(%29 : index)
  ^bb17:  // pred: ^bb15
    %30 = arith.addi %20, %c1 : index
    cf.br ^bb14(%30 : index)
  ^bb18:  // pred: ^bb14
    %31 = arith.addi %18, %c1 : index
    cf.br ^bb13(%31 : index)
  ^bb19:  // pred: ^bb13
    %32 = arith.addi %16, %c1 : index
    cf.br ^bb12(%32 : index)
  ^bb20:  // pred: ^bb12
    %reinterpret_cast_2 = memref.reinterpret_cast %alloc_1 to offset: [0], sizes: [5, 3], strides: [3, 1] : memref<1x5x3xf32> to memref<5x3xf32>
    return %reinterpret_cast_2 : memref<5x3xf32>
  }
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module {
  func.func @test_linear(%arg0: memref<5x2xf32>, %arg1: memref<3x2xf32>) -> memref<5x3xf32> attributes {llvm.emit_c_interface} {
    %c10 = arith.constant 10 : index
    %c5 = arith.constant 5 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb4
    %1 = arith.cmpi slt, %0, %c2 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb5
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb3
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %4 = memref.load %arg1[%2, %0] : memref<3x2xf32>
    memref.store %4, %alloc[%0, %2] : memref<2x3xf32>
    %5 = arith.addi %2, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb4:  // pred: ^bb2
    %6 = arith.addi %0, %c1 : index
    cf.br ^bb1(%6 : index)
  ^bb5:  // pred: ^bb1
    %base_buffer, %offset, %sizes:2, %strides:2 = memref.extract_strided_metadata %arg0 : memref<5x2xf32> -> memref<f32>, index, index, index, index, index
    %reinterpret_cast = memref.reinterpret_cast %base_buffer to offset: [%c0], sizes: [1, 5, 2], strides: [%c10, %c2, %c1] : memref<f32> to memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %reinterpret_cast_0 = memref.reinterpret_cast %alloc to offset: [0], sizes: [1, 2, 3], strides: [6, 3, 1] : memref<2x3xf32> to memref<1x2x3xf32>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    cf.br ^bb6(%c0 : index)
  ^bb6(%7: index):  // 2 preds: ^bb5, ^bb11
    %8 = arith.cmpi slt, %7, %c1 : index
    cf.cond_br %8, ^bb7(%c0 : index), ^bb12(%c0 : index)
  ^bb7(%9: index):  // 2 preds: ^bb6, ^bb10
    %10 = arith.cmpi slt, %9, %c5 : index
    cf.cond_br %10, ^bb8(%c0 : index), ^bb11
  ^bb8(%11: index):  // 2 preds: ^bb7, ^bb9
    %12 = arith.cmpi slt, %11, %c3 : index
    cf.cond_br %12, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    memref.store %cst, %alloc_1[%7, %9, %11] : memref<1x5x3xf32>
    %13 = arith.addi %11, %c1 : index
    cf.br ^bb8(%13 : index)
  ^bb10:  // pred: ^bb8
    %14 = arith.addi %9, %c1 : index
    cf.br ^bb7(%14 : index)
  ^bb11:  // pred: ^bb7
    %15 = arith.addi %7, %c1 : index
    cf.br ^bb6(%15 : index)
  ^bb12(%16: index):  // 2 preds: ^bb6, ^bb19
    %17 = arith.cmpi slt, %16, %c1 : index
    cf.cond_br %17, ^bb13(%c0 : index), ^bb20
  ^bb13(%18: index):  // 2 preds: ^bb12, ^bb18
    %19 = arith.cmpi slt, %18, %c5 : index
    cf.cond_br %19, ^bb14(%c0 : index), ^bb19
  ^bb14(%20: index):  // 2 preds: ^bb13, ^bb17
    %21 = arith.cmpi slt, %20, %c3 : index
    cf.cond_br %21, ^bb15(%c0 : index), ^bb18
  ^bb15(%22: index):  // 2 preds: ^bb14, ^bb16
    %23 = arith.cmpi slt, %22, %c2 : index
    cf.cond_br %23, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %24 = memref.load %reinterpret_cast[%16, %18, %22] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %25 = memref.load %reinterpret_cast_0[%16, %22, %20] : memref<1x2x3xf32>
    %26 = memref.load %alloc_1[%16, %18, %20] : memref<1x5x3xf32>
    %27 = arith.mulf %24, %25 : f32
    %28 = arith.addf %26, %27 : f32
    memref.store %28, %alloc_1[%16, %18, %20] : memref<1x5x3xf32>
    %29 = arith.addi %22, %c1 : index
    cf.br ^bb15(%29 : index)
  ^bb17:  // pred: ^bb15
    %30 = arith.addi %20, %c1 : index
    cf.br ^bb14(%30 : index)
  ^bb18:  // pred: ^bb14
    %31 = arith.addi %18, %c1 : index
    cf.br ^bb13(%31 : index)
  ^bb19:  // pred: ^bb13
    %32 = arith.addi %16, %c1 : index
    cf.br ^bb12(%32 : index)
  ^bb20:  // pred: ^bb12
    %reinterpret_cast_2 = memref.reinterpret_cast %alloc_1 to offset: [0], sizes: [5, 3], strides: [3, 1] : memref<1x5x3xf32> to memref<5x3xf32>
    return %reinterpret_cast_2 : memref<5x3xf32>
  }
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module {
  llvm.func @test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg7, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg8, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg9, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg10, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg12, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg11, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg13, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = builtin.unrealized_conversion_cast %7 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<3x2xf32>
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %10 = llvm.insertvalue %arg0, %9[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg1, %10[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg2, %11[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg3, %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg5, %13[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg4, %14[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.insertvalue %arg6, %15[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<5x2xf32>
    %18 = llvm.mlir.constant(10 : index) : i64
    %19 = builtin.unrealized_conversion_cast %18 : i64 to index
    %20 = llvm.mlir.constant(5 : index) : i64
    %21 = llvm.mlir.constant(3 : index) : i64
    %22 = llvm.mlir.constant(1 : index) : i64
    %23 = builtin.unrealized_conversion_cast %22 : i64 to index
    %24 = llvm.mlir.constant(2 : index) : i64
    %25 = builtin.unrealized_conversion_cast %24 : i64 to index
    %26 = llvm.mlir.constant(0 : index) : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    %28 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf32>
    llvm.br ^bb1(%26 : i64)
  ^bb1(%29: i64):  // 2 preds: ^bb0, ^bb4
    %30 = builtin.unrealized_conversion_cast %29 : i64 to index
    %31 = llvm.icmp "slt" %29, %24 : i64
    llvm.cond_br %31, ^bb2(%26 : i64), ^bb5
  ^bb2(%32: i64):  // 2 preds: ^bb1, ^bb3
    %33 = builtin.unrealized_conversion_cast %32 : i64 to index
    %34 = llvm.icmp "slt" %32, %21 : i64
    llvm.cond_br %34, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %35 = memref.load %8[%33, %30] : memref<3x2xf32>
    memref.store %35, %alloc[%30, %33] : memref<2x3xf32>
    %36 = llvm.add %32, %22 : i64
    llvm.br ^bb2(%36 : i64)
  ^bb4:  // pred: ^bb2
    %37 = llvm.add %29, %22 : i64
    llvm.br ^bb1(%37 : i64)
  ^bb5:  // pred: ^bb1
    %base_buffer, %offset, %sizes:2, %strides:2 = memref.extract_strided_metadata %17 : memref<5x2xf32> -> memref<f32>, index, index, index, index, index
    %reinterpret_cast = memref.reinterpret_cast %base_buffer to offset: [%27], sizes: [1, 5, 2], strides: [%19, %25, %23] : memref<f32> to memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %reinterpret_cast_0 = memref.reinterpret_cast %alloc to offset: [0], sizes: [1, 2, 3], strides: [6, 3, 1] : memref<2x3xf32> to memref<1x2x3xf32>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x5x3xf32>
    llvm.br ^bb6(%26 : i64)
  ^bb6(%38: i64):  // 2 preds: ^bb5, ^bb11
    %39 = builtin.unrealized_conversion_cast %38 : i64 to index
    %40 = llvm.icmp "slt" %38, %22 : i64
    llvm.cond_br %40, ^bb7(%26 : i64), ^bb12(%26 : i64)
  ^bb7(%41: i64):  // 2 preds: ^bb6, ^bb10
    %42 = builtin.unrealized_conversion_cast %41 : i64 to index
    %43 = llvm.icmp "slt" %41, %20 : i64
    llvm.cond_br %43, ^bb8(%26 : i64), ^bb11
  ^bb8(%44: i64):  // 2 preds: ^bb7, ^bb9
    %45 = builtin.unrealized_conversion_cast %44 : i64 to index
    %46 = llvm.icmp "slt" %44, %21 : i64
    llvm.cond_br %46, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    memref.store %28, %alloc_1[%39, %42, %45] : memref<1x5x3xf32>
    %47 = llvm.add %44, %22 : i64
    llvm.br ^bb8(%47 : i64)
  ^bb10:  // pred: ^bb8
    %48 = llvm.add %41, %22 : i64
    llvm.br ^bb7(%48 : i64)
  ^bb11:  // pred: ^bb7
    %49 = llvm.add %38, %22 : i64
    llvm.br ^bb6(%49 : i64)
  ^bb12(%50: i64):  // 2 preds: ^bb6, ^bb19
    %51 = builtin.unrealized_conversion_cast %50 : i64 to index
    %52 = llvm.icmp "slt" %50, %22 : i64
    llvm.cond_br %52, ^bb13(%26 : i64), ^bb20
  ^bb13(%53: i64):  // 2 preds: ^bb12, ^bb18
    %54 = builtin.unrealized_conversion_cast %53 : i64 to index
    %55 = llvm.icmp "slt" %53, %20 : i64
    llvm.cond_br %55, ^bb14(%26 : i64), ^bb19
  ^bb14(%56: i64):  // 2 preds: ^bb13, ^bb17
    %57 = builtin.unrealized_conversion_cast %56 : i64 to index
    %58 = llvm.icmp "slt" %56, %21 : i64
    llvm.cond_br %58, ^bb15(%26 : i64), ^bb18
  ^bb15(%59: i64):  // 2 preds: ^bb14, ^bb16
    %60 = builtin.unrealized_conversion_cast %59 : i64 to index
    %61 = llvm.icmp "slt" %59, %24 : i64
    llvm.cond_br %61, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %62 = memref.load %reinterpret_cast[%51, %54, %60] : memref<1x5x2xf32, strided<[?, ?, ?], offset: ?>>
    %63 = memref.load %reinterpret_cast_0[%51, %60, %57] : memref<1x2x3xf32>
    %64 = memref.load %alloc_1[%51, %54, %57] : memref<1x5x3xf32>
    %65 = llvm.fmul %62, %63  : f32
    %66 = llvm.fadd %64, %65  : f32
    memref.store %66, %alloc_1[%51, %54, %57] : memref<1x5x3xf32>
    %67 = llvm.add %59, %22 : i64
    llvm.br ^bb15(%67 : i64)
  ^bb17:  // pred: ^bb15
    %68 = llvm.add %56, %22 : i64
    llvm.br ^bb14(%68 : i64)
  ^bb18:  // pred: ^bb14
    %69 = llvm.add %53, %22 : i64
    llvm.br ^bb13(%69 : i64)
  ^bb19:  // pred: ^bb13
    %70 = llvm.add %50, %22 : i64
    llvm.br ^bb12(%70 : i64)
  ^bb20:  // pred: ^bb12
    %reinterpret_cast_2 = memref.reinterpret_cast %alloc_1 to offset: [0], sizes: [5, 3], strides: [3, 1] : memref<1x5x3xf32> to memref<5x3xf32>
    %71 = builtin.unrealized_conversion_cast %reinterpret_cast_2 : memref<5x3xf32> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.return %71 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.call @test_linear(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %16, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg7, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg8, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg9, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg10, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg12, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg11, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg13, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = builtin.unrealized_conversion_cast %7 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<3x2xf32>
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %10 = llvm.insertvalue %arg0, %9[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg1, %10[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg2, %11[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg3, %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg5, %13[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg4, %14[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.insertvalue %arg6, %15[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<5x2xf32>
    %18 = llvm.mlir.constant(10 : index) : i64
    %19 = builtin.unrealized_conversion_cast %18 : i64 to index
    %20 = llvm.mlir.constant(5 : index) : i64
    %21 = llvm.mlir.constant(3 : index) : i64
    %22 = llvm.mlir.constant(1 : index) : i64
    %23 = builtin.unrealized_conversion_cast %22 : i64 to index
    %24 = llvm.mlir.constant(2 : index) : i64
    %25 = builtin.unrealized_conversion_cast %24 : i64 to index
    %26 = llvm.mlir.constant(0 : index) : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    %28 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %29 = llvm.mlir.constant(2 : index) : i64
    %30 = llvm.mlir.constant(3 : index) : i64
    %31 = llvm.mlir.constant(1 : index) : i64
    %32 = llvm.mlir.constant(6 : index) : i64
    %33 = llvm.mlir.zero : !llvm.ptr
    %34 = llvm.getelementptr %33[%32] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %35 = llvm.ptrtoint %34 : !llvm.ptr to i64
    %36 = llvm.mlir.constant(64 : index) : i64
    %37 = llvm.add %35, %36 : i64
    %38 = llvm.call @malloc(%37) : (i64) -> !llvm.ptr
    %39 = llvm.ptrtoint %38 : !llvm.ptr to i64
    %40 = llvm.mlir.constant(1 : index) : i64
    %41 = llvm.sub %36, %40 : i64
    %42 = llvm.add %39, %41 : i64
    %43 = llvm.urem %42, %36  : i64
    %44 = llvm.sub %42, %43 : i64
    %45 = llvm.inttoptr %44 : i64 to !llvm.ptr
    %46 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %47 = llvm.insertvalue %38, %46[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %48 = llvm.insertvalue %45, %47[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %49 = llvm.mlir.constant(0 : index) : i64
    %50 = llvm.insertvalue %49, %48[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %51 = llvm.insertvalue %29, %50[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %52 = llvm.insertvalue %30, %51[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %53 = llvm.insertvalue %30, %52[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %54 = llvm.insertvalue %31, %53[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%26 : i64)
  ^bb1(%55: i64):  // 2 preds: ^bb0, ^bb4
    %56 = builtin.unrealized_conversion_cast %55 : i64 to index
    %57 = llvm.icmp "slt" %55, %24 : i64
    llvm.cond_br %57, ^bb2(%26 : i64), ^bb5
  ^bb2(%58: i64):  // 2 preds: ^bb1, ^bb3
    %59 = builtin.unrealized_conversion_cast %58 : i64 to index
    %60 = llvm.icmp "slt" %58, %21 : i64
    llvm.cond_br %60, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %61 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %62 = llvm.mlir.constant(2 : index) : i64
    %63 = llvm.mul %58, %62 : i64
    %64 = llvm.add %63, %55 : i64
    %65 = llvm.getelementptr %61[%64] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %66 = llvm.load %65 : !llvm.ptr -> f32
    %67 = llvm.extractvalue %54[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %68 = llvm.mlir.constant(3 : index) : i64
    %69 = llvm.mul %55, %68 : i64
    %70 = llvm.add %69, %58 : i64
    %71 = llvm.getelementptr %67[%70] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %66, %71 : f32, !llvm.ptr
    %72 = llvm.add %58, %22 : i64
    llvm.br ^bb2(%72 : i64)
  ^bb4:  // pred: ^bb2
    %73 = llvm.add %55, %22 : i64
    llvm.br ^bb1(%73 : i64)
  ^bb5:  // pred: ^bb1
    %74 = llvm.extractvalue %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %75 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %76 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %77 = llvm.insertvalue %74, %76[0] : !llvm.struct<(ptr, ptr, i64)> 
    %78 = llvm.insertvalue %75, %77[1] : !llvm.struct<(ptr, ptr, i64)> 
    %79 = llvm.mlir.constant(0 : index) : i64
    %80 = llvm.insertvalue %79, %78[2] : !llvm.struct<(ptr, ptr, i64)> 
    %81 = llvm.extractvalue %16[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %82 = llvm.extractvalue %16[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %83 = llvm.extractvalue %16[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %84 = llvm.extractvalue %16[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %85 = llvm.extractvalue %16[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %86 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %87 = llvm.extractvalue %80[0] : !llvm.struct<(ptr, ptr, i64)> 
    %88 = llvm.extractvalue %80[1] : !llvm.struct<(ptr, ptr, i64)> 
    %89 = llvm.insertvalue %87, %86[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %90 = llvm.insertvalue %88, %89[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %91 = llvm.insertvalue %26, %90[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %92 = llvm.mlir.constant(1 : index) : i64
    %93 = llvm.insertvalue %92, %91[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %94 = llvm.insertvalue %18, %93[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %95 = llvm.mlir.constant(5 : index) : i64
    %96 = llvm.insertvalue %95, %94[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %97 = llvm.insertvalue %24, %96[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %98 = llvm.mlir.constant(2 : index) : i64
    %99 = llvm.insertvalue %98, %97[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %100 = llvm.insertvalue %22, %99[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %101 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %102 = llvm.extractvalue %54[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %103 = llvm.extractvalue %54[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %104 = llvm.insertvalue %102, %101[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %105 = llvm.insertvalue %103, %104[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %106 = llvm.mlir.constant(0 : index) : i64
    %107 = llvm.insertvalue %106, %105[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %108 = llvm.mlir.constant(1 : index) : i64
    %109 = llvm.insertvalue %108, %107[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %110 = llvm.mlir.constant(6 : index) : i64
    %111 = llvm.insertvalue %110, %109[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %112 = llvm.mlir.constant(2 : index) : i64
    %113 = llvm.insertvalue %112, %111[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %114 = llvm.mlir.constant(3 : index) : i64
    %115 = llvm.insertvalue %114, %113[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %116 = llvm.mlir.constant(3 : index) : i64
    %117 = llvm.insertvalue %116, %115[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %118 = llvm.mlir.constant(1 : index) : i64
    %119 = llvm.insertvalue %118, %117[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %120 = llvm.mlir.constant(1 : index) : i64
    %121 = llvm.mlir.constant(5 : index) : i64
    %122 = llvm.mlir.constant(3 : index) : i64
    %123 = llvm.mlir.constant(1 : index) : i64
    %124 = llvm.mlir.constant(15 : index) : i64
    %125 = llvm.mlir.constant(15 : index) : i64
    %126 = llvm.mlir.zero : !llvm.ptr
    %127 = llvm.getelementptr %126[%125] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %128 = llvm.ptrtoint %127 : !llvm.ptr to i64
    %129 = llvm.mlir.constant(64 : index) : i64
    %130 = llvm.add %128, %129 : i64
    %131 = llvm.call @malloc(%130) : (i64) -> !llvm.ptr
    %132 = llvm.ptrtoint %131 : !llvm.ptr to i64
    %133 = llvm.mlir.constant(1 : index) : i64
    %134 = llvm.sub %129, %133 : i64
    %135 = llvm.add %132, %134 : i64
    %136 = llvm.urem %135, %129  : i64
    %137 = llvm.sub %135, %136 : i64
    %138 = llvm.inttoptr %137 : i64 to !llvm.ptr
    %139 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %140 = llvm.insertvalue %131, %139[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %141 = llvm.insertvalue %138, %140[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %142 = llvm.mlir.constant(0 : index) : i64
    %143 = llvm.insertvalue %142, %141[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %144 = llvm.insertvalue %120, %143[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %145 = llvm.insertvalue %121, %144[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %146 = llvm.insertvalue %122, %145[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %147 = llvm.insertvalue %124, %146[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %148 = llvm.insertvalue %122, %147[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %149 = llvm.insertvalue %123, %148[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    llvm.br ^bb6(%26 : i64)
  ^bb6(%150: i64):  // 2 preds: ^bb5, ^bb11
    %151 = builtin.unrealized_conversion_cast %150 : i64 to index
    %152 = llvm.icmp "slt" %150, %22 : i64
    llvm.cond_br %152, ^bb7(%26 : i64), ^bb12(%26 : i64)
  ^bb7(%153: i64):  // 2 preds: ^bb6, ^bb10
    %154 = builtin.unrealized_conversion_cast %153 : i64 to index
    %155 = llvm.icmp "slt" %153, %20 : i64
    llvm.cond_br %155, ^bb8(%26 : i64), ^bb11
  ^bb8(%156: i64):  // 2 preds: ^bb7, ^bb9
    %157 = builtin.unrealized_conversion_cast %156 : i64 to index
    %158 = llvm.icmp "slt" %156, %21 : i64
    llvm.cond_br %158, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %159 = llvm.extractvalue %149[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %160 = llvm.mlir.constant(15 : index) : i64
    %161 = llvm.mul %150, %160 : i64
    %162 = llvm.mlir.constant(3 : index) : i64
    %163 = llvm.mul %153, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.add %164, %156 : i64
    %166 = llvm.getelementptr %159[%165] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %28, %166 : f32, !llvm.ptr
    %167 = llvm.add %156, %22 : i64
    llvm.br ^bb8(%167 : i64)
  ^bb10:  // pred: ^bb8
    %168 = llvm.add %153, %22 : i64
    llvm.br ^bb7(%168 : i64)
  ^bb11:  // pred: ^bb7
    %169 = llvm.add %150, %22 : i64
    llvm.br ^bb6(%169 : i64)
  ^bb12(%170: i64):  // 2 preds: ^bb6, ^bb19
    %171 = builtin.unrealized_conversion_cast %170 : i64 to index
    %172 = llvm.icmp "slt" %170, %22 : i64
    llvm.cond_br %172, ^bb13(%26 : i64), ^bb20
  ^bb13(%173: i64):  // 2 preds: ^bb12, ^bb18
    %174 = builtin.unrealized_conversion_cast %173 : i64 to index
    %175 = llvm.icmp "slt" %173, %20 : i64
    llvm.cond_br %175, ^bb14(%26 : i64), ^bb19
  ^bb14(%176: i64):  // 2 preds: ^bb13, ^bb17
    %177 = builtin.unrealized_conversion_cast %176 : i64 to index
    %178 = llvm.icmp "slt" %176, %21 : i64
    llvm.cond_br %178, ^bb15(%26 : i64), ^bb18
  ^bb15(%179: i64):  // 2 preds: ^bb14, ^bb16
    %180 = builtin.unrealized_conversion_cast %179 : i64 to index
    %181 = llvm.icmp "slt" %179, %24 : i64
    llvm.cond_br %181, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %182 = llvm.extractvalue %100[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %183 = llvm.extractvalue %100[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %184 = llvm.getelementptr %182[%183] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %185 = llvm.extractvalue %100[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %186 = llvm.mul %170, %185 : i64
    %187 = llvm.extractvalue %100[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %188 = llvm.mul %173, %187 : i64
    %189 = llvm.add %186, %188 : i64
    %190 = llvm.extractvalue %100[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %191 = llvm.mul %179, %190 : i64
    %192 = llvm.add %189, %191 : i64
    %193 = llvm.getelementptr %184[%192] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %194 = llvm.load %193 : !llvm.ptr -> f32
    %195 = llvm.extractvalue %119[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %196 = llvm.mlir.constant(6 : index) : i64
    %197 = llvm.mul %170, %196 : i64
    %198 = llvm.mlir.constant(3 : index) : i64
    %199 = llvm.mul %179, %198 : i64
    %200 = llvm.add %197, %199 : i64
    %201 = llvm.add %200, %176 : i64
    %202 = llvm.getelementptr %195[%201] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %203 = llvm.load %202 : !llvm.ptr -> f32
    %204 = llvm.extractvalue %149[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %205 = llvm.mlir.constant(15 : index) : i64
    %206 = llvm.mul %170, %205 : i64
    %207 = llvm.mlir.constant(3 : index) : i64
    %208 = llvm.mul %173, %207 : i64
    %209 = llvm.add %206, %208 : i64
    %210 = llvm.add %209, %176 : i64
    %211 = llvm.getelementptr %204[%210] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %212 = llvm.load %211 : !llvm.ptr -> f32
    %213 = llvm.fmul %194, %203  : f32
    %214 = llvm.fadd %212, %213  : f32
    %215 = llvm.extractvalue %149[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %216 = llvm.mlir.constant(15 : index) : i64
    %217 = llvm.mul %170, %216 : i64
    %218 = llvm.mlir.constant(3 : index) : i64
    %219 = llvm.mul %173, %218 : i64
    %220 = llvm.add %217, %219 : i64
    %221 = llvm.add %220, %176 : i64
    %222 = llvm.getelementptr %215[%221] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %214, %222 : f32, !llvm.ptr
    %223 = llvm.add %179, %22 : i64
    llvm.br ^bb15(%223 : i64)
  ^bb17:  // pred: ^bb15
    %224 = llvm.add %176, %22 : i64
    llvm.br ^bb14(%224 : i64)
  ^bb18:  // pred: ^bb14
    %225 = llvm.add %173, %22 : i64
    llvm.br ^bb13(%225 : i64)
  ^bb19:  // pred: ^bb13
    %226 = llvm.add %170, %22 : i64
    llvm.br ^bb12(%226 : i64)
  ^bb20:  // pred: ^bb12
    %227 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %228 = llvm.extractvalue %149[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %229 = llvm.extractvalue %149[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %230 = llvm.insertvalue %228, %227[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %231 = llvm.insertvalue %229, %230[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %232 = llvm.mlir.constant(0 : index) : i64
    %233 = llvm.insertvalue %232, %231[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %234 = llvm.mlir.constant(5 : index) : i64
    %235 = llvm.insertvalue %234, %233[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %236 = llvm.mlir.constant(3 : index) : i64
    %237 = llvm.insertvalue %236, %235[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %238 = llvm.mlir.constant(3 : index) : i64
    %239 = llvm.insertvalue %238, %237[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %240 = llvm.mlir.constant(1 : index) : i64
    %241 = llvm.insertvalue %240, %239[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %242 = builtin.unrealized_conversion_cast %241 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<5x3xf32>
    %243 = builtin.unrealized_conversion_cast %242 : memref<5x3xf32> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.return %243 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.call @test_linear(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %16, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg7, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg8, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg9, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg10, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg12, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg11, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg13, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.insertvalue %arg0, %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.insertvalue %arg1, %9[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg2, %10[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg3, %11[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg5, %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg4, %13[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg6, %14[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.mlir.constant(10 : index) : i64
    %17 = llvm.mlir.constant(5 : index) : i64
    %18 = llvm.mlir.constant(3 : index) : i64
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.mlir.constant(2 : index) : i64
    %21 = llvm.mlir.constant(0 : index) : i64
    %22 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %23 = llvm.mlir.constant(2 : index) : i64
    %24 = llvm.mlir.constant(3 : index) : i64
    %25 = llvm.mlir.constant(1 : index) : i64
    %26 = llvm.mlir.constant(6 : index) : i64
    %27 = llvm.mlir.zero : !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %30 = llvm.mlir.constant(64 : index) : i64
    %31 = llvm.add %29, %30 : i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.sub %30, %34 : i64
    %36 = llvm.add %33, %35 : i64
    %37 = llvm.urem %36, %30  : i64
    %38 = llvm.sub %36, %37 : i64
    %39 = llvm.inttoptr %38 : i64 to !llvm.ptr
    %40 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %41 = llvm.insertvalue %32, %40[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %42 = llvm.insertvalue %39, %41[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %43 = llvm.mlir.constant(0 : index) : i64
    %44 = llvm.insertvalue %43, %42[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %45 = llvm.insertvalue %23, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %46 = llvm.insertvalue %24, %45[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %47 = llvm.insertvalue %24, %46[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %48 = llvm.insertvalue %25, %47[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%21 : i64)
  ^bb1(%49: i64):  // 2 preds: ^bb0, ^bb4
    %50 = llvm.icmp "slt" %49, %20 : i64
    llvm.cond_br %50, ^bb2(%21 : i64), ^bb5
  ^bb2(%51: i64):  // 2 preds: ^bb1, ^bb3
    %52 = llvm.icmp "slt" %51, %18 : i64
    llvm.cond_br %52, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %53 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %54 = llvm.mlir.constant(2 : index) : i64
    %55 = llvm.mul %51, %54 : i64
    %56 = llvm.add %55, %49 : i64
    %57 = llvm.getelementptr %53[%56] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %58 = llvm.load %57 : !llvm.ptr -> f32
    %59 = llvm.extractvalue %48[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %60 = llvm.mlir.constant(3 : index) : i64
    %61 = llvm.mul %49, %60 : i64
    %62 = llvm.add %61, %51 : i64
    %63 = llvm.getelementptr %59[%62] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %58, %63 : f32, !llvm.ptr
    %64 = llvm.add %51, %19 : i64
    llvm.br ^bb2(%64 : i64)
  ^bb4:  // pred: ^bb2
    %65 = llvm.add %49, %19 : i64
    llvm.br ^bb1(%65 : i64)
  ^bb5:  // pred: ^bb1
    %66 = llvm.extractvalue %15[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %67 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %68 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %69 = llvm.insertvalue %66, %68[0] : !llvm.struct<(ptr, ptr, i64)> 
    %70 = llvm.insertvalue %67, %69[1] : !llvm.struct<(ptr, ptr, i64)> 
    %71 = llvm.mlir.constant(0 : index) : i64
    %72 = llvm.insertvalue %71, %70[2] : !llvm.struct<(ptr, ptr, i64)> 
    %73 = llvm.extractvalue %15[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %74 = llvm.extractvalue %15[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %75 = llvm.extractvalue %15[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %76 = llvm.extractvalue %15[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %77 = llvm.extractvalue %15[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %78 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %79 = llvm.extractvalue %72[0] : !llvm.struct<(ptr, ptr, i64)> 
    %80 = llvm.extractvalue %72[1] : !llvm.struct<(ptr, ptr, i64)> 
    %81 = llvm.insertvalue %79, %78[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %82 = llvm.insertvalue %80, %81[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %83 = llvm.insertvalue %21, %82[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %84 = llvm.mlir.constant(1 : index) : i64
    %85 = llvm.insertvalue %84, %83[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %86 = llvm.insertvalue %16, %85[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %87 = llvm.mlir.constant(5 : index) : i64
    %88 = llvm.insertvalue %87, %86[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %89 = llvm.insertvalue %20, %88[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %90 = llvm.mlir.constant(2 : index) : i64
    %91 = llvm.insertvalue %90, %89[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %92 = llvm.insertvalue %19, %91[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %93 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %94 = llvm.extractvalue %48[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %95 = llvm.extractvalue %48[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %96 = llvm.insertvalue %94, %93[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %97 = llvm.insertvalue %95, %96[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %98 = llvm.mlir.constant(0 : index) : i64
    %99 = llvm.insertvalue %98, %97[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %100 = llvm.mlir.constant(1 : index) : i64
    %101 = llvm.insertvalue %100, %99[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %102 = llvm.mlir.constant(6 : index) : i64
    %103 = llvm.insertvalue %102, %101[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %104 = llvm.mlir.constant(2 : index) : i64
    %105 = llvm.insertvalue %104, %103[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %106 = llvm.mlir.constant(3 : index) : i64
    %107 = llvm.insertvalue %106, %105[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %108 = llvm.mlir.constant(3 : index) : i64
    %109 = llvm.insertvalue %108, %107[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %110 = llvm.mlir.constant(1 : index) : i64
    %111 = llvm.insertvalue %110, %109[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %112 = llvm.mlir.constant(1 : index) : i64
    %113 = llvm.mlir.constant(5 : index) : i64
    %114 = llvm.mlir.constant(3 : index) : i64
    %115 = llvm.mlir.constant(1 : index) : i64
    %116 = llvm.mlir.constant(15 : index) : i64
    %117 = llvm.mlir.constant(15 : index) : i64
    %118 = llvm.mlir.zero : !llvm.ptr
    %119 = llvm.getelementptr %118[%117] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %120 = llvm.ptrtoint %119 : !llvm.ptr to i64
    %121 = llvm.mlir.constant(64 : index) : i64
    %122 = llvm.add %120, %121 : i64
    %123 = llvm.call @malloc(%122) : (i64) -> !llvm.ptr
    %124 = llvm.ptrtoint %123 : !llvm.ptr to i64
    %125 = llvm.mlir.constant(1 : index) : i64
    %126 = llvm.sub %121, %125 : i64
    %127 = llvm.add %124, %126 : i64
    %128 = llvm.urem %127, %121  : i64
    %129 = llvm.sub %127, %128 : i64
    %130 = llvm.inttoptr %129 : i64 to !llvm.ptr
    %131 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %132 = llvm.insertvalue %123, %131[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %133 = llvm.insertvalue %130, %132[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %134 = llvm.mlir.constant(0 : index) : i64
    %135 = llvm.insertvalue %134, %133[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %136 = llvm.insertvalue %112, %135[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %137 = llvm.insertvalue %113, %136[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %138 = llvm.insertvalue %114, %137[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %139 = llvm.insertvalue %116, %138[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %140 = llvm.insertvalue %114, %139[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %141 = llvm.insertvalue %115, %140[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    llvm.br ^bb6(%21 : i64)
  ^bb6(%142: i64):  // 2 preds: ^bb5, ^bb11
    %143 = llvm.icmp "slt" %142, %19 : i64
    llvm.cond_br %143, ^bb7(%21 : i64), ^bb12(%21 : i64)
  ^bb7(%144: i64):  // 2 preds: ^bb6, ^bb10
    %145 = llvm.icmp "slt" %144, %17 : i64
    llvm.cond_br %145, ^bb8(%21 : i64), ^bb11
  ^bb8(%146: i64):  // 2 preds: ^bb7, ^bb9
    %147 = llvm.icmp "slt" %146, %18 : i64
    llvm.cond_br %147, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %148 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %149 = llvm.mlir.constant(15 : index) : i64
    %150 = llvm.mul %142, %149 : i64
    %151 = llvm.mlir.constant(3 : index) : i64
    %152 = llvm.mul %144, %151 : i64
    %153 = llvm.add %150, %152 : i64
    %154 = llvm.add %153, %146 : i64
    %155 = llvm.getelementptr %148[%154] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %22, %155 : f32, !llvm.ptr
    %156 = llvm.add %146, %19 : i64
    llvm.br ^bb8(%156 : i64)
  ^bb10:  // pred: ^bb8
    %157 = llvm.add %144, %19 : i64
    llvm.br ^bb7(%157 : i64)
  ^bb11:  // pred: ^bb7
    %158 = llvm.add %142, %19 : i64
    llvm.br ^bb6(%158 : i64)
  ^bb12(%159: i64):  // 2 preds: ^bb6, ^bb19
    %160 = llvm.icmp "slt" %159, %19 : i64
    llvm.cond_br %160, ^bb13(%21 : i64), ^bb20
  ^bb13(%161: i64):  // 2 preds: ^bb12, ^bb18
    %162 = llvm.icmp "slt" %161, %17 : i64
    llvm.cond_br %162, ^bb14(%21 : i64), ^bb19
  ^bb14(%163: i64):  // 2 preds: ^bb13, ^bb17
    %164 = llvm.icmp "slt" %163, %18 : i64
    llvm.cond_br %164, ^bb15(%21 : i64), ^bb18
  ^bb15(%165: i64):  // 2 preds: ^bb14, ^bb16
    %166 = llvm.icmp "slt" %165, %20 : i64
    llvm.cond_br %166, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %167 = llvm.extractvalue %92[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %168 = llvm.extractvalue %92[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %169 = llvm.getelementptr %167[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %170 = llvm.extractvalue %92[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %171 = llvm.mul %159, %170 : i64
    %172 = llvm.extractvalue %92[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %173 = llvm.mul %161, %172 : i64
    %174 = llvm.add %171, %173 : i64
    %175 = llvm.extractvalue %92[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %176 = llvm.mul %165, %175 : i64
    %177 = llvm.add %174, %176 : i64
    %178 = llvm.getelementptr %169[%177] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %179 = llvm.load %178 : !llvm.ptr -> f32
    %180 = llvm.extractvalue %111[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %181 = llvm.mlir.constant(6 : index) : i64
    %182 = llvm.mul %159, %181 : i64
    %183 = llvm.mlir.constant(3 : index) : i64
    %184 = llvm.mul %165, %183 : i64
    %185 = llvm.add %182, %184 : i64
    %186 = llvm.add %185, %163 : i64
    %187 = llvm.getelementptr %180[%186] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %188 = llvm.load %187 : !llvm.ptr -> f32
    %189 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %190 = llvm.mlir.constant(15 : index) : i64
    %191 = llvm.mul %159, %190 : i64
    %192 = llvm.mlir.constant(3 : index) : i64
    %193 = llvm.mul %161, %192 : i64
    %194 = llvm.add %191, %193 : i64
    %195 = llvm.add %194, %163 : i64
    %196 = llvm.getelementptr %189[%195] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %197 = llvm.load %196 : !llvm.ptr -> f32
    %198 = llvm.fmul %179, %188  : f32
    %199 = llvm.fadd %197, %198  : f32
    %200 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %201 = llvm.mlir.constant(15 : index) : i64
    %202 = llvm.mul %159, %201 : i64
    %203 = llvm.mlir.constant(3 : index) : i64
    %204 = llvm.mul %161, %203 : i64
    %205 = llvm.add %202, %204 : i64
    %206 = llvm.add %205, %163 : i64
    %207 = llvm.getelementptr %200[%206] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %199, %207 : f32, !llvm.ptr
    %208 = llvm.add %165, %19 : i64
    llvm.br ^bb15(%208 : i64)
  ^bb17:  // pred: ^bb15
    %209 = llvm.add %163, %19 : i64
    llvm.br ^bb14(%209 : i64)
  ^bb18:  // pred: ^bb14
    %210 = llvm.add %161, %19 : i64
    llvm.br ^bb13(%210 : i64)
  ^bb19:  // pred: ^bb13
    %211 = llvm.add %159, %19 : i64
    llvm.br ^bb12(%211 : i64)
  ^bb20:  // pred: ^bb12
    %212 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %213 = llvm.extractvalue %141[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %214 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %215 = llvm.insertvalue %213, %212[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %216 = llvm.insertvalue %214, %215[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %217 = llvm.mlir.constant(0 : index) : i64
    %218 = llvm.insertvalue %217, %216[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %219 = llvm.mlir.constant(5 : index) : i64
    %220 = llvm.insertvalue %219, %218[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %221 = llvm.mlir.constant(3 : index) : i64
    %222 = llvm.insertvalue %221, %220[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %223 = llvm.mlir.constant(3 : index) : i64
    %224 = llvm.insertvalue %223, %222[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %225 = llvm.mlir.constant(1 : index) : i64
    %226 = llvm.insertvalue %225, %224[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.return %226 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.call @test_linear(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %16, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}


module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg7, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg8, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg9, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg10, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg12, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg11, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg13, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.insertvalue %arg0, %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.insertvalue %arg1, %9[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg2, %10[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg3, %11[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg5, %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg4, %13[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg6, %14[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.mlir.constant(10 : index) : i64
    %17 = llvm.mlir.constant(5 : index) : i64
    %18 = llvm.mlir.constant(3 : index) : i64
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.mlir.constant(2 : index) : i64
    %21 = llvm.mlir.constant(0 : index) : i64
    %22 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    %23 = llvm.mlir.constant(2 : index) : i64
    %24 = llvm.mlir.constant(3 : index) : i64
    %25 = llvm.mlir.constant(1 : index) : i64
    %26 = llvm.mlir.constant(6 : index) : i64
    %27 = llvm.mlir.zero : !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %30 = llvm.mlir.constant(64 : index) : i64
    %31 = llvm.add %29, %30 : i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.sub %30, %34 : i64
    %36 = llvm.add %33, %35 : i64
    %37 = llvm.urem %36, %30  : i64
    %38 = llvm.sub %36, %37 : i64
    %39 = llvm.inttoptr %38 : i64 to !llvm.ptr
    %40 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %41 = llvm.insertvalue %32, %40[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %42 = llvm.insertvalue %39, %41[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %43 = llvm.mlir.constant(0 : index) : i64
    %44 = llvm.insertvalue %43, %42[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %45 = llvm.insertvalue %23, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %46 = llvm.insertvalue %24, %45[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %47 = llvm.insertvalue %24, %46[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %48 = llvm.insertvalue %25, %47[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%21 : i64)
  ^bb1(%49: i64):  // 2 preds: ^bb0, ^bb4
    %50 = llvm.icmp "slt" %49, %20 : i64
    llvm.cond_br %50, ^bb2(%21 : i64), ^bb5
  ^bb2(%51: i64):  // 2 preds: ^bb1, ^bb3
    %52 = llvm.icmp "slt" %51, %18 : i64
    llvm.cond_br %52, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %53 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %54 = llvm.mlir.constant(2 : index) : i64
    %55 = llvm.mul %51, %54 : i64
    %56 = llvm.add %55, %49 : i64
    %57 = llvm.getelementptr %53[%56] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %58 = llvm.load %57 : !llvm.ptr -> f32
    %59 = llvm.extractvalue %48[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %60 = llvm.mlir.constant(3 : index) : i64
    %61 = llvm.mul %49, %60 : i64
    %62 = llvm.add %61, %51 : i64
    %63 = llvm.getelementptr %59[%62] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %58, %63 : f32, !llvm.ptr
    %64 = llvm.add %51, %19 : i64
    llvm.br ^bb2(%64 : i64)
  ^bb4:  // pred: ^bb2
    %65 = llvm.add %49, %19 : i64
    llvm.br ^bb1(%65 : i64)
  ^bb5:  // pred: ^bb1
    %66 = llvm.extractvalue %15[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %67 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %68 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %69 = llvm.insertvalue %66, %68[0] : !llvm.struct<(ptr, ptr, i64)> 
    %70 = llvm.insertvalue %67, %69[1] : !llvm.struct<(ptr, ptr, i64)> 
    %71 = llvm.mlir.constant(0 : index) : i64
    %72 = llvm.insertvalue %71, %70[2] : !llvm.struct<(ptr, ptr, i64)> 
    %73 = llvm.extractvalue %15[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %74 = llvm.extractvalue %15[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %75 = llvm.extractvalue %15[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %76 = llvm.extractvalue %15[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %77 = llvm.extractvalue %15[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %78 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %79 = llvm.extractvalue %72[0] : !llvm.struct<(ptr, ptr, i64)> 
    %80 = llvm.extractvalue %72[1] : !llvm.struct<(ptr, ptr, i64)> 
    %81 = llvm.insertvalue %79, %78[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %82 = llvm.insertvalue %80, %81[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %83 = llvm.insertvalue %21, %82[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %84 = llvm.mlir.constant(1 : index) : i64
    %85 = llvm.insertvalue %84, %83[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %86 = llvm.insertvalue %16, %85[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %87 = llvm.mlir.constant(5 : index) : i64
    %88 = llvm.insertvalue %87, %86[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %89 = llvm.insertvalue %20, %88[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %90 = llvm.mlir.constant(2 : index) : i64
    %91 = llvm.insertvalue %90, %89[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %92 = llvm.insertvalue %19, %91[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %93 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %94 = llvm.extractvalue %48[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %95 = llvm.extractvalue %48[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %96 = llvm.insertvalue %94, %93[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %97 = llvm.insertvalue %95, %96[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %98 = llvm.mlir.constant(0 : index) : i64
    %99 = llvm.insertvalue %98, %97[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %100 = llvm.mlir.constant(1 : index) : i64
    %101 = llvm.insertvalue %100, %99[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %102 = llvm.mlir.constant(6 : index) : i64
    %103 = llvm.insertvalue %102, %101[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %104 = llvm.mlir.constant(2 : index) : i64
    %105 = llvm.insertvalue %104, %103[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %106 = llvm.mlir.constant(3 : index) : i64
    %107 = llvm.insertvalue %106, %105[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %108 = llvm.mlir.constant(3 : index) : i64
    %109 = llvm.insertvalue %108, %107[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %110 = llvm.mlir.constant(1 : index) : i64
    %111 = llvm.insertvalue %110, %109[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %112 = llvm.mlir.constant(1 : index) : i64
    %113 = llvm.mlir.constant(5 : index) : i64
    %114 = llvm.mlir.constant(3 : index) : i64
    %115 = llvm.mlir.constant(1 : index) : i64
    %116 = llvm.mlir.constant(15 : index) : i64
    %117 = llvm.mlir.constant(15 : index) : i64
    %118 = llvm.mlir.zero : !llvm.ptr
    %119 = llvm.getelementptr %118[%117] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %120 = llvm.ptrtoint %119 : !llvm.ptr to i64
    %121 = llvm.mlir.constant(64 : index) : i64
    %122 = llvm.add %120, %121 : i64
    %123 = llvm.call @malloc(%122) : (i64) -> !llvm.ptr
    %124 = llvm.ptrtoint %123 : !llvm.ptr to i64
    %125 = llvm.mlir.constant(1 : index) : i64
    %126 = llvm.sub %121, %125 : i64
    %127 = llvm.add %124, %126 : i64
    %128 = llvm.urem %127, %121  : i64
    %129 = llvm.sub %127, %128 : i64
    %130 = llvm.inttoptr %129 : i64 to !llvm.ptr
    %131 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)>
    %132 = llvm.insertvalue %123, %131[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %133 = llvm.insertvalue %130, %132[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %134 = llvm.mlir.constant(0 : index) : i64
    %135 = llvm.insertvalue %134, %133[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %136 = llvm.insertvalue %112, %135[3, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %137 = llvm.insertvalue %113, %136[3, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %138 = llvm.insertvalue %114, %137[3, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %139 = llvm.insertvalue %116, %138[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %140 = llvm.insertvalue %114, %139[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %141 = llvm.insertvalue %115, %140[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    llvm.br ^bb6(%21 : i64)
  ^bb6(%142: i64):  // 2 preds: ^bb5, ^bb11
    %143 = llvm.icmp "slt" %142, %19 : i64
    llvm.cond_br %143, ^bb7(%21 : i64), ^bb12(%21 : i64)
  ^bb7(%144: i64):  // 2 preds: ^bb6, ^bb10
    %145 = llvm.icmp "slt" %144, %17 : i64
    llvm.cond_br %145, ^bb8(%21 : i64), ^bb11
  ^bb8(%146: i64):  // 2 preds: ^bb7, ^bb9
    %147 = llvm.icmp "slt" %146, %18 : i64
    llvm.cond_br %147, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %148 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %149 = llvm.mlir.constant(15 : index) : i64
    %150 = llvm.mul %142, %149 : i64
    %151 = llvm.mlir.constant(3 : index) : i64
    %152 = llvm.mul %144, %151 : i64
    %153 = llvm.add %150, %152 : i64
    %154 = llvm.add %153, %146 : i64
    %155 = llvm.getelementptr %148[%154] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %22, %155 : f32, !llvm.ptr
    %156 = llvm.add %146, %19 : i64
    llvm.br ^bb8(%156 : i64)
  ^bb10:  // pred: ^bb8
    %157 = llvm.add %144, %19 : i64
    llvm.br ^bb7(%157 : i64)
  ^bb11:  // pred: ^bb7
    %158 = llvm.add %142, %19 : i64
    llvm.br ^bb6(%158 : i64)
  ^bb12(%159: i64):  // 2 preds: ^bb6, ^bb19
    %160 = llvm.icmp "slt" %159, %19 : i64
    llvm.cond_br %160, ^bb13(%21 : i64), ^bb20
  ^bb13(%161: i64):  // 2 preds: ^bb12, ^bb18
    %162 = llvm.icmp "slt" %161, %17 : i64
    llvm.cond_br %162, ^bb14(%21 : i64), ^bb19
  ^bb14(%163: i64):  // 2 preds: ^bb13, ^bb17
    %164 = llvm.icmp "slt" %163, %18 : i64
    llvm.cond_br %164, ^bb15(%21 : i64), ^bb18
  ^bb15(%165: i64):  // 2 preds: ^bb14, ^bb16
    %166 = llvm.icmp "slt" %165, %20 : i64
    llvm.cond_br %166, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %167 = llvm.extractvalue %92[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %168 = llvm.extractvalue %92[2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %169 = llvm.getelementptr %167[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %170 = llvm.extractvalue %92[4, 0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %171 = llvm.mul %159, %170 : i64
    %172 = llvm.extractvalue %92[4, 1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %173 = llvm.mul %161, %172 : i64
    %174 = llvm.add %171, %173 : i64
    %175 = llvm.extractvalue %92[4, 2] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %176 = llvm.mul %165, %175 : i64
    %177 = llvm.add %174, %176 : i64
    %178 = llvm.getelementptr %169[%177] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %179 = llvm.load %178 : !llvm.ptr -> f32
    %180 = llvm.extractvalue %111[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %181 = llvm.mlir.constant(6 : index) : i64
    %182 = llvm.mul %159, %181 : i64
    %183 = llvm.mlir.constant(3 : index) : i64
    %184 = llvm.mul %165, %183 : i64
    %185 = llvm.add %182, %184 : i64
    %186 = llvm.add %185, %163 : i64
    %187 = llvm.getelementptr %180[%186] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %188 = llvm.load %187 : !llvm.ptr -> f32
    %189 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %190 = llvm.mlir.constant(15 : index) : i64
    %191 = llvm.mul %159, %190 : i64
    %192 = llvm.mlir.constant(3 : index) : i64
    %193 = llvm.mul %161, %192 : i64
    %194 = llvm.add %191, %193 : i64
    %195 = llvm.add %194, %163 : i64
    %196 = llvm.getelementptr %189[%195] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %197 = llvm.load %196 : !llvm.ptr -> f32
    %198 = llvm.fmul %179, %188  : f32
    %199 = llvm.fadd %197, %198  : f32
    %200 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %201 = llvm.mlir.constant(15 : index) : i64
    %202 = llvm.mul %159, %201 : i64
    %203 = llvm.mlir.constant(3 : index) : i64
    %204 = llvm.mul %161, %203 : i64
    %205 = llvm.add %202, %204 : i64
    %206 = llvm.add %205, %163 : i64
    %207 = llvm.getelementptr %200[%206] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %199, %207 : f32, !llvm.ptr
    %208 = llvm.add %165, %19 : i64
    llvm.br ^bb15(%208 : i64)
  ^bb17:  // pred: ^bb15
    %209 = llvm.add %163, %19 : i64
    llvm.br ^bb14(%209 : i64)
  ^bb18:  // pred: ^bb14
    %210 = llvm.add %161, %19 : i64
    llvm.br ^bb13(%210 : i64)
  ^bb19:  // pred: ^bb13
    %211 = llvm.add %159, %19 : i64
    llvm.br ^bb12(%211 : i64)
  ^bb20:  // pred: ^bb12
    %212 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %213 = llvm.extractvalue %141[0] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %214 = llvm.extractvalue %141[1] : !llvm.struct<(ptr, ptr, i64, array<3 x i64>, array<3 x i64>)> 
    %215 = llvm.insertvalue %213, %212[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %216 = llvm.insertvalue %214, %215[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %217 = llvm.mlir.constant(0 : index) : i64
    %218 = llvm.insertvalue %217, %216[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %219 = llvm.mlir.constant(5 : index) : i64
    %220 = llvm.insertvalue %219, %218[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %221 = llvm.mlir.constant(3 : index) : i64
    %222 = llvm.insertvalue %221, %220[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %223 = llvm.mlir.constant(3 : index) : i64
    %224 = llvm.insertvalue %223, %222[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %225 = llvm.mlir.constant(1 : index) : i64
    %226 = llvm.insertvalue %225, %224[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.return %226 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_linear(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.call @test_linear(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %16, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}
