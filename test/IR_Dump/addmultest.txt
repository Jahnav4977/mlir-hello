./build/bin/mx-opt --mlir-print-ir-after-all ./test/Mx/addmultest.mlir 2> ./test/IR_Dump/addmultest.txt

// -----// IR Dump After {anonymous}::MxToTosaLowerPass () //----- //
module {
  func.func @test_addmul(%arg0: tensor<2x3xf64>, %arg1: tensor<2x3xf64>, %arg2: tensor<2x3xf64>) -> tensor<2x3xf64> attributes {llvm.emit_c_interface} {
    %0 = tosa.add %arg0, %arg1 : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<2x3xf64>
    %1 = tosa.mul %0, %arg2 {shift = 0 : i8} : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<2x3xf64>
    return %1 : tensor<2x3xf64>
  }
}


// -----// IR Dump After TosaToTensor (tosa-to-tensor) //----- //
module {
  func.func @test_addmul(%arg0: tensor<2x3xf64>, %arg1: tensor<2x3xf64>, %arg2: tensor<2x3xf64>) -> tensor<2x3xf64> attributes {llvm.emit_c_interface} {
    %0 = tosa.add %arg0, %arg1 : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<2x3xf64>
    %1 = tosa.mul %0, %arg2 {shift = 0 : i8} : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<2x3xf64>
    return %1 : tensor<2x3xf64>
  }
}


// -----// IR Dump After TosaToLinalgNamed (tosa-to-linalg-named) //----- //
func.func @test_addmul(%arg0: tensor<2x3xf64>, %arg1: tensor<2x3xf64>, %arg2: tensor<2x3xf64>) -> tensor<2x3xf64> attributes {llvm.emit_c_interface} {
  %0 = tosa.add %arg0, %arg1 : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<2x3xf64>
  %1 = tosa.mul %0, %arg2 {shift = 0 : i8} : (tensor<2x3xf64>, tensor<2x3xf64>) -> tensor<2x3xf64>
  return %1 : tensor<2x3xf64>
}

// -----// IR Dump After TosaToLinalg (tosa-to-linalg) //----- //
func.func @test_addmul(%arg0: tensor<2x3xf64>, %arg1: tensor<2x3xf64>, %arg2: tensor<2x3xf64>) -> tensor<2x3xf64> attributes {llvm.emit_c_interface} {
  %0 = tensor.empty() : tensor<2x3xf64>
  %1 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%arg0, %arg1 : tensor<2x3xf64>, tensor<2x3xf64>) outs(%0 : tensor<2x3xf64>) {
  ^bb0(%in: f64, %in_0: f64, %out: f64):
    %4 = arith.addf %in, %in_0 : f64
    linalg.yield %4 : f64
  } -> tensor<2x3xf64>
  %2 = tensor.empty() : tensor<2x3xf64>
  %3 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1, %arg2 : tensor<2x3xf64>, tensor<2x3xf64>) outs(%2 : tensor<2x3xf64>) {
  ^bb0(%in: f64, %in_0: f64, %out: f64):
    %4 = arith.mulf %in, %in_0 : f64
    linalg.yield %4 : f64
  } -> tensor<2x3xf64>
  return %3 : tensor<2x3xf64>
}

// -----// IR Dump After OneShotBufferize (one-shot-bufferize) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @test_addmul(%arg0: tensor<2x3xf64>, %arg1: tensor<2x3xf64>, %arg2: tensor<2x3xf64>) -> tensor<2x3xf64> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_memref %arg2 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %1 = bufferization.to_memref %arg1 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %2 = bufferization.to_memref %arg0 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%2, %1 : memref<2x3xf64, strided<[?, ?], offset: ?>>, memref<2x3xf64, strided<[?, ?], offset: ?>>) outs(%alloc : memref<2x3xf64>) {
    ^bb0(%in: f64, %in_1: f64, %out: f64):
      %4 = arith.addf %in, %in_1 : f64
      linalg.yield %4 : f64
    }
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%alloc, %0 : memref<2x3xf64>, memref<2x3xf64, strided<[?, ?], offset: ?>>) outs(%alloc_0 : memref<2x3xf64>) {
    ^bb0(%in: f64, %in_1: f64, %out: f64):
      %4 = arith.mulf %in, %in_1 : f64
      linalg.yield %4 : f64
    }
    %3 = bufferization.to_tensor %alloc_0 : memref<2x3xf64>
    return %3 : tensor<2x3xf64>
  }
}


// -----// IR Dump After FuncBufferize (func-bufferize) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg2 : memref<2x3xf64>
    %1 = bufferization.to_tensor %arg1 : memref<2x3xf64>
    %2 = bufferization.to_tensor %arg0 : memref<2x3xf64>
    %3 = bufferization.to_memref %0 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %4 = bufferization.to_memref %1 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %5 = bufferization.to_memref %2 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%5, %4 : memref<2x3xf64, strided<[?, ?], offset: ?>>, memref<2x3xf64, strided<[?, ?], offset: ?>>) outs(%alloc : memref<2x3xf64>) {
    ^bb0(%in: f64, %in_1: f64, %out: f64):
      %8 = arith.addf %in, %in_1 : f64
      linalg.yield %8 : f64
    }
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%alloc, %3 : memref<2x3xf64>, memref<2x3xf64, strided<[?, ?], offset: ?>>) outs(%alloc_0 : memref<2x3xf64>) {
    ^bb0(%in: f64, %in_1: f64, %out: f64):
      %8 = arith.mulf %in, %in_1 : f64
      linalg.yield %8 : f64
    }
    %6 = bufferization.to_tensor %alloc_0 : memref<2x3xf64>
    %7 = bufferization.to_memref %6 : memref<2x3xf64>
    return %7 : memref<2x3xf64>
  }
}


// -----// IR Dump After ConvertLinalgToAffineLoopsPass (convert-linalg-to-affine-loops) //----- //
func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
  %0 = bufferization.to_tensor %arg2 : memref<2x3xf64>
  %1 = bufferization.to_tensor %arg1 : memref<2x3xf64>
  %2 = bufferization.to_tensor %arg0 : memref<2x3xf64>
  %3 = bufferization.to_memref %0 : memref<2x3xf64, strided<[?, ?], offset: ?>>
  %4 = bufferization.to_memref %1 : memref<2x3xf64, strided<[?, ?], offset: ?>>
  %5 = bufferization.to_memref %2 : memref<2x3xf64, strided<[?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
  affine.for %arg3 = 0 to 2 {
    affine.for %arg4 = 0 to 3 {
      %6 = affine.load %5[%arg3, %arg4] : memref<2x3xf64, strided<[?, ?], offset: ?>>
      %7 = affine.load %4[%arg3, %arg4] : memref<2x3xf64, strided<[?, ?], offset: ?>>
      %8 = arith.addf %6, %7 : f64
      affine.store %8, %alloc[%arg3, %arg4] : memref<2x3xf64>
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
  affine.for %arg3 = 0 to 2 {
    affine.for %arg4 = 0 to 3 {
      %6 = affine.load %alloc[%arg3, %arg4] : memref<2x3xf64>
      %7 = affine.load %3[%arg3, %arg4] : memref<2x3xf64, strided<[?, ?], offset: ?>>
      %8 = arith.mulf %6, %7 : f64
      affine.store %8, %alloc_0[%arg3, %arg4] : memref<2x3xf64>
    }
  }
  return %alloc_0 : memref<2x3xf64>
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
  %0 = bufferization.to_tensor %arg2 : memref<2x3xf64>
  %1 = bufferization.to_tensor %arg1 : memref<2x3xf64>
  %2 = bufferization.to_tensor %arg0 : memref<2x3xf64>
  %3 = bufferization.to_memref %0 : memref<2x3xf64, strided<[?, ?], offset: ?>>
  %4 = bufferization.to_memref %1 : memref<2x3xf64, strided<[?, ?], offset: ?>>
  %5 = bufferization.to_memref %2 : memref<2x3xf64, strided<[?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
  %c0 = arith.constant 0 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  scf.for %arg3 = %c0 to %c2 step %c1 {
    %c0_4 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1_5 = arith.constant 1 : index
    scf.for %arg4 = %c0_4 to %c3 step %c1_5 {
      %6 = memref.load %5[%arg3, %arg4] : memref<2x3xf64, strided<[?, ?], offset: ?>>
      %7 = memref.load %4[%arg3, %arg4] : memref<2x3xf64, strided<[?, ?], offset: ?>>
      %8 = arith.addf %6, %7 : f64
      memref.store %8, %alloc[%arg3, %arg4] : memref<2x3xf64>
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
  %c0_1 = arith.constant 0 : index
  %c2_2 = arith.constant 2 : index
  %c1_3 = arith.constant 1 : index
  scf.for %arg3 = %c0_1 to %c2_2 step %c1_3 {
    %c0_4 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1_5 = arith.constant 1 : index
    scf.for %arg4 = %c0_4 to %c3 step %c1_5 {
      %6 = memref.load %alloc[%arg3, %arg4] : memref<2x3xf64>
      %7 = memref.load %3[%arg3, %arg4] : memref<2x3xf64, strided<[?, ?], offset: ?>>
      %8 = arith.mulf %6, %7 : f64
      memref.store %8, %alloc_0[%arg3, %arg4] : memref<2x3xf64>
    }
  }
  return %alloc_0 : memref<2x3xf64>
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg2 : memref<2x3xf64>
    %1 = bufferization.to_tensor %arg1 : memref<2x3xf64>
    %2 = bufferization.to_tensor %arg0 : memref<2x3xf64>
    %3 = bufferization.to_memref %0 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %4 = bufferization.to_memref %1 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %5 = bufferization.to_memref %2 : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%6: index):  // 2 preds: ^bb0, ^bb5
    %7 = arith.cmpi slt, %6, %c2 : index
    cf.cond_br %7, ^bb2, ^bb6
  ^bb2:  // pred: ^bb1
    %c0_0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1_1 = arith.constant 1 : index
    cf.br ^bb3(%c0_0 : index)
  ^bb3(%8: index):  // 2 preds: ^bb2, ^bb4
    %9 = arith.cmpi slt, %8, %c3 : index
    cf.cond_br %9, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %10 = memref.load %5[%6, %8] : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %11 = memref.load %4[%6, %8] : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %12 = arith.addf %10, %11 : f64
    memref.store %12, %alloc[%6, %8] : memref<2x3xf64>
    %13 = arith.addi %8, %c1_1 : index
    cf.br ^bb3(%13 : index)
  ^bb5:  // pred: ^bb3
    %14 = arith.addi %6, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb6:  // pred: ^bb1
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    %c0_3 = arith.constant 0 : index
    %c2_4 = arith.constant 2 : index
    %c1_5 = arith.constant 1 : index
    cf.br ^bb7(%c0_3 : index)
  ^bb7(%15: index):  // 2 preds: ^bb6, ^bb11
    %16 = arith.cmpi slt, %15, %c2_4 : index
    cf.cond_br %16, ^bb8, ^bb12
  ^bb8:  // pred: ^bb7
    %c0_6 = arith.constant 0 : index
    %c3_7 = arith.constant 3 : index
    %c1_8 = arith.constant 1 : index
    cf.br ^bb9(%c0_6 : index)
  ^bb9(%17: index):  // 2 preds: ^bb8, ^bb10
    %18 = arith.cmpi slt, %17, %c3_7 : index
    cf.cond_br %18, ^bb10, ^bb11
  ^bb10:  // pred: ^bb9
    %19 = memref.load %alloc[%15, %17] : memref<2x3xf64>
    %20 = memref.load %3[%15, %17] : memref<2x3xf64, strided<[?, ?], offset: ?>>
    %21 = arith.mulf %19, %20 : f64
    memref.store %21, %alloc_2[%15, %17] : memref<2x3xf64>
    %22 = arith.addi %17, %c1_8 : index
    cf.br ^bb9(%22 : index)
  ^bb11:  // pred: ^bb9
    %23 = arith.addi %15, %c1_5 : index
    cf.br ^bb7(%23 : index)
  ^bb12:  // pred: ^bb7
    return %alloc_2 : memref<2x3xf64>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb4
    %1 = arith.cmpi slt, %0, %c2 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb5
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb3
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %4 = memref.load %arg0[%0, %2] : memref<2x3xf64>
    %5 = memref.load %arg1[%0, %2] : memref<2x3xf64>
    %6 = arith.addf %4, %5 : f64
    memref.store %6, %alloc[%0, %2] : memref<2x3xf64>
    %7 = arith.addi %2, %c1 : index
    cf.br ^bb2(%7 : index)
  ^bb4:  // pred: ^bb2
    %8 = arith.addi %0, %c1 : index
    cf.br ^bb1(%8 : index)
  ^bb5:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    cf.br ^bb6(%c0 : index)
  ^bb6(%9: index):  // 2 preds: ^bb5, ^bb9
    %10 = arith.cmpi slt, %9, %c2 : index
    cf.cond_br %10, ^bb7(%c0 : index), ^bb10
  ^bb7(%11: index):  // 2 preds: ^bb6, ^bb8
    %12 = arith.cmpi slt, %11, %c3 : index
    cf.cond_br %12, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %13 = memref.load %alloc[%9, %11] : memref<2x3xf64>
    %14 = memref.load %arg2[%9, %11] : memref<2x3xf64>
    %15 = arith.mulf %13, %14 : f64
    memref.store %15, %alloc_0[%9, %11] : memref<2x3xf64>
    %16 = arith.addi %11, %c1 : index
    cf.br ^bb7(%16 : index)
  ^bb9:  // pred: ^bb7
    %17 = arith.addi %9, %c1 : index
    cf.br ^bb6(%17 : index)
  ^bb10:  // pred: ^bb6
    return %alloc_0 : memref<2x3xf64>
  }
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module {
  func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb4
    %1 = arith.cmpi slt, %0, %c2 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb5
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb3
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %4 = memref.load %arg0[%0, %2] : memref<2x3xf64>
    %5 = memref.load %arg1[%0, %2] : memref<2x3xf64>
    %6 = arith.addf %4, %5 : f64
    memref.store %6, %alloc[%0, %2] : memref<2x3xf64>
    %7 = arith.addi %2, %c1 : index
    cf.br ^bb2(%7 : index)
  ^bb4:  // pred: ^bb2
    %8 = arith.addi %0, %c1 : index
    cf.br ^bb1(%8 : index)
  ^bb5:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    cf.br ^bb6(%c0 : index)
  ^bb6(%9: index):  // 2 preds: ^bb5, ^bb9
    %10 = arith.cmpi slt, %9, %c2 : index
    cf.cond_br %10, ^bb7(%c0 : index), ^bb10
  ^bb7(%11: index):  // 2 preds: ^bb6, ^bb8
    %12 = arith.cmpi slt, %11, %c3 : index
    cf.cond_br %12, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %13 = memref.load %alloc[%9, %11] : memref<2x3xf64>
    %14 = memref.load %arg2[%9, %11] : memref<2x3xf64>
    %15 = arith.mulf %13, %14 : f64
    memref.store %15, %alloc_0[%9, %11] : memref<2x3xf64>
    %16 = arith.addi %11, %c1 : index
    cf.br ^bb7(%16 : index)
  ^bb9:  // pred: ^bb7
    %17 = arith.addi %9, %c1 : index
    cf.br ^bb6(%17 : index)
  ^bb10:  // pred: ^bb6
    return %alloc_0 : memref<2x3xf64>
  }
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module {
  func.func @test_addmul(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>, %arg2: memref<2x3xf64>) -> memref<2x3xf64> attributes {llvm.emit_c_interface} {
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb4
    %1 = arith.cmpi slt, %0, %c2 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb5
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb3
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %4 = memref.load %arg0[%0, %2] : memref<2x3xf64>
    %5 = memref.load %arg1[%0, %2] : memref<2x3xf64>
    %6 = arith.addf %4, %5 : f64
    memref.store %6, %alloc[%0, %2] : memref<2x3xf64>
    %7 = arith.addi %2, %c1 : index
    cf.br ^bb2(%7 : index)
  ^bb4:  // pred: ^bb2
    %8 = arith.addi %0, %c1 : index
    cf.br ^bb1(%8 : index)
  ^bb5:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    cf.br ^bb6(%c0 : index)
  ^bb6(%9: index):  // 2 preds: ^bb5, ^bb9
    %10 = arith.cmpi slt, %9, %c2 : index
    cf.cond_br %10, ^bb7(%c0 : index), ^bb10
  ^bb7(%11: index):  // 2 preds: ^bb6, ^bb8
    %12 = arith.cmpi slt, %11, %c3 : index
    cf.cond_br %12, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %13 = memref.load %alloc[%9, %11] : memref<2x3xf64>
    %14 = memref.load %arg2[%9, %11] : memref<2x3xf64>
    %15 = arith.mulf %13, %14 : f64
    memref.store %15, %alloc_0[%9, %11] : memref<2x3xf64>
    %16 = arith.addi %11, %c1 : index
    cf.br ^bb7(%16 : index)
  ^bb9:  // pred: ^bb7
    %17 = arith.addi %9, %c1 : index
    cf.br ^bb6(%17 : index)
  ^bb10:  // pred: ^bb6
    return %alloc_0 : memref<2x3xf64>
  }
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module {
  llvm.func @test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64, %arg14: !llvm.ptr, %arg15: !llvm.ptr, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg14, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg15, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg16, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg17, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg19, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg18, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg20, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = builtin.unrealized_conversion_cast %7 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %10 = llvm.insertvalue %arg7, %9[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg8, %10[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg9, %11[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg10, %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg12, %13[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg11, %14[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.insertvalue %arg13, %15[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %19 = llvm.insertvalue %arg0, %18[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.insertvalue %arg1, %19[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %arg2, %20[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %arg3, %21[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %arg5, %22[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.insertvalue %arg4, %23[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %25 = llvm.insertvalue %arg6, %24[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %26 = builtin.unrealized_conversion_cast %25 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %27 = llvm.mlir.constant(3 : index) : i64
    %28 = llvm.mlir.constant(1 : index) : i64
    %29 = llvm.mlir.constant(2 : index) : i64
    %30 = llvm.mlir.constant(0 : index) : i64
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    llvm.br ^bb1(%30 : i64)
  ^bb1(%31: i64):  // 2 preds: ^bb0, ^bb4
    %32 = builtin.unrealized_conversion_cast %31 : i64 to index
    %33 = llvm.icmp "slt" %31, %29 : i64
    llvm.cond_br %33, ^bb2(%30 : i64), ^bb5
  ^bb2(%34: i64):  // 2 preds: ^bb1, ^bb3
    %35 = builtin.unrealized_conversion_cast %34 : i64 to index
    %36 = llvm.icmp "slt" %34, %27 : i64
    llvm.cond_br %36, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %37 = memref.load %26[%32, %35] : memref<2x3xf64>
    %38 = memref.load %17[%32, %35] : memref<2x3xf64>
    %39 = llvm.fadd %37, %38  : f64
    memref.store %39, %alloc[%32, %35] : memref<2x3xf64>
    %40 = llvm.add %34, %28 : i64
    llvm.br ^bb2(%40 : i64)
  ^bb4:  // pred: ^bb2
    %41 = llvm.add %31, %28 : i64
    llvm.br ^bb1(%41 : i64)
  ^bb5:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<2x3xf64>
    %42 = builtin.unrealized_conversion_cast %alloc_0 : memref<2x3xf64> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.br ^bb6(%30 : i64)
  ^bb6(%43: i64):  // 2 preds: ^bb5, ^bb9
    %44 = builtin.unrealized_conversion_cast %43 : i64 to index
    %45 = llvm.icmp "slt" %43, %29 : i64
    llvm.cond_br %45, ^bb7(%30 : i64), ^bb10
  ^bb7(%46: i64):  // 2 preds: ^bb6, ^bb8
    %47 = builtin.unrealized_conversion_cast %46 : i64 to index
    %48 = llvm.icmp "slt" %46, %27 : i64
    llvm.cond_br %48, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %49 = memref.load %alloc[%44, %47] : memref<2x3xf64>
    %50 = memref.load %8[%44, %47] : memref<2x3xf64>
    %51 = llvm.fmul %49, %50  : f64
    memref.store %51, %alloc_0[%44, %47] : memref<2x3xf64>
    %52 = llvm.add %46, %28 : i64
    llvm.br ^bb7(%52 : i64)
  ^bb9:  // pred: ^bb7
    %53 = llvm.add %43, %28 : i64
    llvm.br ^bb6(%53 : i64)
  ^bb10:  // pred: ^bb6
    llvm.return %42 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.extractvalue %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.extractvalue %16[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.extractvalue %16[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.extractvalue %16[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.extractvalue %16[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.extractvalue %16[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.call @test_addmul(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %24, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64, %arg14: !llvm.ptr, %arg15: !llvm.ptr, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg14, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg15, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg16, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg17, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg19, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg18, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg20, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = builtin.unrealized_conversion_cast %7 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %10 = llvm.insertvalue %arg7, %9[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg8, %10[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg9, %11[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg10, %12[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg12, %13[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg11, %14[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.insertvalue %arg13, %15[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %19 = llvm.insertvalue %arg0, %18[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.insertvalue %arg1, %19[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %arg2, %20[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %arg3, %21[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %arg5, %22[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.insertvalue %arg4, %23[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %25 = llvm.insertvalue %arg6, %24[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %26 = builtin.unrealized_conversion_cast %25 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %27 = llvm.mlir.constant(3 : index) : i64
    %28 = llvm.mlir.constant(1 : index) : i64
    %29 = llvm.mlir.constant(2 : index) : i64
    %30 = llvm.mlir.constant(0 : index) : i64
    %31 = llvm.mlir.constant(2 : index) : i64
    %32 = llvm.mlir.constant(3 : index) : i64
    %33 = llvm.mlir.constant(1 : index) : i64
    %34 = llvm.mlir.constant(6 : index) : i64
    %35 = llvm.mlir.zero : !llvm.ptr
    %36 = llvm.getelementptr %35[%34] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %37 = llvm.ptrtoint %36 : !llvm.ptr to i64
    %38 = llvm.mlir.constant(64 : index) : i64
    %39 = llvm.add %37, %38 : i64
    %40 = llvm.call @malloc(%39) : (i64) -> !llvm.ptr
    %41 = llvm.ptrtoint %40 : !llvm.ptr to i64
    %42 = llvm.mlir.constant(1 : index) : i64
    %43 = llvm.sub %38, %42 : i64
    %44 = llvm.add %41, %43 : i64
    %45 = llvm.urem %44, %38  : i64
    %46 = llvm.sub %44, %45 : i64
    %47 = llvm.inttoptr %46 : i64 to !llvm.ptr
    %48 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %49 = llvm.insertvalue %40, %48[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %50 = llvm.insertvalue %47, %49[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %51 = llvm.mlir.constant(0 : index) : i64
    %52 = llvm.insertvalue %51, %50[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %53 = llvm.insertvalue %31, %52[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %54 = llvm.insertvalue %32, %53[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %55 = llvm.insertvalue %32, %54[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %56 = llvm.insertvalue %33, %55[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%30 : i64)
  ^bb1(%57: i64):  // 2 preds: ^bb0, ^bb4
    %58 = builtin.unrealized_conversion_cast %57 : i64 to index
    %59 = llvm.icmp "slt" %57, %29 : i64
    llvm.cond_br %59, ^bb2(%30 : i64), ^bb5
  ^bb2(%60: i64):  // 2 preds: ^bb1, ^bb3
    %61 = builtin.unrealized_conversion_cast %60 : i64 to index
    %62 = llvm.icmp "slt" %60, %27 : i64
    llvm.cond_br %62, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %63 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %64 = llvm.mlir.constant(3 : index) : i64
    %65 = llvm.mul %57, %64 : i64
    %66 = llvm.add %65, %60 : i64
    %67 = llvm.getelementptr %63[%66] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %68 = llvm.load %67 : !llvm.ptr -> f64
    %69 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %70 = llvm.mlir.constant(3 : index) : i64
    %71 = llvm.mul %57, %70 : i64
    %72 = llvm.add %71, %60 : i64
    %73 = llvm.getelementptr %69[%72] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %74 = llvm.load %73 : !llvm.ptr -> f64
    %75 = llvm.fadd %68, %74  : f64
    %76 = llvm.extractvalue %56[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %77 = llvm.mlir.constant(3 : index) : i64
    %78 = llvm.mul %57, %77 : i64
    %79 = llvm.add %78, %60 : i64
    %80 = llvm.getelementptr %76[%79] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %75, %80 : f64, !llvm.ptr
    %81 = llvm.add %60, %28 : i64
    llvm.br ^bb2(%81 : i64)
  ^bb4:  // pred: ^bb2
    %82 = llvm.add %57, %28 : i64
    llvm.br ^bb1(%82 : i64)
  ^bb5:  // pred: ^bb1
    %83 = llvm.mlir.constant(2 : index) : i64
    %84 = llvm.mlir.constant(3 : index) : i64
    %85 = llvm.mlir.constant(1 : index) : i64
    %86 = llvm.mlir.constant(6 : index) : i64
    %87 = llvm.mlir.zero : !llvm.ptr
    %88 = llvm.getelementptr %87[%86] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %89 = llvm.ptrtoint %88 : !llvm.ptr to i64
    %90 = llvm.mlir.constant(64 : index) : i64
    %91 = llvm.add %89, %90 : i64
    %92 = llvm.call @malloc(%91) : (i64) -> !llvm.ptr
    %93 = llvm.ptrtoint %92 : !llvm.ptr to i64
    %94 = llvm.mlir.constant(1 : index) : i64
    %95 = llvm.sub %90, %94 : i64
    %96 = llvm.add %93, %95 : i64
    %97 = llvm.urem %96, %90  : i64
    %98 = llvm.sub %96, %97 : i64
    %99 = llvm.inttoptr %98 : i64 to !llvm.ptr
    %100 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %101 = llvm.insertvalue %92, %100[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %102 = llvm.insertvalue %99, %101[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %103 = llvm.mlir.constant(0 : index) : i64
    %104 = llvm.insertvalue %103, %102[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %105 = llvm.insertvalue %83, %104[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %106 = llvm.insertvalue %84, %105[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %107 = llvm.insertvalue %84, %106[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %108 = llvm.insertvalue %85, %107[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %109 = builtin.unrealized_conversion_cast %108 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<2x3xf64>
    %110 = builtin.unrealized_conversion_cast %109 : memref<2x3xf64> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.br ^bb6(%30 : i64)
  ^bb6(%111: i64):  // 2 preds: ^bb5, ^bb9
    %112 = builtin.unrealized_conversion_cast %111 : i64 to index
    %113 = llvm.icmp "slt" %111, %29 : i64
    llvm.cond_br %113, ^bb7(%30 : i64), ^bb10
  ^bb7(%114: i64):  // 2 preds: ^bb6, ^bb8
    %115 = builtin.unrealized_conversion_cast %114 : i64 to index
    %116 = llvm.icmp "slt" %114, %27 : i64
    llvm.cond_br %116, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %117 = llvm.extractvalue %56[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %118 = llvm.mlir.constant(3 : index) : i64
    %119 = llvm.mul %111, %118 : i64
    %120 = llvm.add %119, %114 : i64
    %121 = llvm.getelementptr %117[%120] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %122 = llvm.load %121 : !llvm.ptr -> f64
    %123 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %124 = llvm.mlir.constant(3 : index) : i64
    %125 = llvm.mul %111, %124 : i64
    %126 = llvm.add %125, %114 : i64
    %127 = llvm.getelementptr %123[%126] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %128 = llvm.load %127 : !llvm.ptr -> f64
    %129 = llvm.fmul %122, %128  : f64
    %130 = llvm.extractvalue %108[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %131 = llvm.mlir.constant(3 : index) : i64
    %132 = llvm.mul %111, %131 : i64
    %133 = llvm.add %132, %114 : i64
    %134 = llvm.getelementptr %130[%133] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %129, %134 : f64, !llvm.ptr
    %135 = llvm.add %114, %28 : i64
    llvm.br ^bb7(%135 : i64)
  ^bb9:  // pred: ^bb7
    %136 = llvm.add %111, %28 : i64
    llvm.br ^bb6(%136 : i64)
  ^bb10:  // pred: ^bb6
    llvm.return %110 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.extractvalue %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.extractvalue %16[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.extractvalue %16[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.extractvalue %16[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.extractvalue %16[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.extractvalue %16[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.call @test_addmul(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %24, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64, %arg14: !llvm.ptr, %arg15: !llvm.ptr, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg14, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg15, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg16, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg17, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg19, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg18, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg20, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.insertvalue %arg7, %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.insertvalue %arg8, %9[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg9, %10[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg10, %11[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg12, %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg11, %13[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg13, %14[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.insertvalue %arg0, %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.insertvalue %arg1, %17[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.insertvalue %arg2, %18[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.insertvalue %arg3, %19[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %arg5, %20[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %arg4, %21[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %arg6, %22[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.mlir.constant(3 : index) : i64
    %25 = llvm.mlir.constant(1 : index) : i64
    %26 = llvm.mlir.constant(2 : index) : i64
    %27 = llvm.mlir.constant(0 : index) : i64
    %28 = llvm.mlir.constant(2 : index) : i64
    %29 = llvm.mlir.constant(3 : index) : i64
    %30 = llvm.mlir.constant(1 : index) : i64
    %31 = llvm.mlir.constant(6 : index) : i64
    %32 = llvm.mlir.zero : !llvm.ptr
    %33 = llvm.getelementptr %32[%31] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %34 = llvm.ptrtoint %33 : !llvm.ptr to i64
    %35 = llvm.mlir.constant(64 : index) : i64
    %36 = llvm.add %34, %35 : i64
    %37 = llvm.call @malloc(%36) : (i64) -> !llvm.ptr
    %38 = llvm.ptrtoint %37 : !llvm.ptr to i64
    %39 = llvm.mlir.constant(1 : index) : i64
    %40 = llvm.sub %35, %39 : i64
    %41 = llvm.add %38, %40 : i64
    %42 = llvm.urem %41, %35  : i64
    %43 = llvm.sub %41, %42 : i64
    %44 = llvm.inttoptr %43 : i64 to !llvm.ptr
    %45 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %46 = llvm.insertvalue %37, %45[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %47 = llvm.insertvalue %44, %46[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %48 = llvm.mlir.constant(0 : index) : i64
    %49 = llvm.insertvalue %48, %47[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %50 = llvm.insertvalue %28, %49[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %51 = llvm.insertvalue %29, %50[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %52 = llvm.insertvalue %29, %51[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %53 = llvm.insertvalue %30, %52[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%27 : i64)
  ^bb1(%54: i64):  // 2 preds: ^bb0, ^bb4
    %55 = llvm.icmp "slt" %54, %26 : i64
    llvm.cond_br %55, ^bb2(%27 : i64), ^bb5
  ^bb2(%56: i64):  // 2 preds: ^bb1, ^bb3
    %57 = llvm.icmp "slt" %56, %24 : i64
    llvm.cond_br %57, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %58 = llvm.extractvalue %23[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %59 = llvm.mlir.constant(3 : index) : i64
    %60 = llvm.mul %54, %59 : i64
    %61 = llvm.add %60, %56 : i64
    %62 = llvm.getelementptr %58[%61] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %63 = llvm.load %62 : !llvm.ptr -> f64
    %64 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %65 = llvm.mlir.constant(3 : index) : i64
    %66 = llvm.mul %54, %65 : i64
    %67 = llvm.add %66, %56 : i64
    %68 = llvm.getelementptr %64[%67] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %69 = llvm.load %68 : !llvm.ptr -> f64
    %70 = llvm.fadd %63, %69  : f64
    %71 = llvm.extractvalue %53[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %72 = llvm.mlir.constant(3 : index) : i64
    %73 = llvm.mul %54, %72 : i64
    %74 = llvm.add %73, %56 : i64
    %75 = llvm.getelementptr %71[%74] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %70, %75 : f64, !llvm.ptr
    %76 = llvm.add %56, %25 : i64
    llvm.br ^bb2(%76 : i64)
  ^bb4:  // pred: ^bb2
    %77 = llvm.add %54, %25 : i64
    llvm.br ^bb1(%77 : i64)
  ^bb5:  // pred: ^bb1
    %78 = llvm.mlir.constant(2 : index) : i64
    %79 = llvm.mlir.constant(3 : index) : i64
    %80 = llvm.mlir.constant(1 : index) : i64
    %81 = llvm.mlir.constant(6 : index) : i64
    %82 = llvm.mlir.zero : !llvm.ptr
    %83 = llvm.getelementptr %82[%81] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %84 = llvm.ptrtoint %83 : !llvm.ptr to i64
    %85 = llvm.mlir.constant(64 : index) : i64
    %86 = llvm.add %84, %85 : i64
    %87 = llvm.call @malloc(%86) : (i64) -> !llvm.ptr
    %88 = llvm.ptrtoint %87 : !llvm.ptr to i64
    %89 = llvm.mlir.constant(1 : index) : i64
    %90 = llvm.sub %85, %89 : i64
    %91 = llvm.add %88, %90 : i64
    %92 = llvm.urem %91, %85  : i64
    %93 = llvm.sub %91, %92 : i64
    %94 = llvm.inttoptr %93 : i64 to !llvm.ptr
    %95 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %96 = llvm.insertvalue %87, %95[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %97 = llvm.insertvalue %94, %96[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %98 = llvm.mlir.constant(0 : index) : i64
    %99 = llvm.insertvalue %98, %97[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %100 = llvm.insertvalue %78, %99[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %101 = llvm.insertvalue %79, %100[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %102 = llvm.insertvalue %79, %101[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %103 = llvm.insertvalue %80, %102[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb6(%27 : i64)
  ^bb6(%104: i64):  // 2 preds: ^bb5, ^bb9
    %105 = llvm.icmp "slt" %104, %26 : i64
    llvm.cond_br %105, ^bb7(%27 : i64), ^bb10
  ^bb7(%106: i64):  // 2 preds: ^bb6, ^bb8
    %107 = llvm.icmp "slt" %106, %24 : i64
    llvm.cond_br %107, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %108 = llvm.extractvalue %53[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %109 = llvm.mlir.constant(3 : index) : i64
    %110 = llvm.mul %104, %109 : i64
    %111 = llvm.add %110, %106 : i64
    %112 = llvm.getelementptr %108[%111] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %113 = llvm.load %112 : !llvm.ptr -> f64
    %114 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %115 = llvm.mlir.constant(3 : index) : i64
    %116 = llvm.mul %104, %115 : i64
    %117 = llvm.add %116, %106 : i64
    %118 = llvm.getelementptr %114[%117] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %119 = llvm.load %118 : !llvm.ptr -> f64
    %120 = llvm.fmul %113, %119  : f64
    %121 = llvm.extractvalue %103[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %122 = llvm.mlir.constant(3 : index) : i64
    %123 = llvm.mul %104, %122 : i64
    %124 = llvm.add %123, %106 : i64
    %125 = llvm.getelementptr %121[%124] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %120, %125 : f64, !llvm.ptr
    %126 = llvm.add %106, %25 : i64
    llvm.br ^bb7(%126 : i64)
  ^bb9:  // pred: ^bb7
    %127 = llvm.add %104, %25 : i64
    llvm.br ^bb6(%127 : i64)
  ^bb10:  // pred: ^bb6
    llvm.return %103 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.extractvalue %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.extractvalue %16[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.extractvalue %16[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.extractvalue %16[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.extractvalue %16[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.extractvalue %16[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.call @test_addmul(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %24, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}


module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr, %arg8: !llvm.ptr, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64, %arg14: !llvm.ptr, %arg15: !llvm.ptr, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg14, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg15, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg16, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg17, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg19, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg18, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg20, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.insertvalue %arg7, %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.insertvalue %arg8, %9[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg9, %10[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg10, %11[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg12, %12[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg11, %13[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg13, %14[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.insertvalue %arg0, %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.insertvalue %arg1, %17[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.insertvalue %arg2, %18[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.insertvalue %arg3, %19[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %arg5, %20[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %arg4, %21[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %arg6, %22[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.mlir.constant(3 : index) : i64
    %25 = llvm.mlir.constant(1 : index) : i64
    %26 = llvm.mlir.constant(2 : index) : i64
    %27 = llvm.mlir.constant(0 : index) : i64
    %28 = llvm.mlir.constant(2 : index) : i64
    %29 = llvm.mlir.constant(3 : index) : i64
    %30 = llvm.mlir.constant(1 : index) : i64
    %31 = llvm.mlir.constant(6 : index) : i64
    %32 = llvm.mlir.zero : !llvm.ptr
    %33 = llvm.getelementptr %32[%31] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %34 = llvm.ptrtoint %33 : !llvm.ptr to i64
    %35 = llvm.mlir.constant(64 : index) : i64
    %36 = llvm.add %34, %35 : i64
    %37 = llvm.call @malloc(%36) : (i64) -> !llvm.ptr
    %38 = llvm.ptrtoint %37 : !llvm.ptr to i64
    %39 = llvm.mlir.constant(1 : index) : i64
    %40 = llvm.sub %35, %39 : i64
    %41 = llvm.add %38, %40 : i64
    %42 = llvm.urem %41, %35  : i64
    %43 = llvm.sub %41, %42 : i64
    %44 = llvm.inttoptr %43 : i64 to !llvm.ptr
    %45 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %46 = llvm.insertvalue %37, %45[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %47 = llvm.insertvalue %44, %46[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %48 = llvm.mlir.constant(0 : index) : i64
    %49 = llvm.insertvalue %48, %47[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %50 = llvm.insertvalue %28, %49[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %51 = llvm.insertvalue %29, %50[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %52 = llvm.insertvalue %29, %51[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %53 = llvm.insertvalue %30, %52[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%27 : i64)
  ^bb1(%54: i64):  // 2 preds: ^bb0, ^bb4
    %55 = llvm.icmp "slt" %54, %26 : i64
    llvm.cond_br %55, ^bb2(%27 : i64), ^bb5
  ^bb2(%56: i64):  // 2 preds: ^bb1, ^bb3
    %57 = llvm.icmp "slt" %56, %24 : i64
    llvm.cond_br %57, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %58 = llvm.extractvalue %23[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %59 = llvm.mlir.constant(3 : index) : i64
    %60 = llvm.mul %54, %59 : i64
    %61 = llvm.add %60, %56 : i64
    %62 = llvm.getelementptr %58[%61] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %63 = llvm.load %62 : !llvm.ptr -> f64
    %64 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %65 = llvm.mlir.constant(3 : index) : i64
    %66 = llvm.mul %54, %65 : i64
    %67 = llvm.add %66, %56 : i64
    %68 = llvm.getelementptr %64[%67] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %69 = llvm.load %68 : !llvm.ptr -> f64
    %70 = llvm.fadd %63, %69  : f64
    %71 = llvm.extractvalue %53[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %72 = llvm.mlir.constant(3 : index) : i64
    %73 = llvm.mul %54, %72 : i64
    %74 = llvm.add %73, %56 : i64
    %75 = llvm.getelementptr %71[%74] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %70, %75 : f64, !llvm.ptr
    %76 = llvm.add %56, %25 : i64
    llvm.br ^bb2(%76 : i64)
  ^bb4:  // pred: ^bb2
    %77 = llvm.add %54, %25 : i64
    llvm.br ^bb1(%77 : i64)
  ^bb5:  // pred: ^bb1
    %78 = llvm.mlir.constant(2 : index) : i64
    %79 = llvm.mlir.constant(3 : index) : i64
    %80 = llvm.mlir.constant(1 : index) : i64
    %81 = llvm.mlir.constant(6 : index) : i64
    %82 = llvm.mlir.zero : !llvm.ptr
    %83 = llvm.getelementptr %82[%81] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %84 = llvm.ptrtoint %83 : !llvm.ptr to i64
    %85 = llvm.mlir.constant(64 : index) : i64
    %86 = llvm.add %84, %85 : i64
    %87 = llvm.call @malloc(%86) : (i64) -> !llvm.ptr
    %88 = llvm.ptrtoint %87 : !llvm.ptr to i64
    %89 = llvm.mlir.constant(1 : index) : i64
    %90 = llvm.sub %85, %89 : i64
    %91 = llvm.add %88, %90 : i64
    %92 = llvm.urem %91, %85  : i64
    %93 = llvm.sub %91, %92 : i64
    %94 = llvm.inttoptr %93 : i64 to !llvm.ptr
    %95 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %96 = llvm.insertvalue %87, %95[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %97 = llvm.insertvalue %94, %96[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %98 = llvm.mlir.constant(0 : index) : i64
    %99 = llvm.insertvalue %98, %97[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %100 = llvm.insertvalue %78, %99[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %101 = llvm.insertvalue %79, %100[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %102 = llvm.insertvalue %79, %101[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %103 = llvm.insertvalue %80, %102[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb6(%27 : i64)
  ^bb6(%104: i64):  // 2 preds: ^bb5, ^bb9
    %105 = llvm.icmp "slt" %104, %26 : i64
    llvm.cond_br %105, ^bb7(%27 : i64), ^bb10
  ^bb7(%106: i64):  // 2 preds: ^bb6, ^bb8
    %107 = llvm.icmp "slt" %106, %24 : i64
    llvm.cond_br %107, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %108 = llvm.extractvalue %53[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %109 = llvm.mlir.constant(3 : index) : i64
    %110 = llvm.mul %104, %109 : i64
    %111 = llvm.add %110, %106 : i64
    %112 = llvm.getelementptr %108[%111] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %113 = llvm.load %112 : !llvm.ptr -> f64
    %114 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %115 = llvm.mlir.constant(3 : index) : i64
    %116 = llvm.mul %104, %115 : i64
    %117 = llvm.add %116, %106 : i64
    %118 = llvm.getelementptr %114[%117] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %119 = llvm.load %118 : !llvm.ptr -> f64
    %120 = llvm.fmul %113, %119  : f64
    %121 = llvm.extractvalue %103[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %122 = llvm.mlir.constant(3 : index) : i64
    %123 = llvm.mul %104, %122 : i64
    %124 = llvm.add %123, %106 : i64
    %125 = llvm.getelementptr %121[%124] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %120, %125 : f64, !llvm.ptr
    %126 = llvm.add %106, %25 : i64
    llvm.br ^bb7(%126 : i64)
  ^bb9:  // pred: ^bb7
    %127 = llvm.add %104, %25 : i64
    llvm.br ^bb6(%127 : i64)
  ^bb10:  // pred: ^bb6
    llvm.return %103 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @_mlir_ciface_test_addmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr, %arg3: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.load %arg3 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.extractvalue %16[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.extractvalue %16[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.extractvalue %16[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.extractvalue %16[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.extractvalue %16[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.extractvalue %16[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.call @test_addmul(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    llvm.store %24, %arg0 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    llvm.return
  }
}
