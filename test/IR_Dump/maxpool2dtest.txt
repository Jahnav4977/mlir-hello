./build/bin/mx-opt --mlir-print-ir-after-all ./test/Mx/maxpool2dtest.mlir 2> ./test/IR_Dump/maxpool2dtest.txt

// -----// IR Dump After {anonymous}::MxToTosaLowerPass () //----- //
module {
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %1 = tosa.transpose %arg0, %0 : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %2 = tosa.max_pool2d %1 {kernel = array<i64: 2, 2>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>) -> tensor<3x9x9x3xf32>
    %3 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %4 = tosa.transpose %2, %3 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    %cast = tensor.cast %4 : tensor<3x3x9x9xf32> to tensor<3x3x9x9xf32>
    return %cast : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToTensor (tosa-to-tensor) //----- //
module {
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %1 = tosa.transpose %arg0, %0 : (tensor<3x3x10x10xf32>, tensor<4xi32>) -> tensor<3x10x10x3xf32>
    %2 = tosa.max_pool2d %1 {kernel = array<i64: 2, 2>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 1, 1>} : (tensor<3x10x10x3xf32>) -> tensor<3x9x9x3xf32>
    %3 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %4 = tosa.transpose %2, %3 : (tensor<3x9x9x3xf32>, tensor<4xi32>) -> tensor<3x3x9x9xf32>
    %cast = tensor.cast %4 : tensor<3x3x9x9xf32> to tensor<3x3x9x9xf32>
    return %cast : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After TosaToLinalgNamed (tosa-to-linalg-named) //----- //
func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %1 = tensor.empty() : tensor<3x10x10x3xf32>
  %transposed = linalg.transpose ins(%arg0 : tensor<3x3x10x10xf32>) outs(%1 : tensor<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
  %cst = arith.constant -3.40282347E+38 : f32
  %2 = tensor.empty() : tensor<3x9x9x3xf32>
  %3 = linalg.fill ins(%cst : f32) outs(%2 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %4 = tensor.empty() : tensor<2x2xf32>
  %5 = linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%transposed, %4 : tensor<3x10x10x3xf32>, tensor<2x2xf32>) outs(%3 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %6 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %7 = tensor.empty() : tensor<3x3x9x9xf32>
  %transposed_0 = linalg.transpose ins(%5 : tensor<3x9x9x3xf32>) outs(%7 : tensor<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
  %cast = tensor.cast %transposed_0 : tensor<3x3x9x9xf32> to tensor<3x3x9x9xf32>
  return %cast : tensor<3x3x9x9xf32>
}

// -----// IR Dump After TosaToLinalg (tosa-to-linalg) //----- //
func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %0 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %1 = tensor.empty() : tensor<3x10x10x3xf32>
  %transposed = linalg.transpose ins(%arg0 : tensor<3x3x10x10xf32>) outs(%1 : tensor<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
  %cst = arith.constant -3.40282347E+38 : f32
  %2 = tensor.empty() : tensor<3x9x9x3xf32>
  %3 = linalg.fill ins(%cst : f32) outs(%2 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %4 = tensor.empty() : tensor<2x2xf32>
  %5 = linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%transposed, %4 : tensor<3x10x10x3xf32>, tensor<2x2xf32>) outs(%3 : tensor<3x9x9x3xf32>) -> tensor<3x9x9x3xf32>
  %6 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
  %7 = tensor.empty() : tensor<3x3x9x9xf32>
  %transposed_0 = linalg.transpose ins(%5 : tensor<3x9x9x3xf32>) outs(%7 : tensor<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
  %cast = tensor.cast %transposed_0 : tensor<3x3x9x9xf32> to tensor<3x3x9x9xf32>
  return %cast : tensor<3x3x9x9xf32>
}

// -----// IR Dump After OneShotBufferize (one-shot-bufferize) //----- //
module {
  func.func @test_maxpool2d(%arg0: tensor<3x3x10x10xf32>) -> tensor<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_memref %arg0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %1 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    linalg.transpose ins(%0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc : memref<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<2x2xf32>
    linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%alloc, %alloc_1 : memref<3x10x10x3xf32>, memref<2x2xf32>) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %2 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    linalg.transpose ins(%alloc_0 : memref<3x9x9x3xf32>) outs(%alloc_2 : memref<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
    %3 = bufferization.to_tensor %alloc_2 : memref<3x3x9x9xf32>
    return %3 : tensor<3x3x9x9xf32>
  }
}


// -----// IR Dump After FuncBufferize (func-bufferize) //----- //
module {
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
    %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %2 = "tosa.const"() <{value = dense<[0, 2, 3, 1]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    linalg.transpose ins(%1 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc : memref<3x10x10x3xf32>) permutation = [0, 2, 3, 1] 
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    linalg.fill ins(%cst : f32) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<2x2xf32>
    linalg.pooling_nhwc_max {dilations = dense<1> : vector<2xi64>, strides = dense<1> : vector<2xi64>} ins(%alloc, %alloc_1 : memref<3x10x10x3xf32>, memref<2x2xf32>) outs(%alloc_0 : memref<3x9x9x3xf32>)
    %3 = "tosa.const"() <{value = dense<[0, 3, 1, 2]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    linalg.transpose ins(%alloc_0 : memref<3x9x9x3xf32>) outs(%alloc_2 : memref<3x3x9x9xf32>) permutation = [0, 3, 1, 2] 
    %4 = bufferization.to_tensor %alloc_2 : memref<3x3x9x9xf32>
    %5 = bufferization.to_memref %4 : memref<3x3x9x9xf32>
    return %5 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertLinalgToAffineLoopsPass (convert-linalg-to-affine-loops) //----- //
func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant -3.40282347E+38 : f32
  %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
  %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 10 {
      affine.for %arg3 = 0 to 10 {
        affine.for %arg4 = 0 to 3 {
          %2 = affine.load %1[%arg1, %arg4, %arg2, %arg3] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
          affine.store %2, %alloc[%arg1, %arg2, %arg3, %arg4] : memref<3x10x10x3xf32>
        }
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 9 {
      affine.for %arg3 = 0 to 9 {
        affine.for %arg4 = 0 to 3 {
          affine.store %cst, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
        }
      }
    }
  }
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 9 {
      affine.for %arg3 = 0 to 9 {
        affine.for %arg4 = 0 to 3 {
          affine.for %arg5 = 0 to 2 {
            affine.for %arg6 = 0 to 2 {
              %2 = affine.apply affine_map<(d0, d1) -> (d0 + d1)>(%arg2, %arg5)
              %3 = affine.apply affine_map<(d0, d1) -> (d0 + d1)>(%arg3, %arg6)
              %4 = affine.load %alloc[%arg1, %2, %3, %arg4] : memref<3x10x10x3xf32>
              %5 = affine.load %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
              %6 = arith.maximumf %5, %4 : f32
              affine.store %6, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
            }
          }
        }
      }
    }
  }
  %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
  affine.for %arg1 = 0 to 3 {
    affine.for %arg2 = 0 to 3 {
      affine.for %arg3 = 0 to 9 {
        affine.for %arg4 = 0 to 9 {
          %2 = affine.load %alloc_0[%arg1, %arg3, %arg4, %arg2] : memref<3x9x9x3xf32>
          affine.store %2, %alloc_1[%arg1, %arg2, %arg3, %arg4] : memref<3x3x9x9xf32>
        }
      }
    }
  }
  return %alloc_1 : memref<3x3x9x9xf32>
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
  %cst = arith.constant -3.40282347E+38 : f32
  %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
  %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
  %c0 = arith.constant 0 : index
  %c3 = arith.constant 3 : index
  %c1 = arith.constant 1 : index
  scf.for %arg1 = %c0 to %c3 step %c1 {
    %c0_11 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_12 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c10 step %c1_12 {
      %c0_13 = arith.constant 0 : index
      %c10_14 = arith.constant 10 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_13 to %c10_14 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c3_17 = arith.constant 3 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c3_17 step %c1_18 {
          %2 = memref.load %1[%arg1, %arg4, %arg2, %arg3] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
          memref.store %2, %alloc[%arg1, %arg2, %arg3, %arg4] : memref<3x10x10x3xf32>
        }
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
  %c0_1 = arith.constant 0 : index
  %c3_2 = arith.constant 3 : index
  %c1_3 = arith.constant 1 : index
  scf.for %arg1 = %c0_1 to %c3_2 step %c1_3 {
    %c0_11 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_12 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c9 step %c1_12 {
      %c0_13 = arith.constant 0 : index
      %c9_14 = arith.constant 9 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_13 to %c9_14 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c3_17 = arith.constant 3 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c3_17 step %c1_18 {
          memref.store %cst, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
        }
      }
    }
  }
  %c0_4 = arith.constant 0 : index
  %c3_5 = arith.constant 3 : index
  %c1_6 = arith.constant 1 : index
  scf.for %arg1 = %c0_4 to %c3_5 step %c1_6 {
    %c0_11 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_12 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c9 step %c1_12 {
      %c0_13 = arith.constant 0 : index
      %c9_14 = arith.constant 9 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_13 to %c9_14 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c3_17 = arith.constant 3 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c3_17 step %c1_18 {
          %c0_19 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_20 = arith.constant 1 : index
          scf.for %arg5 = %c0_19 to %c2 step %c1_20 {
            %c0_21 = arith.constant 0 : index
            %c2_22 = arith.constant 2 : index
            %c1_23 = arith.constant 1 : index
            scf.for %arg6 = %c0_21 to %c2_22 step %c1_23 {
              %2 = arith.addi %arg2, %arg5 : index
              %3 = arith.addi %arg3, %arg6 : index
              %4 = memref.load %alloc[%arg1, %2, %3, %arg4] : memref<3x10x10x3xf32>
              %5 = memref.load %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
              %6 = arith.maximumf %5, %4 : f32
              memref.store %6, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<3x9x9x3xf32>
            }
          }
        }
      }
    }
  }
  %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
  %c0_8 = arith.constant 0 : index
  %c3_9 = arith.constant 3 : index
  %c1_10 = arith.constant 1 : index
  scf.for %arg1 = %c0_8 to %c3_9 step %c1_10 {
    %c0_11 = arith.constant 0 : index
    %c3_12 = arith.constant 3 : index
    %c1_13 = arith.constant 1 : index
    scf.for %arg2 = %c0_11 to %c3_12 step %c1_13 {
      %c0_14 = arith.constant 0 : index
      %c9 = arith.constant 9 : index
      %c1_15 = arith.constant 1 : index
      scf.for %arg3 = %c0_14 to %c9 step %c1_15 {
        %c0_16 = arith.constant 0 : index
        %c9_17 = arith.constant 9 : index
        %c1_18 = arith.constant 1 : index
        scf.for %arg4 = %c0_16 to %c9_17 step %c1_18 {
          %2 = memref.load %alloc_0[%arg1, %arg3, %arg4, %arg2] : memref<3x9x9x3xf32>
          memref.store %2, %alloc_7[%arg1, %arg2, %arg3, %arg4] : memref<3x3x9x9xf32>
        }
      }
    }
  }
  return %alloc_7 : memref<3x3x9x9xf32>
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module {
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = bufferization.to_tensor %arg0 : memref<3x3x10x10xf32>
    %1 = bufferization.to_memref %0 : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    %c0 = arith.constant 0 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%2: index):  // 2 preds: ^bb0, ^bb11
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    %c0_0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c1_1 = arith.constant 1 : index
    cf.br ^bb3(%c0_0 : index)
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb10
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    %c0_2 = arith.constant 0 : index
    %c10_3 = arith.constant 10 : index
    %c1_4 = arith.constant 1 : index
    cf.br ^bb5(%c0_2 : index)
  ^bb5(%6: index):  // 2 preds: ^bb4, ^bb9
    %7 = arith.cmpi slt, %6, %c10_3 : index
    cf.cond_br %7, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    %c0_5 = arith.constant 0 : index
    %c3_6 = arith.constant 3 : index
    %c1_7 = arith.constant 1 : index
    cf.br ^bb7(%c0_5 : index)
  ^bb7(%8: index):  // 2 preds: ^bb6, ^bb8
    %9 = arith.cmpi slt, %8, %c3_6 : index
    cf.cond_br %9, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %10 = memref.load %1[%2, %8, %4, %6] : memref<3x3x10x10xf32, strided<[?, ?, ?, ?], offset: ?>>
    memref.store %10, %alloc[%2, %4, %6, %8] : memref<3x10x10x3xf32>
    %11 = arith.addi %8, %c1_7 : index
    cf.br ^bb7(%11 : index)
  ^bb9:  // pred: ^bb7
    %12 = arith.addi %6, %c1_4 : index
    cf.br ^bb5(%12 : index)
  ^bb10:  // pred: ^bb5
    %13 = arith.addi %4, %c1_1 : index
    cf.br ^bb3(%13 : index)
  ^bb11:  // pred: ^bb3
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb12:  // pred: ^bb1
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    %c0_9 = arith.constant 0 : index
    %c3_10 = arith.constant 3 : index
    %c1_11 = arith.constant 1 : index
    cf.br ^bb13(%c0_9 : index)
  ^bb13(%15: index):  // 2 preds: ^bb12, ^bb23
    %16 = arith.cmpi slt, %15, %c3_10 : index
    cf.cond_br %16, ^bb14, ^bb24
  ^bb14:  // pred: ^bb13
    %c0_12 = arith.constant 0 : index
    %c9 = arith.constant 9 : index
    %c1_13 = arith.constant 1 : index
    cf.br ^bb15(%c0_12 : index)
  ^bb15(%17: index):  // 2 preds: ^bb14, ^bb22
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb16, ^bb23
  ^bb16:  // pred: ^bb15
    %c0_14 = arith.constant 0 : index
    %c9_15 = arith.constant 9 : index
    %c1_16 = arith.constant 1 : index
    cf.br ^bb17(%c0_14 : index)
  ^bb17(%19: index):  // 2 preds: ^bb16, ^bb21
    %20 = arith.cmpi slt, %19, %c9_15 : index
    cf.cond_br %20, ^bb18, ^bb22
  ^bb18:  // pred: ^bb17
    %c0_17 = arith.constant 0 : index
    %c3_18 = arith.constant 3 : index
    %c1_19 = arith.constant 1 : index
    cf.br ^bb19(%c0_17 : index)
  ^bb19(%21: index):  // 2 preds: ^bb18, ^bb20
    %22 = arith.cmpi slt, %21, %c3_18 : index
    cf.cond_br %22, ^bb20, ^bb21
  ^bb20:  // pred: ^bb19
    memref.store %cst, %alloc_8[%15, %17, %19, %21] : memref<3x9x9x3xf32>
    %23 = arith.addi %21, %c1_19 : index
    cf.br ^bb19(%23 : index)
  ^bb21:  // pred: ^bb19
    %24 = arith.addi %19, %c1_16 : index
    cf.br ^bb17(%24 : index)
  ^bb22:  // pred: ^bb17
    %25 = arith.addi %17, %c1_13 : index
    cf.br ^bb15(%25 : index)
  ^bb23:  // pred: ^bb15
    %26 = arith.addi %15, %c1_11 : index
    cf.br ^bb13(%26 : index)
  ^bb24:  // pred: ^bb13
    %c0_20 = arith.constant 0 : index
    %c3_21 = arith.constant 3 : index
    %c1_22 = arith.constant 1 : index
    cf.br ^bb25(%c0_20 : index)
  ^bb25(%27: index):  // 2 preds: ^bb24, ^bb41
    %28 = arith.cmpi slt, %27, %c3_21 : index
    cf.cond_br %28, ^bb26, ^bb42
  ^bb26:  // pred: ^bb25
    %c0_23 = arith.constant 0 : index
    %c9_24 = arith.constant 9 : index
    %c1_25 = arith.constant 1 : index
    cf.br ^bb27(%c0_23 : index)
  ^bb27(%29: index):  // 2 preds: ^bb26, ^bb40
    %30 = arith.cmpi slt, %29, %c9_24 : index
    cf.cond_br %30, ^bb28, ^bb41
  ^bb28:  // pred: ^bb27
    %c0_26 = arith.constant 0 : index
    %c9_27 = arith.constant 9 : index
    %c1_28 = arith.constant 1 : index
    cf.br ^bb29(%c0_26 : index)
  ^bb29(%31: index):  // 2 preds: ^bb28, ^bb39
    %32 = arith.cmpi slt, %31, %c9_27 : index
    cf.cond_br %32, ^bb30, ^bb40
  ^bb30:  // pred: ^bb29
    %c0_29 = arith.constant 0 : index
    %c3_30 = arith.constant 3 : index
    %c1_31 = arith.constant 1 : index
    cf.br ^bb31(%c0_29 : index)
  ^bb31(%33: index):  // 2 preds: ^bb30, ^bb38
    %34 = arith.cmpi slt, %33, %c3_30 : index
    cf.cond_br %34, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    %c0_32 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1_33 = arith.constant 1 : index
    cf.br ^bb33(%c0_32 : index)
  ^bb33(%35: index):  // 2 preds: ^bb32, ^bb37
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    %c0_34 = arith.constant 0 : index
    %c2_35 = arith.constant 2 : index
    %c1_36 = arith.constant 1 : index
    cf.br ^bb35(%c0_34 : index)
  ^bb35(%37: index):  // 2 preds: ^bb34, ^bb36
    %38 = arith.cmpi slt, %37, %c2_35 : index
    cf.cond_br %38, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %39 = arith.addi %29, %35 : index
    %40 = arith.addi %31, %37 : index
    %41 = memref.load %alloc[%27, %39, %40, %33] : memref<3x10x10x3xf32>
    %42 = memref.load %alloc_8[%27, %29, %31, %33] : memref<3x9x9x3xf32>
    %43 = arith.maximumf %42, %41 : f32
    memref.store %43, %alloc_8[%27, %29, %31, %33] : memref<3x9x9x3xf32>
    %44 = arith.addi %37, %c1_36 : index
    cf.br ^bb35(%44 : index)
  ^bb37:  // pred: ^bb35
    %45 = arith.addi %35, %c1_33 : index
    cf.br ^bb33(%45 : index)
  ^bb38:  // pred: ^bb33
    %46 = arith.addi %33, %c1_31 : index
    cf.br ^bb31(%46 : index)
  ^bb39:  // pred: ^bb31
    %47 = arith.addi %31, %c1_28 : index
    cf.br ^bb29(%47 : index)
  ^bb40:  // pred: ^bb29
    %48 = arith.addi %29, %c1_25 : index
    cf.br ^bb27(%48 : index)
  ^bb41:  // pred: ^bb27
    %49 = arith.addi %27, %c1_22 : index
    cf.br ^bb25(%49 : index)
  ^bb42:  // pred: ^bb25
    %alloc_37 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %c0_38 = arith.constant 0 : index
    %c3_39 = arith.constant 3 : index
    %c1_40 = arith.constant 1 : index
    cf.br ^bb43(%c0_38 : index)
  ^bb43(%50: index):  // 2 preds: ^bb42, ^bb53
    %51 = arith.cmpi slt, %50, %c3_39 : index
    cf.cond_br %51, ^bb44, ^bb54
  ^bb44:  // pred: ^bb43
    %c0_41 = arith.constant 0 : index
    %c3_42 = arith.constant 3 : index
    %c1_43 = arith.constant 1 : index
    cf.br ^bb45(%c0_41 : index)
  ^bb45(%52: index):  // 2 preds: ^bb44, ^bb52
    %53 = arith.cmpi slt, %52, %c3_42 : index
    cf.cond_br %53, ^bb46, ^bb53
  ^bb46:  // pred: ^bb45
    %c0_44 = arith.constant 0 : index
    %c9_45 = arith.constant 9 : index
    %c1_46 = arith.constant 1 : index
    cf.br ^bb47(%c0_44 : index)
  ^bb47(%54: index):  // 2 preds: ^bb46, ^bb51
    %55 = arith.cmpi slt, %54, %c9_45 : index
    cf.cond_br %55, ^bb48, ^bb52
  ^bb48:  // pred: ^bb47
    %c0_47 = arith.constant 0 : index
    %c9_48 = arith.constant 9 : index
    %c1_49 = arith.constant 1 : index
    cf.br ^bb49(%c0_47 : index)
  ^bb49(%56: index):  // 2 preds: ^bb48, ^bb50
    %57 = arith.cmpi slt, %56, %c9_48 : index
    cf.cond_br %57, ^bb50, ^bb51
  ^bb50:  // pred: ^bb49
    %58 = memref.load %alloc_8[%50, %54, %56, %52] : memref<3x9x9x3xf32>
    memref.store %58, %alloc_37[%50, %52, %54, %56] : memref<3x3x9x9xf32>
    %59 = arith.addi %56, %c1_49 : index
    cf.br ^bb49(%59 : index)
  ^bb51:  // pred: ^bb49
    %60 = arith.addi %54, %c1_46 : index
    cf.br ^bb47(%60 : index)
  ^bb52:  // pred: ^bb47
    %61 = arith.addi %52, %c1_43 : index
    cf.br ^bb45(%61 : index)
  ^bb53:  // pred: ^bb45
    %62 = arith.addi %50, %c1_40 : index
    cf.br ^bb43(%62 : index)
  ^bb54:  // pred: ^bb43
    return %alloc_37 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module {
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module {
  func.func @test_maxpool2d(%arg0: memref<3x3x10x10xf32>) -> memref<3x3x9x9xf32> attributes {llvm.emit_c_interface} {
    %c2 = arith.constant 2 : index
    %c9 = arith.constant 9 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c3 = arith.constant 3 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c3 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb9
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb7
    %3 = arith.cmpi slt, %2, %c10 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb8
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb6
    %5 = arith.cmpi slt, %4, %c10 : index
    cf.cond_br %5, ^bb4(%c0 : index), ^bb7
  ^bb4(%6: index):  // 2 preds: ^bb3, ^bb5
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %8 = memref.load %arg0[%0, %6, %2, %4] : memref<3x3x10x10xf32>
    memref.store %8, %alloc[%0, %2, %4, %6] : memref<3x10x10x3xf32>
    %9 = arith.addi %6, %c1 : index
    cf.br ^bb4(%9 : index)
  ^bb6:  // pred: ^bb4
    %10 = arith.addi %4, %c1 : index
    cf.br ^bb3(%10 : index)
  ^bb7:  // pred: ^bb3
    %11 = arith.addi %2, %c1 : index
    cf.br ^bb2(%11 : index)
  ^bb8:  // pred: ^bb2
    %12 = arith.addi %0, %c1 : index
    cf.br ^bb1(%12 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%13: index):  // 2 preds: ^bb9, ^bb17
    %14 = arith.cmpi slt, %13, %c3 : index
    cf.cond_br %14, ^bb11(%c0 : index), ^bb18(%c0 : index)
  ^bb11(%15: index):  // 2 preds: ^bb10, ^bb16
    %16 = arith.cmpi slt, %15, %c9 : index
    cf.cond_br %16, ^bb12(%c0 : index), ^bb17
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb15
    %18 = arith.cmpi slt, %17, %c9 : index
    cf.cond_br %18, ^bb13(%c0 : index), ^bb16
  ^bb13(%19: index):  // 2 preds: ^bb12, ^bb14
    %20 = arith.cmpi slt, %19, %c3 : index
    cf.cond_br %20, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %cst, %alloc_0[%13, %15, %17, %19] : memref<3x9x9x3xf32>
    %21 = arith.addi %19, %c1 : index
    cf.br ^bb13(%21 : index)
  ^bb15:  // pred: ^bb13
    %22 = arith.addi %17, %c1 : index
    cf.br ^bb12(%22 : index)
  ^bb16:  // pred: ^bb12
    %23 = arith.addi %15, %c1 : index
    cf.br ^bb11(%23 : index)
  ^bb17:  // pred: ^bb11
    %24 = arith.addi %13, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18(%25: index):  // 2 preds: ^bb10, ^bb29
    %26 = arith.cmpi slt, %25, %c3 : index
    cf.cond_br %26, ^bb19(%c0 : index), ^bb30
  ^bb19(%27: index):  // 2 preds: ^bb18, ^bb28
    %28 = arith.cmpi slt, %27, %c9 : index
    cf.cond_br %28, ^bb20(%c0 : index), ^bb29
  ^bb20(%29: index):  // 2 preds: ^bb19, ^bb27
    %30 = arith.cmpi slt, %29, %c9 : index
    cf.cond_br %30, ^bb21(%c0 : index), ^bb28
  ^bb21(%31: index):  // 2 preds: ^bb20, ^bb26
    %32 = arith.cmpi slt, %31, %c3 : index
    cf.cond_br %32, ^bb22(%c0 : index), ^bb27
  ^bb22(%33: index):  // 2 preds: ^bb21, ^bb25
    %34 = arith.cmpi slt, %33, %c2 : index
    cf.cond_br %34, ^bb23(%c0 : index), ^bb26
  ^bb23(%35: index):  // 2 preds: ^bb22, ^bb24
    %36 = arith.cmpi slt, %35, %c2 : index
    cf.cond_br %36, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %37 = arith.addi %27, %33 : index
    %38 = arith.addi %29, %35 : index
    %39 = memref.load %alloc[%25, %37, %38, %31] : memref<3x10x10x3xf32>
    %40 = memref.load %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %41 = arith.maximumf %40, %39 : f32
    memref.store %41, %alloc_0[%25, %27, %29, %31] : memref<3x9x9x3xf32>
    %42 = arith.addi %35, %c1 : index
    cf.br ^bb23(%42 : index)
  ^bb25:  // pred: ^bb23
    %43 = arith.addi %33, %c1 : index
    cf.br ^bb22(%43 : index)
  ^bb26:  // pred: ^bb22
    %44 = arith.addi %31, %c1 : index
    cf.br ^bb21(%44 : index)
  ^bb27:  // pred: ^bb21
    %45 = arith.addi %29, %c1 : index
    cf.br ^bb20(%45 : index)
  ^bb28:  // pred: ^bb20
    %46 = arith.addi %27, %c1 : index
    cf.br ^bb19(%46 : index)
  ^bb29:  // pred: ^bb19
    %47 = arith.addi %25, %c1 : index
    cf.br ^bb18(%47 : index)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%48: index):  // 2 preds: ^bb30, ^bb38
    %49 = arith.cmpi slt, %48, %c3 : index
    cf.cond_br %49, ^bb32(%c0 : index), ^bb39
  ^bb32(%50: index):  // 2 preds: ^bb31, ^bb37
    %51 = arith.cmpi slt, %50, %c3 : index
    cf.cond_br %51, ^bb33(%c0 : index), ^bb38
  ^bb33(%52: index):  // 2 preds: ^bb32, ^bb36
    %53 = arith.cmpi slt, %52, %c9 : index
    cf.cond_br %53, ^bb34(%c0 : index), ^bb37
  ^bb34(%54: index):  // 2 preds: ^bb33, ^bb35
    %55 = arith.cmpi slt, %54, %c9 : index
    cf.cond_br %55, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %56 = memref.load %alloc_0[%48, %52, %54, %50] : memref<3x9x9x3xf32>
    memref.store %56, %alloc_1[%48, %50, %52, %54] : memref<3x3x9x9xf32>
    %57 = arith.addi %54, %c1 : index
    cf.br ^bb34(%57 : index)
  ^bb36:  // pred: ^bb34
    %58 = arith.addi %52, %c1 : index
    cf.br ^bb33(%58 : index)
  ^bb37:  // pred: ^bb33
    %59 = arith.addi %50, %c1 : index
    cf.br ^bb32(%59 : index)
  ^bb38:  // pred: ^bb32
    %60 = arith.addi %48, %c1 : index
    cf.br ^bb31(%60 : index)
  ^bb39:  // pred: ^bb31
    return %alloc_1 : memref<3x3x9x9xf32>
  }
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module {
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %13 = llvm.mlir.constant(2 : index) : i64
    %14 = llvm.mlir.constant(9 : index) : i64
    %15 = llvm.mlir.constant(10 : index) : i64
    %16 = llvm.mlir.constant(1 : index) : i64
    %17 = llvm.mlir.constant(3 : index) : i64
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3x10x10x3xf32>
    llvm.br ^bb1(%18 : i64)
  ^bb1(%20: i64):  // 2 preds: ^bb0, ^bb8
    %21 = builtin.unrealized_conversion_cast %20 : i64 to index
    %22 = llvm.icmp "slt" %20, %17 : i64
    llvm.cond_br %22, ^bb2(%18 : i64), ^bb9
  ^bb2(%23: i64):  // 2 preds: ^bb1, ^bb7
    %24 = builtin.unrealized_conversion_cast %23 : i64 to index
    %25 = llvm.icmp "slt" %23, %15 : i64
    llvm.cond_br %25, ^bb3(%18 : i64), ^bb8
  ^bb3(%26: i64):  // 2 preds: ^bb2, ^bb6
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    %28 = llvm.icmp "slt" %26, %15 : i64
    llvm.cond_br %28, ^bb4(%18 : i64), ^bb7
  ^bb4(%29: i64):  // 2 preds: ^bb3, ^bb5
    %30 = builtin.unrealized_conversion_cast %29 : i64 to index
    %31 = llvm.icmp "slt" %29, %17 : i64
    llvm.cond_br %31, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %32 = memref.load %12[%21, %30, %24, %27] : memref<3x3x10x10xf32>
    memref.store %32, %alloc[%21, %24, %27, %30] : memref<3x10x10x3xf32>
    %33 = llvm.add %29, %16 : i64
    llvm.br ^bb4(%33 : i64)
  ^bb6:  // pred: ^bb4
    %34 = llvm.add %26, %16 : i64
    llvm.br ^bb3(%34 : i64)
  ^bb7:  // pred: ^bb3
    %35 = llvm.add %23, %16 : i64
    llvm.br ^bb2(%35 : i64)
  ^bb8:  // pred: ^bb2
    %36 = llvm.add %20, %16 : i64
    llvm.br ^bb1(%36 : i64)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<3x9x9x3xf32>
    llvm.br ^bb10(%18 : i64)
  ^bb10(%37: i64):  // 2 preds: ^bb9, ^bb17
    %38 = builtin.unrealized_conversion_cast %37 : i64 to index
    %39 = llvm.icmp "slt" %37, %17 : i64
    llvm.cond_br %39, ^bb11(%18 : i64), ^bb18(%18 : i64)
  ^bb11(%40: i64):  // 2 preds: ^bb10, ^bb16
    %41 = builtin.unrealized_conversion_cast %40 : i64 to index
    %42 = llvm.icmp "slt" %40, %14 : i64
    llvm.cond_br %42, ^bb12(%18 : i64), ^bb17
  ^bb12(%43: i64):  // 2 preds: ^bb11, ^bb15
    %44 = builtin.unrealized_conversion_cast %43 : i64 to index
    %45 = llvm.icmp "slt" %43, %14 : i64
    llvm.cond_br %45, ^bb13(%18 : i64), ^bb16
  ^bb13(%46: i64):  // 2 preds: ^bb12, ^bb14
    %47 = builtin.unrealized_conversion_cast %46 : i64 to index
    %48 = llvm.icmp "slt" %46, %17 : i64
    llvm.cond_br %48, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    memref.store %19, %alloc_0[%38, %41, %44, %47] : memref<3x9x9x3xf32>
    %49 = llvm.add %46, %16 : i64
    llvm.br ^bb13(%49 : i64)
  ^bb15:  // pred: ^bb13
    %50 = llvm.add %43, %16 : i64
    llvm.br ^bb12(%50 : i64)
  ^bb16:  // pred: ^bb12
    %51 = llvm.add %40, %16 : i64
    llvm.br ^bb11(%51 : i64)
  ^bb17:  // pred: ^bb11
    %52 = llvm.add %37, %16 : i64
    llvm.br ^bb10(%52 : i64)
  ^bb18(%53: i64):  // 2 preds: ^bb10, ^bb29
    %54 = builtin.unrealized_conversion_cast %53 : i64 to index
    %55 = llvm.icmp "slt" %53, %17 : i64
    llvm.cond_br %55, ^bb19(%18 : i64), ^bb30
  ^bb19(%56: i64):  // 2 preds: ^bb18, ^bb28
    %57 = builtin.unrealized_conversion_cast %56 : i64 to index
    %58 = llvm.icmp "slt" %56, %14 : i64
    llvm.cond_br %58, ^bb20(%18 : i64), ^bb29
  ^bb20(%59: i64):  // 2 preds: ^bb19, ^bb27
    %60 = builtin.unrealized_conversion_cast %59 : i64 to index
    %61 = llvm.icmp "slt" %59, %14 : i64
    llvm.cond_br %61, ^bb21(%18 : i64), ^bb28
  ^bb21(%62: i64):  // 2 preds: ^bb20, ^bb26
    %63 = builtin.unrealized_conversion_cast %62 : i64 to index
    %64 = llvm.icmp "slt" %62, %17 : i64
    llvm.cond_br %64, ^bb22(%18 : i64), ^bb27
  ^bb22(%65: i64):  // 2 preds: ^bb21, ^bb25
    %66 = llvm.icmp "slt" %65, %13 : i64
    llvm.cond_br %66, ^bb23(%18 : i64), ^bb26
  ^bb23(%67: i64):  // 2 preds: ^bb22, ^bb24
    %68 = llvm.icmp "slt" %67, %13 : i64
    llvm.cond_br %68, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %69 = llvm.add %56, %65 : i64
    %70 = builtin.unrealized_conversion_cast %69 : i64 to index
    %71 = llvm.add %59, %67 : i64
    %72 = builtin.unrealized_conversion_cast %71 : i64 to index
    %73 = memref.load %alloc[%54, %70, %72, %63] : memref<3x10x10x3xf32>
    %74 = memref.load %alloc_0[%54, %57, %60, %63] : memref<3x9x9x3xf32>
    %75 = llvm.intr.maximum(%74, %73)  : (f32, f32) -> f32
    memref.store %75, %alloc_0[%54, %57, %60, %63] : memref<3x9x9x3xf32>
    %76 = llvm.add %67, %16 : i64
    llvm.br ^bb23(%76 : i64)
  ^bb25:  // pred: ^bb23
    %77 = llvm.add %65, %16 : i64
    llvm.br ^bb22(%77 : i64)
  ^bb26:  // pred: ^bb22
    %78 = llvm.add %62, %16 : i64
    llvm.br ^bb21(%78 : i64)
  ^bb27:  // pred: ^bb21
    %79 = llvm.add %59, %16 : i64
    llvm.br ^bb20(%79 : i64)
  ^bb28:  // pred: ^bb20
    %80 = llvm.add %56, %16 : i64
    llvm.br ^bb19(%80 : i64)
  ^bb29:  // pred: ^bb19
    %81 = llvm.add %53, %16 : i64
    llvm.br ^bb18(%81 : i64)
  ^bb30:  // pred: ^bb18
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<3x3x9x9xf32>
    %82 = builtin.unrealized_conversion_cast %alloc_1 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb31(%18 : i64)
  ^bb31(%83: i64):  // 2 preds: ^bb30, ^bb38
    %84 = builtin.unrealized_conversion_cast %83 : i64 to index
    %85 = llvm.icmp "slt" %83, %17 : i64
    llvm.cond_br %85, ^bb32(%18 : i64), ^bb39
  ^bb32(%86: i64):  // 2 preds: ^bb31, ^bb37
    %87 = builtin.unrealized_conversion_cast %86 : i64 to index
    %88 = llvm.icmp "slt" %86, %17 : i64
    llvm.cond_br %88, ^bb33(%18 : i64), ^bb38
  ^bb33(%89: i64):  // 2 preds: ^bb32, ^bb36
    %90 = builtin.unrealized_conversion_cast %89 : i64 to index
    %91 = llvm.icmp "slt" %89, %14 : i64
    llvm.cond_br %91, ^bb34(%18 : i64), ^bb37
  ^bb34(%92: i64):  // 2 preds: ^bb33, ^bb35
    %93 = builtin.unrealized_conversion_cast %92 : i64 to index
    %94 = llvm.icmp "slt" %92, %14 : i64
    llvm.cond_br %94, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %95 = memref.load %alloc_0[%84, %90, %93, %87] : memref<3x9x9x3xf32>
    memref.store %95, %alloc_1[%84, %87, %90, %93] : memref<3x3x9x9xf32>
    %96 = llvm.add %92, %16 : i64
    llvm.br ^bb34(%96 : i64)
  ^bb36:  // pred: ^bb34
    %97 = llvm.add %89, %16 : i64
    llvm.br ^bb33(%97 : i64)
  ^bb37:  // pred: ^bb33
    %98 = llvm.add %86, %16 : i64
    llvm.br ^bb32(%98 : i64)
  ^bb38:  // pred: ^bb32
    %99 = llvm.add %83, %16 : i64
    llvm.br ^bb31(%99 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %82 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x10x10xf32>
    %13 = llvm.mlir.constant(2 : index) : i64
    %14 = llvm.mlir.constant(9 : index) : i64
    %15 = llvm.mlir.constant(10 : index) : i64
    %16 = llvm.mlir.constant(1 : index) : i64
    %17 = llvm.mlir.constant(3 : index) : i64
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %20 = llvm.mlir.constant(3 : index) : i64
    %21 = llvm.mlir.constant(10 : index) : i64
    %22 = llvm.mlir.constant(10 : index) : i64
    %23 = llvm.mlir.constant(3 : index) : i64
    %24 = llvm.mlir.constant(1 : index) : i64
    %25 = llvm.mlir.constant(30 : index) : i64
    %26 = llvm.mlir.constant(300 : index) : i64
    %27 = llvm.mlir.constant(900 : index) : i64
    %28 = llvm.mlir.zero : !llvm.ptr
    %29 = llvm.getelementptr %28[%27] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %30 = llvm.ptrtoint %29 : !llvm.ptr to i64
    %31 = llvm.mlir.constant(64 : index) : i64
    %32 = llvm.add %30, %31 : i64
    %33 = llvm.call @malloc(%32) : (i64) -> !llvm.ptr
    %34 = llvm.ptrtoint %33 : !llvm.ptr to i64
    %35 = llvm.mlir.constant(1 : index) : i64
    %36 = llvm.sub %31, %35 : i64
    %37 = llvm.add %34, %36 : i64
    %38 = llvm.urem %37, %31  : i64
    %39 = llvm.sub %37, %38 : i64
    %40 = llvm.inttoptr %39 : i64 to !llvm.ptr
    %41 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %42 = llvm.insertvalue %33, %41[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %40, %42[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.mlir.constant(0 : index) : i64
    %45 = llvm.insertvalue %44, %43[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %20, %45[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %21, %46[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %22, %47[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %23, %48[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %26, %49[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %25, %50[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.insertvalue %23, %51[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %53 = llvm.insertvalue %24, %52[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%18 : i64)
  ^bb1(%54: i64):  // 2 preds: ^bb0, ^bb8
    %55 = builtin.unrealized_conversion_cast %54 : i64 to index
    %56 = llvm.icmp "slt" %54, %17 : i64
    llvm.cond_br %56, ^bb2(%18 : i64), ^bb9
  ^bb2(%57: i64):  // 2 preds: ^bb1, ^bb7
    %58 = builtin.unrealized_conversion_cast %57 : i64 to index
    %59 = llvm.icmp "slt" %57, %15 : i64
    llvm.cond_br %59, ^bb3(%18 : i64), ^bb8
  ^bb3(%60: i64):  // 2 preds: ^bb2, ^bb6
    %61 = builtin.unrealized_conversion_cast %60 : i64 to index
    %62 = llvm.icmp "slt" %60, %15 : i64
    llvm.cond_br %62, ^bb4(%18 : i64), ^bb7
  ^bb4(%63: i64):  // 2 preds: ^bb3, ^bb5
    %64 = builtin.unrealized_conversion_cast %63 : i64 to index
    %65 = llvm.icmp "slt" %63, %17 : i64
    llvm.cond_br %65, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %66 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %67 = llvm.mlir.constant(300 : index) : i64
    %68 = llvm.mul %54, %67 : i64
    %69 = llvm.mlir.constant(100 : index) : i64
    %70 = llvm.mul %63, %69 : i64
    %71 = llvm.add %68, %70 : i64
    %72 = llvm.mlir.constant(10 : index) : i64
    %73 = llvm.mul %57, %72 : i64
    %74 = llvm.add %71, %73 : i64
    %75 = llvm.add %74, %60 : i64
    %76 = llvm.getelementptr %66[%75] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %77 = llvm.load %76 : !llvm.ptr -> f32
    %78 = llvm.extractvalue %53[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %79 = llvm.mlir.constant(300 : index) : i64
    %80 = llvm.mul %54, %79 : i64
    %81 = llvm.mlir.constant(30 : index) : i64
    %82 = llvm.mul %57, %81 : i64
    %83 = llvm.add %80, %82 : i64
    %84 = llvm.mlir.constant(3 : index) : i64
    %85 = llvm.mul %60, %84 : i64
    %86 = llvm.add %83, %85 : i64
    %87 = llvm.add %86, %63 : i64
    %88 = llvm.getelementptr %78[%87] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %77, %88 : f32, !llvm.ptr
    %89 = llvm.add %63, %16 : i64
    llvm.br ^bb4(%89 : i64)
  ^bb6:  // pred: ^bb4
    %90 = llvm.add %60, %16 : i64
    llvm.br ^bb3(%90 : i64)
  ^bb7:  // pred: ^bb3
    %91 = llvm.add %57, %16 : i64
    llvm.br ^bb2(%91 : i64)
  ^bb8:  // pred: ^bb2
    %92 = llvm.add %54, %16 : i64
    llvm.br ^bb1(%92 : i64)
  ^bb9:  // pred: ^bb1
    %93 = llvm.mlir.constant(3 : index) : i64
    %94 = llvm.mlir.constant(9 : index) : i64
    %95 = llvm.mlir.constant(9 : index) : i64
    %96 = llvm.mlir.constant(3 : index) : i64
    %97 = llvm.mlir.constant(1 : index) : i64
    %98 = llvm.mlir.constant(27 : index) : i64
    %99 = llvm.mlir.constant(243 : index) : i64
    %100 = llvm.mlir.constant(729 : index) : i64
    %101 = llvm.mlir.zero : !llvm.ptr
    %102 = llvm.getelementptr %101[%100] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %103 = llvm.ptrtoint %102 : !llvm.ptr to i64
    %104 = llvm.mlir.constant(64 : index) : i64
    %105 = llvm.add %103, %104 : i64
    %106 = llvm.call @malloc(%105) : (i64) -> !llvm.ptr
    %107 = llvm.ptrtoint %106 : !llvm.ptr to i64
    %108 = llvm.mlir.constant(1 : index) : i64
    %109 = llvm.sub %104, %108 : i64
    %110 = llvm.add %107, %109 : i64
    %111 = llvm.urem %110, %104  : i64
    %112 = llvm.sub %110, %111 : i64
    %113 = llvm.inttoptr %112 : i64 to !llvm.ptr
    %114 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %115 = llvm.insertvalue %106, %114[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %116 = llvm.insertvalue %113, %115[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.mlir.constant(0 : index) : i64
    %118 = llvm.insertvalue %117, %116[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %119 = llvm.insertvalue %93, %118[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %120 = llvm.insertvalue %94, %119[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %121 = llvm.insertvalue %95, %120[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %122 = llvm.insertvalue %96, %121[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %123 = llvm.insertvalue %99, %122[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %124 = llvm.insertvalue %98, %123[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %125 = llvm.insertvalue %96, %124[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %126 = llvm.insertvalue %97, %125[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%18 : i64)
  ^bb10(%127: i64):  // 2 preds: ^bb9, ^bb17
    %128 = builtin.unrealized_conversion_cast %127 : i64 to index
    %129 = llvm.icmp "slt" %127, %17 : i64
    llvm.cond_br %129, ^bb11(%18 : i64), ^bb18(%18 : i64)
  ^bb11(%130: i64):  // 2 preds: ^bb10, ^bb16
    %131 = builtin.unrealized_conversion_cast %130 : i64 to index
    %132 = llvm.icmp "slt" %130, %14 : i64
    llvm.cond_br %132, ^bb12(%18 : i64), ^bb17
  ^bb12(%133: i64):  // 2 preds: ^bb11, ^bb15
    %134 = builtin.unrealized_conversion_cast %133 : i64 to index
    %135 = llvm.icmp "slt" %133, %14 : i64
    llvm.cond_br %135, ^bb13(%18 : i64), ^bb16
  ^bb13(%136: i64):  // 2 preds: ^bb12, ^bb14
    %137 = builtin.unrealized_conversion_cast %136 : i64 to index
    %138 = llvm.icmp "slt" %136, %17 : i64
    llvm.cond_br %138, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %139 = llvm.extractvalue %126[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %140 = llvm.mlir.constant(243 : index) : i64
    %141 = llvm.mul %127, %140 : i64
    %142 = llvm.mlir.constant(27 : index) : i64
    %143 = llvm.mul %130, %142 : i64
    %144 = llvm.add %141, %143 : i64
    %145 = llvm.mlir.constant(3 : index) : i64
    %146 = llvm.mul %133, %145 : i64
    %147 = llvm.add %144, %146 : i64
    %148 = llvm.add %147, %136 : i64
    %149 = llvm.getelementptr %139[%148] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %19, %149 : f32, !llvm.ptr
    %150 = llvm.add %136, %16 : i64
    llvm.br ^bb13(%150 : i64)
  ^bb15:  // pred: ^bb13
    %151 = llvm.add %133, %16 : i64
    llvm.br ^bb12(%151 : i64)
  ^bb16:  // pred: ^bb12
    %152 = llvm.add %130, %16 : i64
    llvm.br ^bb11(%152 : i64)
  ^bb17:  // pred: ^bb11
    %153 = llvm.add %127, %16 : i64
    llvm.br ^bb10(%153 : i64)
  ^bb18(%154: i64):  // 2 preds: ^bb10, ^bb29
    %155 = builtin.unrealized_conversion_cast %154 : i64 to index
    %156 = llvm.icmp "slt" %154, %17 : i64
    llvm.cond_br %156, ^bb19(%18 : i64), ^bb30
  ^bb19(%157: i64):  // 2 preds: ^bb18, ^bb28
    %158 = builtin.unrealized_conversion_cast %157 : i64 to index
    %159 = llvm.icmp "slt" %157, %14 : i64
    llvm.cond_br %159, ^bb20(%18 : i64), ^bb29
  ^bb20(%160: i64):  // 2 preds: ^bb19, ^bb27
    %161 = builtin.unrealized_conversion_cast %160 : i64 to index
    %162 = llvm.icmp "slt" %160, %14 : i64
    llvm.cond_br %162, ^bb21(%18 : i64), ^bb28
  ^bb21(%163: i64):  // 2 preds: ^bb20, ^bb26
    %164 = builtin.unrealized_conversion_cast %163 : i64 to index
    %165 = llvm.icmp "slt" %163, %17 : i64
    llvm.cond_br %165, ^bb22(%18 : i64), ^bb27
  ^bb22(%166: i64):  // 2 preds: ^bb21, ^bb25
    %167 = llvm.icmp "slt" %166, %13 : i64
    llvm.cond_br %167, ^bb23(%18 : i64), ^bb26
  ^bb23(%168: i64):  // 2 preds: ^bb22, ^bb24
    %169 = llvm.icmp "slt" %168, %13 : i64
    llvm.cond_br %169, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %170 = llvm.add %157, %166 : i64
    %171 = builtin.unrealized_conversion_cast %170 : i64 to index
    %172 = llvm.add %160, %168 : i64
    %173 = builtin.unrealized_conversion_cast %172 : i64 to index
    %174 = llvm.extractvalue %53[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %175 = llvm.mlir.constant(300 : index) : i64
    %176 = llvm.mul %154, %175 : i64
    %177 = llvm.mlir.constant(30 : index) : i64
    %178 = llvm.mul %170, %177 : i64
    %179 = llvm.add %176, %178 : i64
    %180 = llvm.mlir.constant(3 : index) : i64
    %181 = llvm.mul %172, %180 : i64
    %182 = llvm.add %179, %181 : i64
    %183 = llvm.add %182, %163 : i64
    %184 = llvm.getelementptr %174[%183] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %185 = llvm.load %184 : !llvm.ptr -> f32
    %186 = llvm.extractvalue %126[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %187 = llvm.mlir.constant(243 : index) : i64
    %188 = llvm.mul %154, %187 : i64
    %189 = llvm.mlir.constant(27 : index) : i64
    %190 = llvm.mul %157, %189 : i64
    %191 = llvm.add %188, %190 : i64
    %192 = llvm.mlir.constant(3 : index) : i64
    %193 = llvm.mul %160, %192 : i64
    %194 = llvm.add %191, %193 : i64
    %195 = llvm.add %194, %163 : i64
    %196 = llvm.getelementptr %186[%195] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %197 = llvm.load %196 : !llvm.ptr -> f32
    %198 = llvm.intr.maximum(%197, %185)  : (f32, f32) -> f32
    %199 = llvm.extractvalue %126[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %200 = llvm.mlir.constant(243 : index) : i64
    %201 = llvm.mul %154, %200 : i64
    %202 = llvm.mlir.constant(27 : index) : i64
    %203 = llvm.mul %157, %202 : i64
    %204 = llvm.add %201, %203 : i64
    %205 = llvm.mlir.constant(3 : index) : i64
    %206 = llvm.mul %160, %205 : i64
    %207 = llvm.add %204, %206 : i64
    %208 = llvm.add %207, %163 : i64
    %209 = llvm.getelementptr %199[%208] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %198, %209 : f32, !llvm.ptr
    %210 = llvm.add %168, %16 : i64
    llvm.br ^bb23(%210 : i64)
  ^bb25:  // pred: ^bb23
    %211 = llvm.add %166, %16 : i64
    llvm.br ^bb22(%211 : i64)
  ^bb26:  // pred: ^bb22
    %212 = llvm.add %163, %16 : i64
    llvm.br ^bb21(%212 : i64)
  ^bb27:  // pred: ^bb21
    %213 = llvm.add %160, %16 : i64
    llvm.br ^bb20(%213 : i64)
  ^bb28:  // pred: ^bb20
    %214 = llvm.add %157, %16 : i64
    llvm.br ^bb19(%214 : i64)
  ^bb29:  // pred: ^bb19
    %215 = llvm.add %154, %16 : i64
    llvm.br ^bb18(%215 : i64)
  ^bb30:  // pred: ^bb18
    %216 = llvm.mlir.constant(3 : index) : i64
    %217 = llvm.mlir.constant(3 : index) : i64
    %218 = llvm.mlir.constant(9 : index) : i64
    %219 = llvm.mlir.constant(9 : index) : i64
    %220 = llvm.mlir.constant(1 : index) : i64
    %221 = llvm.mlir.constant(81 : index) : i64
    %222 = llvm.mlir.constant(243 : index) : i64
    %223 = llvm.mlir.constant(729 : index) : i64
    %224 = llvm.mlir.zero : !llvm.ptr
    %225 = llvm.getelementptr %224[%223] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %226 = llvm.ptrtoint %225 : !llvm.ptr to i64
    %227 = llvm.mlir.constant(64 : index) : i64
    %228 = llvm.add %226, %227 : i64
    %229 = llvm.call @malloc(%228) : (i64) -> !llvm.ptr
    %230 = llvm.ptrtoint %229 : !llvm.ptr to i64
    %231 = llvm.mlir.constant(1 : index) : i64
    %232 = llvm.sub %227, %231 : i64
    %233 = llvm.add %230, %232 : i64
    %234 = llvm.urem %233, %227  : i64
    %235 = llvm.sub %233, %234 : i64
    %236 = llvm.inttoptr %235 : i64 to !llvm.ptr
    %237 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %238 = llvm.insertvalue %229, %237[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %239 = llvm.insertvalue %236, %238[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %240 = llvm.mlir.constant(0 : index) : i64
    %241 = llvm.insertvalue %240, %239[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %242 = llvm.insertvalue %216, %241[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %243 = llvm.insertvalue %217, %242[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.insertvalue %218, %243[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %245 = llvm.insertvalue %219, %244[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %246 = llvm.insertvalue %222, %245[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %247 = llvm.insertvalue %221, %246[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %248 = llvm.insertvalue %219, %247[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %249 = llvm.insertvalue %220, %248[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %250 = builtin.unrealized_conversion_cast %249 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<3x3x9x9xf32>
    %251 = builtin.unrealized_conversion_cast %250 : memref<3x3x9x9xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.br ^bb31(%18 : i64)
  ^bb31(%252: i64):  // 2 preds: ^bb30, ^bb38
    %253 = builtin.unrealized_conversion_cast %252 : i64 to index
    %254 = llvm.icmp "slt" %252, %17 : i64
    llvm.cond_br %254, ^bb32(%18 : i64), ^bb39
  ^bb32(%255: i64):  // 2 preds: ^bb31, ^bb37
    %256 = builtin.unrealized_conversion_cast %255 : i64 to index
    %257 = llvm.icmp "slt" %255, %17 : i64
    llvm.cond_br %257, ^bb33(%18 : i64), ^bb38
  ^bb33(%258: i64):  // 2 preds: ^bb32, ^bb36
    %259 = builtin.unrealized_conversion_cast %258 : i64 to index
    %260 = llvm.icmp "slt" %258, %14 : i64
    llvm.cond_br %260, ^bb34(%18 : i64), ^bb37
  ^bb34(%261: i64):  // 2 preds: ^bb33, ^bb35
    %262 = builtin.unrealized_conversion_cast %261 : i64 to index
    %263 = llvm.icmp "slt" %261, %14 : i64
    llvm.cond_br %263, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %264 = llvm.extractvalue %126[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %265 = llvm.mlir.constant(243 : index) : i64
    %266 = llvm.mul %252, %265 : i64
    %267 = llvm.mlir.constant(27 : index) : i64
    %268 = llvm.mul %258, %267 : i64
    %269 = llvm.add %266, %268 : i64
    %270 = llvm.mlir.constant(3 : index) : i64
    %271 = llvm.mul %261, %270 : i64
    %272 = llvm.add %269, %271 : i64
    %273 = llvm.add %272, %255 : i64
    %274 = llvm.getelementptr %264[%273] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %275 = llvm.load %274 : !llvm.ptr -> f32
    %276 = llvm.extractvalue %249[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %277 = llvm.mlir.constant(243 : index) : i64
    %278 = llvm.mul %252, %277 : i64
    %279 = llvm.mlir.constant(81 : index) : i64
    %280 = llvm.mul %255, %279 : i64
    %281 = llvm.add %278, %280 : i64
    %282 = llvm.mlir.constant(9 : index) : i64
    %283 = llvm.mul %258, %282 : i64
    %284 = llvm.add %281, %283 : i64
    %285 = llvm.add %284, %261 : i64
    %286 = llvm.getelementptr %276[%285] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %275, %286 : f32, !llvm.ptr
    %287 = llvm.add %261, %16 : i64
    llvm.br ^bb34(%287 : i64)
  ^bb36:  // pred: ^bb34
    %288 = llvm.add %258, %16 : i64
    llvm.br ^bb33(%288 : i64)
  ^bb37:  // pred: ^bb33
    %289 = llvm.add %255, %16 : i64
    llvm.br ^bb32(%289 : i64)
  ^bb38:  // pred: ^bb32
    %290 = llvm.add %252, %16 : i64
    llvm.br ^bb31(%290 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %251 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.mlir.constant(2 : index) : i64
    %13 = llvm.mlir.constant(9 : index) : i64
    %14 = llvm.mlir.constant(10 : index) : i64
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.mlir.constant(3 : index) : i64
    %17 = llvm.mlir.constant(0 : index) : i64
    %18 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %19 = llvm.mlir.constant(3 : index) : i64
    %20 = llvm.mlir.constant(10 : index) : i64
    %21 = llvm.mlir.constant(10 : index) : i64
    %22 = llvm.mlir.constant(3 : index) : i64
    %23 = llvm.mlir.constant(1 : index) : i64
    %24 = llvm.mlir.constant(30 : index) : i64
    %25 = llvm.mlir.constant(300 : index) : i64
    %26 = llvm.mlir.constant(900 : index) : i64
    %27 = llvm.mlir.zero : !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %30 = llvm.mlir.constant(64 : index) : i64
    %31 = llvm.add %29, %30 : i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.sub %30, %34 : i64
    %36 = llvm.add %33, %35 : i64
    %37 = llvm.urem %36, %30  : i64
    %38 = llvm.sub %36, %37 : i64
    %39 = llvm.inttoptr %38 : i64 to !llvm.ptr
    %40 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %41 = llvm.insertvalue %32, %40[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %39, %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.mlir.constant(0 : index) : i64
    %44 = llvm.insertvalue %43, %42[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %19, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %20, %45[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %21, %46[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %22, %47[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %25, %48[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %24, %49[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %22, %50[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.insertvalue %23, %51[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%17 : i64)
  ^bb1(%53: i64):  // 2 preds: ^bb0, ^bb8
    %54 = llvm.icmp "slt" %53, %16 : i64
    llvm.cond_br %54, ^bb2(%17 : i64), ^bb9
  ^bb2(%55: i64):  // 2 preds: ^bb1, ^bb7
    %56 = llvm.icmp "slt" %55, %14 : i64
    llvm.cond_br %56, ^bb3(%17 : i64), ^bb8
  ^bb3(%57: i64):  // 2 preds: ^bb2, ^bb6
    %58 = llvm.icmp "slt" %57, %14 : i64
    llvm.cond_br %58, ^bb4(%17 : i64), ^bb7
  ^bb4(%59: i64):  // 2 preds: ^bb3, ^bb5
    %60 = llvm.icmp "slt" %59, %16 : i64
    llvm.cond_br %60, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %61 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.mlir.constant(300 : index) : i64
    %63 = llvm.mul %53, %62 : i64
    %64 = llvm.mlir.constant(100 : index) : i64
    %65 = llvm.mul %59, %64 : i64
    %66 = llvm.add %63, %65 : i64
    %67 = llvm.mlir.constant(10 : index) : i64
    %68 = llvm.mul %55, %67 : i64
    %69 = llvm.add %66, %68 : i64
    %70 = llvm.add %69, %57 : i64
    %71 = llvm.getelementptr %61[%70] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %72 = llvm.load %71 : !llvm.ptr -> f32
    %73 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %74 = llvm.mlir.constant(300 : index) : i64
    %75 = llvm.mul %53, %74 : i64
    %76 = llvm.mlir.constant(30 : index) : i64
    %77 = llvm.mul %55, %76 : i64
    %78 = llvm.add %75, %77 : i64
    %79 = llvm.mlir.constant(3 : index) : i64
    %80 = llvm.mul %57, %79 : i64
    %81 = llvm.add %78, %80 : i64
    %82 = llvm.add %81, %59 : i64
    %83 = llvm.getelementptr %73[%82] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %72, %83 : f32, !llvm.ptr
    %84 = llvm.add %59, %15 : i64
    llvm.br ^bb4(%84 : i64)
  ^bb6:  // pred: ^bb4
    %85 = llvm.add %57, %15 : i64
    llvm.br ^bb3(%85 : i64)
  ^bb7:  // pred: ^bb3
    %86 = llvm.add %55, %15 : i64
    llvm.br ^bb2(%86 : i64)
  ^bb8:  // pred: ^bb2
    %87 = llvm.add %53, %15 : i64
    llvm.br ^bb1(%87 : i64)
  ^bb9:  // pred: ^bb1
    %88 = llvm.mlir.constant(3 : index) : i64
    %89 = llvm.mlir.constant(9 : index) : i64
    %90 = llvm.mlir.constant(9 : index) : i64
    %91 = llvm.mlir.constant(3 : index) : i64
    %92 = llvm.mlir.constant(1 : index) : i64
    %93 = llvm.mlir.constant(27 : index) : i64
    %94 = llvm.mlir.constant(243 : index) : i64
    %95 = llvm.mlir.constant(729 : index) : i64
    %96 = llvm.mlir.zero : !llvm.ptr
    %97 = llvm.getelementptr %96[%95] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %98 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %99 = llvm.mlir.constant(64 : index) : i64
    %100 = llvm.add %98, %99 : i64
    %101 = llvm.call @malloc(%100) : (i64) -> !llvm.ptr
    %102 = llvm.ptrtoint %101 : !llvm.ptr to i64
    %103 = llvm.mlir.constant(1 : index) : i64
    %104 = llvm.sub %99, %103 : i64
    %105 = llvm.add %102, %104 : i64
    %106 = llvm.urem %105, %99  : i64
    %107 = llvm.sub %105, %106 : i64
    %108 = llvm.inttoptr %107 : i64 to !llvm.ptr
    %109 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %110 = llvm.insertvalue %101, %109[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %111 = llvm.insertvalue %108, %110[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %112 = llvm.mlir.constant(0 : index) : i64
    %113 = llvm.insertvalue %112, %111[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %114 = llvm.insertvalue %88, %113[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %115 = llvm.insertvalue %89, %114[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %116 = llvm.insertvalue %90, %115[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.insertvalue %91, %116[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %118 = llvm.insertvalue %94, %117[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %119 = llvm.insertvalue %93, %118[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %120 = llvm.insertvalue %91, %119[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %121 = llvm.insertvalue %92, %120[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%17 : i64)
  ^bb10(%122: i64):  // 2 preds: ^bb9, ^bb17
    %123 = llvm.icmp "slt" %122, %16 : i64
    llvm.cond_br %123, ^bb11(%17 : i64), ^bb18(%17 : i64)
  ^bb11(%124: i64):  // 2 preds: ^bb10, ^bb16
    %125 = llvm.icmp "slt" %124, %13 : i64
    llvm.cond_br %125, ^bb12(%17 : i64), ^bb17
  ^bb12(%126: i64):  // 2 preds: ^bb11, ^bb15
    %127 = llvm.icmp "slt" %126, %13 : i64
    llvm.cond_br %127, ^bb13(%17 : i64), ^bb16
  ^bb13(%128: i64):  // 2 preds: ^bb12, ^bb14
    %129 = llvm.icmp "slt" %128, %16 : i64
    llvm.cond_br %129, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %130 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.mlir.constant(243 : index) : i64
    %132 = llvm.mul %122, %131 : i64
    %133 = llvm.mlir.constant(27 : index) : i64
    %134 = llvm.mul %124, %133 : i64
    %135 = llvm.add %132, %134 : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mul %126, %136 : i64
    %138 = llvm.add %135, %137 : i64
    %139 = llvm.add %138, %128 : i64
    %140 = llvm.getelementptr %130[%139] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %18, %140 : f32, !llvm.ptr
    %141 = llvm.add %128, %15 : i64
    llvm.br ^bb13(%141 : i64)
  ^bb15:  // pred: ^bb13
    %142 = llvm.add %126, %15 : i64
    llvm.br ^bb12(%142 : i64)
  ^bb16:  // pred: ^bb12
    %143 = llvm.add %124, %15 : i64
    llvm.br ^bb11(%143 : i64)
  ^bb17:  // pred: ^bb11
    %144 = llvm.add %122, %15 : i64
    llvm.br ^bb10(%144 : i64)
  ^bb18(%145: i64):  // 2 preds: ^bb10, ^bb29
    %146 = llvm.icmp "slt" %145, %16 : i64
    llvm.cond_br %146, ^bb19(%17 : i64), ^bb30
  ^bb19(%147: i64):  // 2 preds: ^bb18, ^bb28
    %148 = llvm.icmp "slt" %147, %13 : i64
    llvm.cond_br %148, ^bb20(%17 : i64), ^bb29
  ^bb20(%149: i64):  // 2 preds: ^bb19, ^bb27
    %150 = llvm.icmp "slt" %149, %13 : i64
    llvm.cond_br %150, ^bb21(%17 : i64), ^bb28
  ^bb21(%151: i64):  // 2 preds: ^bb20, ^bb26
    %152 = llvm.icmp "slt" %151, %16 : i64
    llvm.cond_br %152, ^bb22(%17 : i64), ^bb27
  ^bb22(%153: i64):  // 2 preds: ^bb21, ^bb25
    %154 = llvm.icmp "slt" %153, %12 : i64
    llvm.cond_br %154, ^bb23(%17 : i64), ^bb26
  ^bb23(%155: i64):  // 2 preds: ^bb22, ^bb24
    %156 = llvm.icmp "slt" %155, %12 : i64
    llvm.cond_br %156, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %157 = llvm.add %147, %153 : i64
    %158 = llvm.add %149, %155 : i64
    %159 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %160 = llvm.mlir.constant(300 : index) : i64
    %161 = llvm.mul %145, %160 : i64
    %162 = llvm.mlir.constant(30 : index) : i64
    %163 = llvm.mul %157, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mul %158, %165 : i64
    %167 = llvm.add %164, %166 : i64
    %168 = llvm.add %167, %151 : i64
    %169 = llvm.getelementptr %159[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %170 = llvm.load %169 : !llvm.ptr -> f32
    %171 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %172 = llvm.mlir.constant(243 : index) : i64
    %173 = llvm.mul %145, %172 : i64
    %174 = llvm.mlir.constant(27 : index) : i64
    %175 = llvm.mul %147, %174 : i64
    %176 = llvm.add %173, %175 : i64
    %177 = llvm.mlir.constant(3 : index) : i64
    %178 = llvm.mul %149, %177 : i64
    %179 = llvm.add %176, %178 : i64
    %180 = llvm.add %179, %151 : i64
    %181 = llvm.getelementptr %171[%180] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %182 = llvm.load %181 : !llvm.ptr -> f32
    %183 = llvm.intr.maximum(%182, %170)  : (f32, f32) -> f32
    %184 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %185 = llvm.mlir.constant(243 : index) : i64
    %186 = llvm.mul %145, %185 : i64
    %187 = llvm.mlir.constant(27 : index) : i64
    %188 = llvm.mul %147, %187 : i64
    %189 = llvm.add %186, %188 : i64
    %190 = llvm.mlir.constant(3 : index) : i64
    %191 = llvm.mul %149, %190 : i64
    %192 = llvm.add %189, %191 : i64
    %193 = llvm.add %192, %151 : i64
    %194 = llvm.getelementptr %184[%193] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %183, %194 : f32, !llvm.ptr
    %195 = llvm.add %155, %15 : i64
    llvm.br ^bb23(%195 : i64)
  ^bb25:  // pred: ^bb23
    %196 = llvm.add %153, %15 : i64
    llvm.br ^bb22(%196 : i64)
  ^bb26:  // pred: ^bb22
    %197 = llvm.add %151, %15 : i64
    llvm.br ^bb21(%197 : i64)
  ^bb27:  // pred: ^bb21
    %198 = llvm.add %149, %15 : i64
    llvm.br ^bb20(%198 : i64)
  ^bb28:  // pred: ^bb20
    %199 = llvm.add %147, %15 : i64
    llvm.br ^bb19(%199 : i64)
  ^bb29:  // pred: ^bb19
    %200 = llvm.add %145, %15 : i64
    llvm.br ^bb18(%200 : i64)
  ^bb30:  // pred: ^bb18
    %201 = llvm.mlir.constant(3 : index) : i64
    %202 = llvm.mlir.constant(3 : index) : i64
    %203 = llvm.mlir.constant(9 : index) : i64
    %204 = llvm.mlir.constant(9 : index) : i64
    %205 = llvm.mlir.constant(1 : index) : i64
    %206 = llvm.mlir.constant(81 : index) : i64
    %207 = llvm.mlir.constant(243 : index) : i64
    %208 = llvm.mlir.constant(729 : index) : i64
    %209 = llvm.mlir.zero : !llvm.ptr
    %210 = llvm.getelementptr %209[%208] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %211 = llvm.ptrtoint %210 : !llvm.ptr to i64
    %212 = llvm.mlir.constant(64 : index) : i64
    %213 = llvm.add %211, %212 : i64
    %214 = llvm.call @malloc(%213) : (i64) -> !llvm.ptr
    %215 = llvm.ptrtoint %214 : !llvm.ptr to i64
    %216 = llvm.mlir.constant(1 : index) : i64
    %217 = llvm.sub %212, %216 : i64
    %218 = llvm.add %215, %217 : i64
    %219 = llvm.urem %218, %212  : i64
    %220 = llvm.sub %218, %219 : i64
    %221 = llvm.inttoptr %220 : i64 to !llvm.ptr
    %222 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %223 = llvm.insertvalue %214, %222[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %224 = llvm.insertvalue %221, %223[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %225 = llvm.mlir.constant(0 : index) : i64
    %226 = llvm.insertvalue %225, %224[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %227 = llvm.insertvalue %201, %226[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %228 = llvm.insertvalue %202, %227[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %229 = llvm.insertvalue %203, %228[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %230 = llvm.insertvalue %204, %229[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %231 = llvm.insertvalue %207, %230[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %206, %231[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.insertvalue %204, %232[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %234 = llvm.insertvalue %205, %233[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb31(%17 : i64)
  ^bb31(%235: i64):  // 2 preds: ^bb30, ^bb38
    %236 = llvm.icmp "slt" %235, %16 : i64
    llvm.cond_br %236, ^bb32(%17 : i64), ^bb39
  ^bb32(%237: i64):  // 2 preds: ^bb31, ^bb37
    %238 = llvm.icmp "slt" %237, %16 : i64
    llvm.cond_br %238, ^bb33(%17 : i64), ^bb38
  ^bb33(%239: i64):  // 2 preds: ^bb32, ^bb36
    %240 = llvm.icmp "slt" %239, %13 : i64
    llvm.cond_br %240, ^bb34(%17 : i64), ^bb37
  ^bb34(%241: i64):  // 2 preds: ^bb33, ^bb35
    %242 = llvm.icmp "slt" %241, %13 : i64
    llvm.cond_br %242, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %243 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.mlir.constant(243 : index) : i64
    %245 = llvm.mul %235, %244 : i64
    %246 = llvm.mlir.constant(27 : index) : i64
    %247 = llvm.mul %239, %246 : i64
    %248 = llvm.add %245, %247 : i64
    %249 = llvm.mlir.constant(3 : index) : i64
    %250 = llvm.mul %241, %249 : i64
    %251 = llvm.add %248, %250 : i64
    %252 = llvm.add %251, %237 : i64
    %253 = llvm.getelementptr %243[%252] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %254 = llvm.load %253 : !llvm.ptr -> f32
    %255 = llvm.extractvalue %234[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %256 = llvm.mlir.constant(243 : index) : i64
    %257 = llvm.mul %235, %256 : i64
    %258 = llvm.mlir.constant(81 : index) : i64
    %259 = llvm.mul %237, %258 : i64
    %260 = llvm.add %257, %259 : i64
    %261 = llvm.mlir.constant(9 : index) : i64
    %262 = llvm.mul %239, %261 : i64
    %263 = llvm.add %260, %262 : i64
    %264 = llvm.add %263, %241 : i64
    %265 = llvm.getelementptr %255[%264] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %254, %265 : f32, !llvm.ptr
    %266 = llvm.add %241, %15 : i64
    llvm.br ^bb34(%266 : i64)
  ^bb36:  // pred: ^bb34
    %267 = llvm.add %239, %15 : i64
    llvm.br ^bb33(%267 : i64)
  ^bb37:  // pred: ^bb33
    %268 = llvm.add %237, %15 : i64
    llvm.br ^bb32(%268 : i64)
  ^bb38:  // pred: ^bb32
    %269 = llvm.add %235, %15 : i64
    llvm.br ^bb31(%269 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %234 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}


module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.func @test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.insertvalue %arg7, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.insertvalue %arg8, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.insertvalue %arg5, %7[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.insertvalue %arg9, %8[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.insertvalue %arg6, %9[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.insertvalue %arg10, %10[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.mlir.constant(2 : index) : i64
    %13 = llvm.mlir.constant(9 : index) : i64
    %14 = llvm.mlir.constant(10 : index) : i64
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.mlir.constant(3 : index) : i64
    %17 = llvm.mlir.constant(0 : index) : i64
    %18 = llvm.mlir.constant(-3.40282347E+38 : f32) : f32
    %19 = llvm.mlir.constant(3 : index) : i64
    %20 = llvm.mlir.constant(10 : index) : i64
    %21 = llvm.mlir.constant(10 : index) : i64
    %22 = llvm.mlir.constant(3 : index) : i64
    %23 = llvm.mlir.constant(1 : index) : i64
    %24 = llvm.mlir.constant(30 : index) : i64
    %25 = llvm.mlir.constant(300 : index) : i64
    %26 = llvm.mlir.constant(900 : index) : i64
    %27 = llvm.mlir.zero : !llvm.ptr
    %28 = llvm.getelementptr %27[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64
    %30 = llvm.mlir.constant(64 : index) : i64
    %31 = llvm.add %29, %30 : i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.sub %30, %34 : i64
    %36 = llvm.add %33, %35 : i64
    %37 = llvm.urem %36, %30  : i64
    %38 = llvm.sub %36, %37 : i64
    %39 = llvm.inttoptr %38 : i64 to !llvm.ptr
    %40 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %41 = llvm.insertvalue %32, %40[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %39, %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.mlir.constant(0 : index) : i64
    %44 = llvm.insertvalue %43, %42[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %19, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %20, %45[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %21, %46[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %22, %47[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %25, %48[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %24, %49[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %22, %50[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.insertvalue %23, %51[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%17 : i64)
  ^bb1(%53: i64):  // 2 preds: ^bb0, ^bb8
    %54 = llvm.icmp "slt" %53, %16 : i64
    llvm.cond_br %54, ^bb2(%17 : i64), ^bb9
  ^bb2(%55: i64):  // 2 preds: ^bb1, ^bb7
    %56 = llvm.icmp "slt" %55, %14 : i64
    llvm.cond_br %56, ^bb3(%17 : i64), ^bb8
  ^bb3(%57: i64):  // 2 preds: ^bb2, ^bb6
    %58 = llvm.icmp "slt" %57, %14 : i64
    llvm.cond_br %58, ^bb4(%17 : i64), ^bb7
  ^bb4(%59: i64):  // 2 preds: ^bb3, ^bb5
    %60 = llvm.icmp "slt" %59, %16 : i64
    llvm.cond_br %60, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %61 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.mlir.constant(300 : index) : i64
    %63 = llvm.mul %53, %62 : i64
    %64 = llvm.mlir.constant(100 : index) : i64
    %65 = llvm.mul %59, %64 : i64
    %66 = llvm.add %63, %65 : i64
    %67 = llvm.mlir.constant(10 : index) : i64
    %68 = llvm.mul %55, %67 : i64
    %69 = llvm.add %66, %68 : i64
    %70 = llvm.add %69, %57 : i64
    %71 = llvm.getelementptr %61[%70] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %72 = llvm.load %71 : !llvm.ptr -> f32
    %73 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %74 = llvm.mlir.constant(300 : index) : i64
    %75 = llvm.mul %53, %74 : i64
    %76 = llvm.mlir.constant(30 : index) : i64
    %77 = llvm.mul %55, %76 : i64
    %78 = llvm.add %75, %77 : i64
    %79 = llvm.mlir.constant(3 : index) : i64
    %80 = llvm.mul %57, %79 : i64
    %81 = llvm.add %78, %80 : i64
    %82 = llvm.add %81, %59 : i64
    %83 = llvm.getelementptr %73[%82] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %72, %83 : f32, !llvm.ptr
    %84 = llvm.add %59, %15 : i64
    llvm.br ^bb4(%84 : i64)
  ^bb6:  // pred: ^bb4
    %85 = llvm.add %57, %15 : i64
    llvm.br ^bb3(%85 : i64)
  ^bb7:  // pred: ^bb3
    %86 = llvm.add %55, %15 : i64
    llvm.br ^bb2(%86 : i64)
  ^bb8:  // pred: ^bb2
    %87 = llvm.add %53, %15 : i64
    llvm.br ^bb1(%87 : i64)
  ^bb9:  // pred: ^bb1
    %88 = llvm.mlir.constant(3 : index) : i64
    %89 = llvm.mlir.constant(9 : index) : i64
    %90 = llvm.mlir.constant(9 : index) : i64
    %91 = llvm.mlir.constant(3 : index) : i64
    %92 = llvm.mlir.constant(1 : index) : i64
    %93 = llvm.mlir.constant(27 : index) : i64
    %94 = llvm.mlir.constant(243 : index) : i64
    %95 = llvm.mlir.constant(729 : index) : i64
    %96 = llvm.mlir.zero : !llvm.ptr
    %97 = llvm.getelementptr %96[%95] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %98 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %99 = llvm.mlir.constant(64 : index) : i64
    %100 = llvm.add %98, %99 : i64
    %101 = llvm.call @malloc(%100) : (i64) -> !llvm.ptr
    %102 = llvm.ptrtoint %101 : !llvm.ptr to i64
    %103 = llvm.mlir.constant(1 : index) : i64
    %104 = llvm.sub %99, %103 : i64
    %105 = llvm.add %102, %104 : i64
    %106 = llvm.urem %105, %99  : i64
    %107 = llvm.sub %105, %106 : i64
    %108 = llvm.inttoptr %107 : i64 to !llvm.ptr
    %109 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %110 = llvm.insertvalue %101, %109[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %111 = llvm.insertvalue %108, %110[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %112 = llvm.mlir.constant(0 : index) : i64
    %113 = llvm.insertvalue %112, %111[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %114 = llvm.insertvalue %88, %113[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %115 = llvm.insertvalue %89, %114[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %116 = llvm.insertvalue %90, %115[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.insertvalue %91, %116[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %118 = llvm.insertvalue %94, %117[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %119 = llvm.insertvalue %93, %118[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %120 = llvm.insertvalue %91, %119[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %121 = llvm.insertvalue %92, %120[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%17 : i64)
  ^bb10(%122: i64):  // 2 preds: ^bb9, ^bb17
    %123 = llvm.icmp "slt" %122, %16 : i64
    llvm.cond_br %123, ^bb11(%17 : i64), ^bb18(%17 : i64)
  ^bb11(%124: i64):  // 2 preds: ^bb10, ^bb16
    %125 = llvm.icmp "slt" %124, %13 : i64
    llvm.cond_br %125, ^bb12(%17 : i64), ^bb17
  ^bb12(%126: i64):  // 2 preds: ^bb11, ^bb15
    %127 = llvm.icmp "slt" %126, %13 : i64
    llvm.cond_br %127, ^bb13(%17 : i64), ^bb16
  ^bb13(%128: i64):  // 2 preds: ^bb12, ^bb14
    %129 = llvm.icmp "slt" %128, %16 : i64
    llvm.cond_br %129, ^bb14, ^bb15
  ^bb14:  // pred: ^bb13
    %130 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %131 = llvm.mlir.constant(243 : index) : i64
    %132 = llvm.mul %122, %131 : i64
    %133 = llvm.mlir.constant(27 : index) : i64
    %134 = llvm.mul %124, %133 : i64
    %135 = llvm.add %132, %134 : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mul %126, %136 : i64
    %138 = llvm.add %135, %137 : i64
    %139 = llvm.add %138, %128 : i64
    %140 = llvm.getelementptr %130[%139] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %18, %140 : f32, !llvm.ptr
    %141 = llvm.add %128, %15 : i64
    llvm.br ^bb13(%141 : i64)
  ^bb15:  // pred: ^bb13
    %142 = llvm.add %126, %15 : i64
    llvm.br ^bb12(%142 : i64)
  ^bb16:  // pred: ^bb12
    %143 = llvm.add %124, %15 : i64
    llvm.br ^bb11(%143 : i64)
  ^bb17:  // pred: ^bb11
    %144 = llvm.add %122, %15 : i64
    llvm.br ^bb10(%144 : i64)
  ^bb18(%145: i64):  // 2 preds: ^bb10, ^bb29
    %146 = llvm.icmp "slt" %145, %16 : i64
    llvm.cond_br %146, ^bb19(%17 : i64), ^bb30
  ^bb19(%147: i64):  // 2 preds: ^bb18, ^bb28
    %148 = llvm.icmp "slt" %147, %13 : i64
    llvm.cond_br %148, ^bb20(%17 : i64), ^bb29
  ^bb20(%149: i64):  // 2 preds: ^bb19, ^bb27
    %150 = llvm.icmp "slt" %149, %13 : i64
    llvm.cond_br %150, ^bb21(%17 : i64), ^bb28
  ^bb21(%151: i64):  // 2 preds: ^bb20, ^bb26
    %152 = llvm.icmp "slt" %151, %16 : i64
    llvm.cond_br %152, ^bb22(%17 : i64), ^bb27
  ^bb22(%153: i64):  // 2 preds: ^bb21, ^bb25
    %154 = llvm.icmp "slt" %153, %12 : i64
    llvm.cond_br %154, ^bb23(%17 : i64), ^bb26
  ^bb23(%155: i64):  // 2 preds: ^bb22, ^bb24
    %156 = llvm.icmp "slt" %155, %12 : i64
    llvm.cond_br %156, ^bb24, ^bb25
  ^bb24:  // pred: ^bb23
    %157 = llvm.add %147, %153 : i64
    %158 = llvm.add %149, %155 : i64
    %159 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %160 = llvm.mlir.constant(300 : index) : i64
    %161 = llvm.mul %145, %160 : i64
    %162 = llvm.mlir.constant(30 : index) : i64
    %163 = llvm.mul %157, %162 : i64
    %164 = llvm.add %161, %163 : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mul %158, %165 : i64
    %167 = llvm.add %164, %166 : i64
    %168 = llvm.add %167, %151 : i64
    %169 = llvm.getelementptr %159[%168] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %170 = llvm.load %169 : !llvm.ptr -> f32
    %171 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %172 = llvm.mlir.constant(243 : index) : i64
    %173 = llvm.mul %145, %172 : i64
    %174 = llvm.mlir.constant(27 : index) : i64
    %175 = llvm.mul %147, %174 : i64
    %176 = llvm.add %173, %175 : i64
    %177 = llvm.mlir.constant(3 : index) : i64
    %178 = llvm.mul %149, %177 : i64
    %179 = llvm.add %176, %178 : i64
    %180 = llvm.add %179, %151 : i64
    %181 = llvm.getelementptr %171[%180] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %182 = llvm.load %181 : !llvm.ptr -> f32
    %183 = llvm.intr.maximum(%182, %170)  : (f32, f32) -> f32
    %184 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %185 = llvm.mlir.constant(243 : index) : i64
    %186 = llvm.mul %145, %185 : i64
    %187 = llvm.mlir.constant(27 : index) : i64
    %188 = llvm.mul %147, %187 : i64
    %189 = llvm.add %186, %188 : i64
    %190 = llvm.mlir.constant(3 : index) : i64
    %191 = llvm.mul %149, %190 : i64
    %192 = llvm.add %189, %191 : i64
    %193 = llvm.add %192, %151 : i64
    %194 = llvm.getelementptr %184[%193] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %183, %194 : f32, !llvm.ptr
    %195 = llvm.add %155, %15 : i64
    llvm.br ^bb23(%195 : i64)
  ^bb25:  // pred: ^bb23
    %196 = llvm.add %153, %15 : i64
    llvm.br ^bb22(%196 : i64)
  ^bb26:  // pred: ^bb22
    %197 = llvm.add %151, %15 : i64
    llvm.br ^bb21(%197 : i64)
  ^bb27:  // pred: ^bb21
    %198 = llvm.add %149, %15 : i64
    llvm.br ^bb20(%198 : i64)
  ^bb28:  // pred: ^bb20
    %199 = llvm.add %147, %15 : i64
    llvm.br ^bb19(%199 : i64)
  ^bb29:  // pred: ^bb19
    %200 = llvm.add %145, %15 : i64
    llvm.br ^bb18(%200 : i64)
  ^bb30:  // pred: ^bb18
    %201 = llvm.mlir.constant(3 : index) : i64
    %202 = llvm.mlir.constant(3 : index) : i64
    %203 = llvm.mlir.constant(9 : index) : i64
    %204 = llvm.mlir.constant(9 : index) : i64
    %205 = llvm.mlir.constant(1 : index) : i64
    %206 = llvm.mlir.constant(81 : index) : i64
    %207 = llvm.mlir.constant(243 : index) : i64
    %208 = llvm.mlir.constant(729 : index) : i64
    %209 = llvm.mlir.zero : !llvm.ptr
    %210 = llvm.getelementptr %209[%208] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %211 = llvm.ptrtoint %210 : !llvm.ptr to i64
    %212 = llvm.mlir.constant(64 : index) : i64
    %213 = llvm.add %211, %212 : i64
    %214 = llvm.call @malloc(%213) : (i64) -> !llvm.ptr
    %215 = llvm.ptrtoint %214 : !llvm.ptr to i64
    %216 = llvm.mlir.constant(1 : index) : i64
    %217 = llvm.sub %212, %216 : i64
    %218 = llvm.add %215, %217 : i64
    %219 = llvm.urem %218, %212  : i64
    %220 = llvm.sub %218, %219 : i64
    %221 = llvm.inttoptr %220 : i64 to !llvm.ptr
    %222 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %223 = llvm.insertvalue %214, %222[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %224 = llvm.insertvalue %221, %223[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %225 = llvm.mlir.constant(0 : index) : i64
    %226 = llvm.insertvalue %225, %224[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %227 = llvm.insertvalue %201, %226[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %228 = llvm.insertvalue %202, %227[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %229 = llvm.insertvalue %203, %228[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %230 = llvm.insertvalue %204, %229[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %231 = llvm.insertvalue %207, %230[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %206, %231[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.insertvalue %204, %232[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %234 = llvm.insertvalue %205, %233[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb31(%17 : i64)
  ^bb31(%235: i64):  // 2 preds: ^bb30, ^bb38
    %236 = llvm.icmp "slt" %235, %16 : i64
    llvm.cond_br %236, ^bb32(%17 : i64), ^bb39
  ^bb32(%237: i64):  // 2 preds: ^bb31, ^bb37
    %238 = llvm.icmp "slt" %237, %16 : i64
    llvm.cond_br %238, ^bb33(%17 : i64), ^bb38
  ^bb33(%239: i64):  // 2 preds: ^bb32, ^bb36
    %240 = llvm.icmp "slt" %239, %13 : i64
    llvm.cond_br %240, ^bb34(%17 : i64), ^bb37
  ^bb34(%241: i64):  // 2 preds: ^bb33, ^bb35
    %242 = llvm.icmp "slt" %241, %13 : i64
    llvm.cond_br %242, ^bb35, ^bb36
  ^bb35:  // pred: ^bb34
    %243 = llvm.extractvalue %121[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.mlir.constant(243 : index) : i64
    %245 = llvm.mul %235, %244 : i64
    %246 = llvm.mlir.constant(27 : index) : i64
    %247 = llvm.mul %239, %246 : i64
    %248 = llvm.add %245, %247 : i64
    %249 = llvm.mlir.constant(3 : index) : i64
    %250 = llvm.mul %241, %249 : i64
    %251 = llvm.add %248, %250 : i64
    %252 = llvm.add %251, %237 : i64
    %253 = llvm.getelementptr %243[%252] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %254 = llvm.load %253 : !llvm.ptr -> f32
    %255 = llvm.extractvalue %234[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %256 = llvm.mlir.constant(243 : index) : i64
    %257 = llvm.mul %235, %256 : i64
    %258 = llvm.mlir.constant(81 : index) : i64
    %259 = llvm.mul %237, %258 : i64
    %260 = llvm.add %257, %259 : i64
    %261 = llvm.mlir.constant(9 : index) : i64
    %262 = llvm.mul %239, %261 : i64
    %263 = llvm.add %260, %262 : i64
    %264 = llvm.add %263, %241 : i64
    %265 = llvm.getelementptr %255[%264] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %254, %265 : f32, !llvm.ptr
    %266 = llvm.add %241, %15 : i64
    llvm.br ^bb34(%266 : i64)
  ^bb36:  // pred: ^bb34
    %267 = llvm.add %239, %15 : i64
    llvm.br ^bb33(%267 : i64)
  ^bb37:  // pred: ^bb33
    %268 = llvm.add %237, %15 : i64
    llvm.br ^bb32(%268 : i64)
  ^bb38:  // pred: ^bb32
    %269 = llvm.add %235, %15 : i64
    llvm.br ^bb31(%269 : i64)
  ^bb39:  // pred: ^bb31
    llvm.return %234 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
  }
  llvm.func @_mlir_ciface_test_maxpool2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) attributes {llvm.emit_c_interface} {
    %0 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %4 = llvm.extractvalue %0[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.extractvalue %0[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %6 = llvm.extractvalue %0[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.extractvalue %0[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %8 = llvm.extractvalue %0[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.extractvalue %0[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %10 = llvm.extractvalue %0[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.extractvalue %0[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %12 = llvm.call @test_maxpool2d(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    llvm.store %12, %arg0 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    llvm.return
  }
}
